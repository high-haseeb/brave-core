"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCoingeckoTokenDetailByMint = exports.TOKEN_ACCOUNT_LAYOUT = void 0;
const tslib_1 = require("tslib");
const BufferLayout = tslib_1.__importStar(require("@solana/buffer-layout"));
exports.TOKEN_ACCOUNT_LAYOUT = BufferLayout.struct([
    BufferLayout.blob(32, 'mint'),
    BufferLayout.blob(32, 'owner'),
    BufferLayout.nu64('amount'),
    BufferLayout.blob(93),
]);
const getCoingeckoTokenDetailUrl = (mint) => `https://cdn.trezor.io/dynamic/coingecko/api/v3/coins/solana/contract/${mint}?localization=false&tickers=false&market_data=false&community_data=false&developer_data=false&sparkline=false`;
const isTokenDetail = (data) => data &&
    'name' in data &&
    typeof data.name === 'string' &&
    'symbol' in data &&
    typeof data.symbol === 'string';
const fetchTokenDetail = (mint) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return (yield fetch(getCoingeckoTokenDetailUrl(mint))).json().then((data) => {
        if (isTokenDetail(data)) {
            return data;
        }
        return null;
    });
});
const fetchCoingeckoTokenDetailByMint = (mintBundle) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const metadataBundle = (yield Promise.all(mintBundle.map((mint) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const detail = yield fetchTokenDetail(mint).catch(() => null);
            return detail
                ? {
                    mint,
                    detail,
                }
                : null;
        })))).filter((detailWithMint) => detailWithMint !== null);
        const result = metadataBundle.reduce((acc, meta) => {
            const { mint, detail } = meta;
            return Object.assign(Object.assign({}, acc), { [mint]: {
                    name: detail.name,
                    symbol: detail.symbol,
                } });
        }, {});
        return result;
    }
    catch (e) {
        return {};
    }
});
exports.fetchCoingeckoTokenDetailByMint = fetchCoingeckoTokenDetailByMint;
//# sourceMappingURL=tokenUtils.js.map