import { useState, createElement, useRef, useEffect } from 'react';

var isBoolean = function isBoolean(data) {
  return typeof data === 'boolean' || data instanceof Boolean;
};
var isNumber = function isNumber(data) {
  return typeof data === 'number' || data instanceof Number;
};
var isString = function isString(data) {
  return typeof data === 'string' || data instanceof String;
};
var isArray = function isArray(data) {
  return Array.isArray(data);
};
var isObject = function isObject(data) {
  return data instanceof Object && data !== null;
};

function useBool(initialValueCreator) {
  var _useState = useState(initialValueCreator()),
      value = _useState[0],
      setValue = _useState[1];

  var tooggle = function tooggle() {
    return setValue(function (currentValue) {
      return !currentValue;
    });
  };

  return [value, tooggle, setValue];
}

var expandedIcon = "\u25BE";
var collapsedIcon = "\u25B8";

function combineStyles(style1, style2) {
  return (style1 || '') + " " + (style2 || '');
}

function renderExpandableObject(_ref) {
  var field = _ref.field,
      value = _ref.value,
      data = _ref.data,
      lastElement = _ref.lastElement,
      openBracket = _ref.openBracket,
      closeBracket = _ref.closeBracket,
      level = _ref.level,
      style = _ref.style,
      shouldInitiallyExpand = _ref.shouldInitiallyExpand;
  var shouldInitiallyExpandCalledRef = useRef(false);

  var _useBool = useBool(function () {
    return shouldInitiallyExpand(level, value, field);
  }),
      expanded = _useBool[0],
      toggleExpanded = _useBool[1],
      setExpanded = _useBool[2];

  useEffect(function () {
    if (!shouldInitiallyExpandCalledRef.current) {
      shouldInitiallyExpandCalledRef.current = true;
    } else {
      setExpanded(shouldInitiallyExpand(level, value, field));
    }
  }, [shouldInitiallyExpand]);
  var expandIcon = expanded ? expandedIcon : collapsedIcon;
  var childLevel = level + 1;
  var lastIndex = data.length - 1;

  var onKeyDown = function onKeyDown(e) {
    if (e.key === ' ') {
      toggleExpanded();
    }
  };

  return createElement("div", {
    className: style.basicChildStyle,
    role: 'list'
  }, createElement("span", {
    className: combineStyles(style.expander, style.pointer),
    role: 'button',
    onClick: toggleExpanded,
    onKeyDown: onKeyDown,
    tabIndex: 0
  }, expandIcon), field && createElement("span", {
    className: style.label
  }, field, ":"), createElement("span", {
    className: style.punctuation
  }, openBracket), expanded ? createElement("div", null, data.map(function (dataElement, index) {
    return createElement(DataRender, {
      key: dataElement[0] || index,
      field: dataElement[0],
      value: dataElement[1],
      style: style,
      lastElement: index === lastIndex,
      level: childLevel,
      shouldInitiallyExpand: shouldInitiallyExpand
    });
  })) : createElement("span", {
    className: combineStyles(style.punctuation, style.pointer),
    role: 'button',
    tabIndex: 0,
    onClick: toggleExpanded,
    onKeyDown: onKeyDown
  }, "..."), createElement("span", {
    className: style.punctuation
  }, closeBracket), !lastElement && createElement("span", {
    className: style.punctuation
  }, ","));
}

function JsonObject(_ref2) {
  var field = _ref2.field,
      value = _ref2.value,
      style = _ref2.style,
      lastElement = _ref2.lastElement,
      shouldInitiallyExpand = _ref2.shouldInitiallyExpand,
      level = _ref2.level;
  return renderExpandableObject({
    field: field,
    value: value,
    lastElement: lastElement || false,
    level: level,
    openBracket: '{',
    closeBracket: '}',
    style: style,
    shouldInitiallyExpand: shouldInitiallyExpand,
    data: Object.keys(value).map(function (key) {
      return [key, value[key]];
    })
  });
}

function JsonArray(_ref3) {
  var field = _ref3.field,
      value = _ref3.value,
      style = _ref3.style,
      lastElement = _ref3.lastElement,
      level = _ref3.level,
      shouldInitiallyExpand = _ref3.shouldInitiallyExpand;
  return renderExpandableObject({
    field: field,
    value: value,
    lastElement: lastElement || false,
    level: level,
    openBracket: '[',
    closeBracket: ']',
    style: style,
    shouldInitiallyExpand: shouldInitiallyExpand,
    data: value.map(function (element) {
      return [undefined, element];
    })
  });
}

function JsonPrimitiveValue(_ref4) {
  var field = _ref4.field,
      value = _ref4.value,
      style = _ref4.style,
      lastElement = _ref4.lastElement;
  var stringValue = value;
  var valueStyle = style.otherValue;

  if (value === null) {
    stringValue = 'null';
    valueStyle = style.nullValue;
  } else if (value === undefined) {
    stringValue = 'undefined';
    valueStyle = style.undefinedValue;
  } else if (isString(value)) {
    stringValue = "\"" + value + "\"";
    valueStyle = style.stringValue;
  } else if (isBoolean(value)) {
    stringValue = value ? 'true' : 'false';
    valueStyle = style.booleanValue;
  } else if (isNumber(value)) {
    stringValue = value.toString();
    valueStyle = style.numberValue;
  } else {
    stringValue = value.toString();
  }

  return createElement("div", {
    className: style.basicChildStyle,
    role: 'listitem'
  }, field && createElement("span", {
    className: style.label
  }, field, ":"), createElement("span", {
    className: valueStyle
  }, stringValue), !lastElement && createElement("span", {
    className: style.label
  }, ","));
}

function DataRender(props) {
  var value = props.value;

  if (isArray(value)) {
    return createElement(JsonArray, Object.assign({}, props));
  }

  if (isObject(value)) {
    return createElement(JsonObject, Object.assign({}, props));
  }

  return createElement(JsonPrimitiveValue, Object.assign({}, props));
}

var styles = {"container-base":"_GzYRV","punctuation-base":"_3eOF8","expander-base":"_f10Tu","pointer":"_1MFti","container-light":"_2IvMF _GzYRV","expander-light":"_16FAf _f10Tu","basic-element-style":"_2bkNM","label-light":"_1MGIk","punctuation-light":"_3uHL6 _3eOF8","value-null-light":"_2T6PJ","value-undefined-light":"_1Gho6","value-string-light":"_vGjyY","value-number-light":"_1bQdo","value-boolean-light":"_3zQKs","value-other-light":"_1xvuR","container-dark":"_11RoI _GzYRV","expander-dark":"_3cpys _f10Tu","label-dark":"_2bSDX","punctuation-dark":"_gsbQL _3eOF8","value-null-dark":"_LaAZe","value-undefined-dark":"_GTKgm","value-string-dark":"_Chy1W","value-number-dark":"_2bveF","value-boolean-dark":"_2vRm-","value-other-dark":"_1prJR"};

var defaultStyles = {
  container: styles['container-light'],
  basicChildStyle: styles['basic-element-style'],
  label: styles['label-light'],
  nullValue: styles['value-null-light'],
  undefinedValue: styles['value-undefined-light'],
  stringValue: styles['value-string-light'],
  booleanValue: styles['value-boolean-light'],
  numberValue: styles['value-number-light'],
  otherValue: styles['value-other-light'],
  expander: styles['expander-light'],
  punctuation: styles['punctuation-light'],
  pointer: styles.pointer
};
var darkStyles = {
  container: styles['container-dark'],
  basicChildStyle: styles['basic-element-style'],
  label: styles['label-dark'],
  nullValue: styles['value-null-dark'],
  undefinedValue: styles['value-undefined-dark'],
  stringValue: styles['value-string-dark'],
  booleanValue: styles['value-boolean-dark'],
  numberValue: styles['value-number-dark'],
  otherValue: styles['value-other-dark'],
  expander: styles['expander-dark'],
  punctuation: styles['punctuation-dark'],
  pointer: styles.pointer
};
var allExpanded = function allExpanded() {
  return true;
};
var collapseAllNested = function collapseAllNested(level) {
  return level < 1;
};
var JsonView = function JsonView(_ref) {
  var data = _ref.data,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? defaultStyles : _ref$style,
      _ref$shouldInitiallyE = _ref.shouldInitiallyExpand,
      shouldInitiallyExpand = _ref$shouldInitiallyE === void 0 ? allExpanded : _ref$shouldInitiallyE;
  return createElement("div", {
    className: style.container
  }, createElement(DataRender, {
    value: data,
    style: style,
    lastElement: true,
    level: 0,
    shouldInitiallyExpand: shouldInitiallyExpand
  }));
};

export { JsonView, allExpanded, collapseAllNested, darkStyles, defaultStyles };
//# sourceMappingURL=index.modern.js.map
