import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import TransportWebHID from '@ledgerhq/hw-transport-webhid';
import { errors, CommonLedgerError } from '../errors';
const {
  TransportNotSupportedError,
  LedgerReplugError,
  LedgerDisconnectedError
} = errors;
export default class WebHIDTransportWrapper {
  constructor() {
    var _this = this;

    _defineProperty(this, "type", 'WEB_HID');

    _defineProperty(this, "initted", false);

    _defineProperty(this, "_transport", null);

    _defineProperty(this, "checkSupport", /*#__PURE__*/_asyncToGenerator(function* () {
      const isSupported = yield TransportWebHID.isSupported();
      if (!isSupported) throw new TransportNotSupportedError();
    }));

    _defineProperty(this, "disconnect", /*#__PURE__*/_asyncToGenerator(function* () {
      try {
        if (_this._transport) yield _this._transport.close();
      } catch (_unused) {
        throw new LedgerReplugError({
          message: 'Error closing transport.'
        });
      }
    }));

    _defineProperty(this, "connect", /*#__PURE__*/_asyncToGenerator(function* () {
      if (!_this.initted) {
        yield _this.checkSupport();
        _this.initted = true;
      }

      yield _this.disconnect();

      try {
        _this._transport = yield TransportWebHID.create();
      } catch (err) {
        if (err instanceof Error) {
          throw CommonLedgerError(err);
        } else {
          throw new LedgerReplugError();
        }
      }
    }));
  }

  get transport() {
    if (!this._transport) throw new LedgerDisconnectedError();
    return this._transport;
  }

}
//# sourceMappingURL=index.js.map