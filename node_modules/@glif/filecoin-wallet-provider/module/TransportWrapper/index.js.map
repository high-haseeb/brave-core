{"version":3,"sources":["../../src/TransportWrapper/index.ts"],"names":["TransportWebHID","errors","CommonLedgerError","TransportNotSupportedError","LedgerReplugError","LedgerDisconnectedError","WebHIDTransportWrapper","isSupported","_transport","close","message","initted","checkSupport","disconnect","create","err","Error","transport"],"mappings":";;AACA,OAAOA,eAAP,MAA4B,+BAA5B;AAEA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,WAA1C;AAEA,MAAM;AACJC,EAAAA,0BADI;AAEJC,EAAAA,iBAFI;AAGJC,EAAAA;AAHI,IAIFJ,MAJJ;AAQA,eAAe,MAAMK,sBAAN,CAA6B;AAAA;AAAA;;AAAA,kCACpB,SADoB;;AAAA,qCAEvB,KAFuB;;AAAA,wCAIH,IAJG;;AAAA,yEAW3B,aAA2B;AACxC,YAAMC,WAAW,SAASP,eAAe,CAACO,WAAhB,EAA1B;AACA,UAAI,CAACA,WAAL,EAAkB,MAAM,IAAIJ,0BAAJ,EAAN;AACnB,KAdyC;;AAAA,uEAgB7B,aAA2B;AACtC,UAAI;AACF,YAAI,KAAI,CAACK,UAAT,EAAqB,MAAM,KAAI,CAACA,UAAL,CAAgBC,KAAhB,EAAN;AACtB,OAFD,CAEE,gBAAM;AACN,cAAM,IAAIL,iBAAJ,CAAsB;AAAEM,UAAAA,OAAO,EAAE;AAAX,SAAtB,CAAN;AACD;AACF,KAtByC;;AAAA,oEAwBhC,aAA2B;AACnC,UAAI,CAAC,KAAI,CAACC,OAAV,EAAmB;AACjB,cAAM,KAAI,CAACC,YAAL,EAAN;AACA,QAAA,KAAI,CAACD,OAAL,GAAe,IAAf;AACD;;AAED,YAAM,KAAI,CAACE,UAAL,EAAN;;AAEA,UAAI;AACF,QAAA,KAAI,CAACL,UAAL,SAAwBR,eAAe,CAACc,MAAhB,EAAxB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,YAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACxB,gBAAMd,iBAAiB,CAACa,GAAD,CAAvB;AACD,SAFD,MAEO;AACL,gBAAM,IAAIX,iBAAJ,EAAN;AACD;AACF;AACF,KAzCyC;AAAA;;AAM7B,MAATa,SAAS,GAAc;AACzB,QAAI,CAAC,KAAKT,UAAV,EAAsB,MAAM,IAAIH,uBAAJ,EAAN;AACtB,WAAO,KAAKG,UAAZ;AACD;;AATyC","sourcesContent":["import Transport from '@ledgerhq/hw-transport'\nimport TransportWebHID from '@ledgerhq/hw-transport-webhid'\n\nimport { errors, CommonLedgerError } from '../errors'\n\nconst {\n  TransportNotSupportedError,\n  LedgerReplugError,\n  LedgerDisconnectedError,\n} = errors\n\ntype TransportType = 'WEB_HID' | 'WEB_USB'\n\nexport default class WebHIDTransportWrapper {\n  type: TransportType = 'WEB_HID'\n  initted: boolean = false\n\n  private _transport: Transport | null = null\n\n  get transport(): Transport {\n    if (!this._transport) throw new LedgerDisconnectedError()\n    return this._transport\n  }\n\n  checkSupport = async (): Promise<void> => {\n    const isSupported = await TransportWebHID.isSupported()\n    if (!isSupported) throw new TransportNotSupportedError()\n  }\n\n  disconnect = async (): Promise<void> => {\n    try {\n      if (this._transport) await this._transport.close()\n    } catch {\n      throw new LedgerReplugError({ message: 'Error closing transport.' })\n    }\n  }\n\n  connect = async (): Promise<void> => {\n    if (!this.initted) {\n      await this.checkSupport()\n      this.initted = true\n    }\n\n    await this.disconnect()\n\n    try {\n      this._transport = await TransportWebHID.create()\n    } catch (err) {\n      if (err instanceof Error) {\n        throw CommonLedgerError(err)\n      } else {\n        throw new LedgerReplugError()\n      }\n    }\n  }\n}\n"],"file":"index.js"}