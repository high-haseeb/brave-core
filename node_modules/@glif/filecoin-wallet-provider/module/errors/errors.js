import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/* tslint:disable max-classes-per-file */
class WalletProviderError extends Error {
  constructor(args) {
    super(args.message);

    _defineProperty(this, "code", void 0);

    Object.setPrototypeOf(this, WalletProviderError.prototype);
    if (args.code) this.code = args.code;
  }

  toJSON() {
    const res = {
      message: this.message
    };
    if (this.code) res.code = this.code;
    return res;
  }

}

class LedgerLostConnectionError extends WalletProviderError {
  constructor(_ref = {}) {
    let args = _extends({}, _ref);

    super(_objectSpread({
      message: args.message || 'connection lost'
    }, args));
    Object.setPrototypeOf(this, LedgerLostConnectionError.prototype);
  }

}

class TransportNotSupportedError extends WalletProviderError {
  constructor(_ref2 = {}) {
    let args = _extends({}, _ref2);

    super(_objectSpread({
      message: args.message || 'transport not supported by device'
    }, args));
    Object.setPrototypeOf(this, TransportNotSupportedError.prototype);
  }

}

class LedgerReplugError extends WalletProviderError {
  constructor(_ref3 = {}) {
    let args = _extends({}, _ref3);

    super(_objectSpread({
      message: args.message || 'unknown'
    }, args));
    Object.setPrototypeOf(this, LedgerReplugError.prototype);
  }

}

class LedgerDisconnectedError extends WalletProviderError {
  constructor(_ref4 = {}) {
    let args = _extends({}, _ref4);

    super(_objectSpread({
      message: args.message || 'ledger device disconnected'
    }, args));
    Object.setPrototypeOf(this, LedgerDisconnectedError.prototype);
  }

}

class LedgerInUseByAnotherApp extends WalletProviderError {
  constructor(_ref5 = {}) {
    let args = _extends({}, _ref5);

    super(_objectSpread({
      message: args.message || 'ledger device in use by another app'
    }, args));
    Object.setPrototypeOf(this, LedgerInUseByAnotherApp.prototype);
  }

}

class LedgerNotFoundError extends WalletProviderError {
  constructor(_ref6 = {}) {
    let args = _extends({}, _ref6);

    super(_objectSpread({
      message: args.message || 'ledger device not found'
    }, args));
    Object.setPrototypeOf(this, LedgerNotFoundError.prototype);
  }

}

class LedgerDeviceLockedError extends WalletProviderError {
  constructor(_ref7 = {}) {
    let args = _extends({}, _ref7);

    super(_objectSpread({
      message: args.message || 'ledger device locked'
    }, args));
    Object.setPrototypeOf(this, LedgerDeviceLockedError.prototype);
  }

}

class LedgerFilecoinAppBadVersionError extends WalletProviderError {
  constructor(_ref8 = {}) {
    let args = _extends({}, _ref8);

    super(_objectSpread({
      message: args.message || 'bad filecoin app version on ledger device'
    }, args));
    Object.setPrototypeOf(this, LedgerFilecoinAppBadVersionError.prototype);
  }

}

class LedgerFilecoinAppNotOpenError extends WalletProviderError {
  constructor(_ref9 = {}) {
    let args = _extends({}, _ref9);

    super(_objectSpread({
      message: args.message || 'filecoin app not open on device'
    }, args));
    Object.setPrototypeOf(this, LedgerFilecoinAppNotOpenError.prototype);
  }

}

class LedgerDeviceBusyError extends WalletProviderError {
  constructor(_ref10 = {}) {
    let args = _extends({}, _ref10);

    super(_objectSpread({
      message: args.message || 'ledger device locked or busy'
    }, args));
    Object.setPrototypeOf(this, LedgerDeviceBusyError.prototype);
  }

}

class InvalidParamsError extends WalletProviderError {
  constructor(_ref11 = {}) {
    let args = _extends({}, _ref11);

    super(_objectSpread({
      message: args.message || 'invalid params'
    }, args));
    Object.setPrototypeOf(this, InvalidParamsError.prototype);
  }

}

class UnsupportedKeyTypeError extends WalletProviderError {
  constructor(_ref12 = {}) {
    let args = _extends({}, _ref12);

    super(_objectSpread({
      message: args.message || 'unsupported key type'
    }, args));
    Object.setPrototypeOf(this, UnsupportedKeyTypeError.prototype);
  }

}

class TransactionRejectedError extends WalletProviderError {
  constructor(_ref13 = {}) {
    let args = _extends({}, _ref13);

    super(_objectSpread({
      message: args.message || 'Transaction rejected'
    }, args));
    Object.setPrototypeOf(this, TransactionRejectedError.prototype);
  }

}

class MetaMaskError extends WalletProviderError {
  constructor(_ref14 = {}) {
    let args = _extends({}, _ref14);

    super(_objectSpread({
      message: args.message || 'MetaMask error'
    }, args));
    Object.setPrototypeOf(this, MetaMaskError.prototype);
  }

}

class MetaMaskNotInstalledError extends WalletProviderError {
  constructor(_ref15 = {}) {
    let args = _extends({}, _ref15);

    super(_objectSpread({
      message: args.message || 'MetaMask not installed'
    }, args));
    Object.setPrototypeOf(this, MetaMaskNotInstalledError.prototype);
  }

}

class MetaMaskSnapsNotSupportedError extends WalletProviderError {
  constructor(_ref16 = {}) {
    let args = _extends({}, _ref16);

    super(_objectSpread({
      message: args.message || 'The installed version of MetaMask does not support Snaps'
    }, args));
    Object.setPrototypeOf(this, MetaMaskSnapsNotSupportedError.prototype);
  }

}

class MetaMaskLockedError extends WalletProviderError {
  constructor(_ref17 = {}) {
    let args = _extends({}, _ref17);

    super(_objectSpread({
      message: args.message || 'MetaMask locked'
    }, args));
    Object.setPrototypeOf(this, MetaMaskLockedError.prototype);
  }

}

class MetaMaskFilSnapNotInstalledError extends WalletProviderError {
  constructor(_ref18 = {}) {
    let args = _extends({}, _ref18);

    super(_objectSpread({
      message: args.message || 'FILSnap not installed'
    }, args));
    Object.setPrototypeOf(this, MetaMaskFilSnapNotInstalledError.prototype);
  }

}

export default {
  InvalidParamsError,
  LedgerLostConnectionError,
  LedgerReplugError,
  LedgerDisconnectedError,
  LedgerInUseByAnotherApp,
  LedgerNotFoundError,
  LedgerDeviceLockedError,
  LedgerFilecoinAppBadVersionError,
  LedgerFilecoinAppNotOpenError,
  LedgerDeviceBusyError,
  MetaMaskError,
  MetaMaskNotInstalledError,
  MetaMaskSnapsNotSupportedError,
  MetaMaskLockedError,
  MetaMaskFilSnapNotInstalledError,
  TransactionRejectedError,
  TransportNotSupportedError,
  UnsupportedKeyTypeError,
  WalletProviderError
};
//# sourceMappingURL=errors.js.map