{"version":3,"sources":["../src/filecoin.ts"],"names":["LotusRpcEngine","FilecoinNumber","checkAddressString","Message","computeGasToBurn","KNOWN_TYPE_0_ADDRESS","KNOWN_TYPE_1_ADDRESS","KNOWN_TYPE_3_ADDRESS","allCallsExitWithCode0","BigNumber","Filecoin","constructor","provider","config","apiAddress","address","balance","jsonRpcEngine","request","message","res","signedLotusMessage","Error","Signature","nonce","Number","err","toLowerCase","includes","clonedMsg","Object","assign","From","coinType","cloneMsgWOnChainFromAddr","feeCap","gasLimit","numBlocksIncluded","gasPremium","GasLimit","maxFee","toAttoFil","To","Value","GasPremium","GasFeeCap","Method","Nonce","Params","MaxFee","toAddressWithCorrectPrefix","slice","to","from","value","gasFeeCap","method","params","msgWithGas","gasEstimateMessageGas","toLotusType","limit","times","baseFee","gasUsed","gasFeeCapBN","gasPremiumBN","gasLimitBN","baseFeeBN","gasUsedBN","gasToBurn","totalGas","plus","minBaseFeeFeeCap","minimum","leftSide","minTip","minus","rightSide","maximum","minGasFeeCap","minGasPremium","minGasLimit","getReplaceMessageMinGasParams","copiedMessage","recommendedMessage","takeMin","isLessThan","toString","newPremiumBn","EPSILON","integerValue","ROUND_CEIL","newFeeCap","isGreaterThan","wallet"],"mappings":"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","sourcesContent":["import LotusRpcEngine, { LotusRpcEngineConfig } from '@glif/filecoin-rpc-client'\nimport { FilecoinNumber } from '@glif/filecoin-number'\nimport { checkAddressString, CoinType } from '@glif/filecoin-address'\nimport {\n  LotusMessage,\n  Message,\n  SignedLotusMessage,\n} from '@glif/filecoin-message'\nimport {\n  computeGasToBurn,\n  KNOWN_TYPE_0_ADDRESS,\n  KNOWN_TYPE_1_ADDRESS,\n  KNOWN_TYPE_3_ADDRESS,\n  allCallsExitWithCode0,\n} from './utils'\nimport { BigNumber } from 'bignumber.js'\nimport { WalletSubProvider } from './wallet-sub-provider'\nimport { InvocResult, CID } from './types'\n\nexport class Filecoin {\n  public wallet: WalletSubProvider\n  public jsonRpcEngine: LotusRpcEngine\n\n  constructor(\n    provider: WalletSubProvider,\n    config: LotusRpcEngineConfig = {\n      apiAddress: 'http://127.0.0.1:1234/rpc/v0',\n    },\n  ) {\n    if (!provider) throw new Error('No provider provided.')\n    this.wallet = provider\n    this.jsonRpcEngine = new LotusRpcEngine(config)\n  }\n\n  getBalance = async (address: string): Promise<FilecoinNumber> => {\n    checkAddressString(address)\n    const balance = await this.jsonRpcEngine.request<string>(\n      'WalletBalance',\n      address,\n    )\n    return new FilecoinNumber(balance, 'attofil')\n  }\n\n  simulateMessage = async (message: LotusMessage): Promise<boolean> => {\n    const res = await this.jsonRpcEngine.request<InvocResult>(\n      'StateCall',\n      message,\n      null,\n    )\n    return allCallsExitWithCode0(res)\n  }\n\n  sendMessage = async (\n    signedLotusMessage: SignedLotusMessage,\n  ): Promise<CID> => {\n    if (!signedLotusMessage.Message) throw new Error('No message provided.')\n    if (!signedLotusMessage.Signature) throw new Error('No signature provided.')\n\n    return this.jsonRpcEngine.request<{ '/': string }>(\n      'MpoolPush',\n      signedLotusMessage,\n    )\n  }\n\n  getNonce = async (address: string): Promise<number> => {\n    if (!address) throw new Error('No address provided.')\n    checkAddressString(address)\n    try {\n      const nonce = Number(\n        await this.jsonRpcEngine.request('MpoolGetNonce', address),\n      )\n      return nonce\n    } catch (err) {\n      if (err instanceof Error) {\n        if (err?.message.toLowerCase().includes('actor not found')) {\n          return 0\n        }\n\n        throw new Error(err.message)\n      }\n      throw new Error('An unknown error occured when fetching the nonce.')\n    }\n  }\n\n  cloneMsgWOnChainFromAddr = async (\n    message: LotusMessage,\n  ): Promise<LotusMessage> => {\n    const clonedMsg = Object.assign({}, message)\n    try {\n      // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure\n      await this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null)\n    } catch (err) {\n      // if from actor doesnt exist, use a hardcoded known actor address\n      if (\n        err instanceof Error &&\n        err.message.toLowerCase().includes('actor not found')\n      ) {\n        const coinType = clonedMsg.From[0] as CoinType\n\n        if (!clonedMsg.From) clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        if (clonedMsg.From[1] === '0')\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        else if (clonedMsg.From[1] === '1')\n          clonedMsg.From = KNOWN_TYPE_1_ADDRESS[coinType]\n        else if (clonedMsg.From[1] === '3')\n          clonedMsg.From = KNOWN_TYPE_3_ADDRESS[coinType]\n        else {\n          // this should never happen, only t1 and t3 addresses can be used as a from?\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        }\n      }\n    }\n    return clonedMsg\n  }\n\n  gasEstimateFeeCap = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const feeCap = await this.jsonRpcEngine.request<string>(\n      'GasEstimateFeeCap',\n      clonedMsg,\n      0,\n      null,\n    )\n\n    return new FilecoinNumber(feeCap, 'attofil')\n  }\n\n  gasEstimateGasLimit = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasLimit = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasLimit',\n      clonedMsg,\n      null,\n    )\n\n    return new FilecoinNumber(gasLimit, 'attofil')\n  }\n\n  gasEstimateGasPremium = async (\n    message: LotusMessage,\n    numBlocksIncluded: number = 0,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasPremium = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasPremium',\n      numBlocksIncluded,\n      clonedMsg.From,\n      clonedMsg.GasLimit || 0,\n      null,\n    )\n\n    return new FilecoinNumber(gasPremium, 'attofil')\n  }\n\n  gasEstimateMessageGas = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<Message> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const {\n      To,\n      Value,\n      GasPremium,\n      GasFeeCap,\n      GasLimit,\n      Method,\n      Nonce,\n      Params,\n    } = await this.jsonRpcEngine.request(\n      'GasEstimateMessageGas',\n      clonedMsg,\n      { MaxFee: maxFee },\n      null,\n    )\n\n    // this is a hack to get by weird UI bugs where f addresses convert to t addresses\n    const toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1)\n    return new Message({\n      to: toAddressWithCorrectPrefix,\n      from: message.From,\n      value: Value,\n      gasPremium: GasPremium,\n      gasFeeCap: GasFeeCap,\n      gasLimit: GasLimit,\n      method: Method,\n      nonce: Nonce,\n      params: Params,\n    })\n  }\n\n  gasEstimateMaxFee = async (\n    message: LotusMessage,\n  ): Promise<{ maxFee: FilecoinNumber; message: LotusMessage }> => {\n    const msgWithGas = (await this.gasEstimateMessageGas(message)).toLotusType()\n    const feeCap = new BigNumber(msgWithGas.GasFeeCap)\n    const limit = new BigNumber(msgWithGas.GasLimit)\n    return {\n      maxFee: new FilecoinNumber(feeCap.times(limit), 'attofil'),\n      message: msgWithGas,\n    }\n  }\n\n  /**\n   * formula (some of these variable names might not be the best...):\n   * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))\n   *\n   * minBaseFeeFeeCap = min(BaseFee, FeeCap)\n   * totalGas = GasUsed+GasToBurn\n   * leftSide = totalGas*minBaseFeeFeeCap\n   *\n   * minTip = min(FeeCap-BaseFee, GasPremium)\n   * rightSide = gasLimit*max(0, minTip)\n   *\n   * paidByMessageSender =\n   * leftSide + rightSide\n   */\n  gasCalcTxFee = async (\n    gasFeeCap: string,\n    gasPremium: string,\n    gasLimit: number,\n    baseFee: string,\n    gasUsed: string,\n  ): Promise<FilecoinNumber> => {\n    const gasFeeCapBN = new BigNumber(gasFeeCap)\n    const gasPremiumBN = new BigNumber(gasPremium)\n    const gasLimitBN = new BigNumber(gasLimit)\n    const baseFeeBN = new BigNumber(baseFee)\n    const gasUsedBN = new BigNumber(gasUsed)\n\n    /* compute left side */\n    const gasToBurn = computeGasToBurn(gasUsedBN, gasLimitBN)\n    const totalGas = gasUsedBN.plus(gasToBurn)\n    const minBaseFeeFeeCap = BigNumber.minimum(baseFeeBN, gasFeeCapBN)\n    const leftSide = totalGas.times(minBaseFeeFeeCap)\n\n    /* compute right side */\n    const minTip = BigNumber.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN)\n    const rightSide = gasLimitBN.times(BigNumber.maximum(0, minTip))\n\n    return new FilecoinNumber(leftSide.plus(rightSide), 'attofil')\n  }\n\n  /*\n   * Used for calculating gas params of replaced messages\n   * To get the params - we compare the minimum bump in gas (gas premium * 1.25)\n   * against the recommended gas params (taken from gasEstimateMessageGas, maxFee = .1)\n   *\n   * If any of the 3 gas params in the recommended gas amounts are LESS\n   * than the params calculated in the minimum bump in gas, take the minimum bump in gas\n   *\n   */\n\n  getReplaceMessageGasParams = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n\n    const {\n      gasFeeCap: minGasFeeCap,\n      gasPremium: minGasPremium,\n      gasLimit: minGasLimit\n    } = await this.getReplaceMessageMinGasParams(message)\n\n    const copiedMessage = {\n      ...message,\n      GasFeeCap: '0',\n      GasPremium: '0',\n      GasLimit: 0\n    }\n\n    const recommendedMessage = await this.gasEstimateMessageGas(copiedMessage, maxFee)\n\n    const takeMin =\n      recommendedMessage.gasFeeCap.isLessThan(minGasFeeCap) ||\n      recommendedMessage.gasPremium.isLessThan(minGasPremium) ||\n      recommendedMessage.gasLimit < minGasLimit\n\n    return {\n      gasFeeCap: takeMin ? minGasFeeCap : recommendedMessage.gasFeeCap.toString(),\n      gasPremium: takeMin ? minGasPremium : recommendedMessage.gasPremium.toString(),\n      gasLimit: takeMin ? minGasLimit : recommendedMessage.gasLimit\n    }\n  }\n\n  /**\n   * Used for calculating the minimum boost in gas params to replace a message\n   *  (1.25x prev gasPremium, bump fee cap as needed)\n   */\n  getReplaceMessageMinGasParams = async (\n    message: LotusMessage,\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n\n    // Sometimes the replaced message still got rejected because Lotus expected\n    // a gas premium of 1 higher than what we calculated as the new minimum. In\n    // order to resolve this, we add Epsilon (the smallest possible number) before\n    // rounding up. This causes whole numbers that result from the multiplication\n    // to be rounded up to the next whole number. (e.g. 100 * 1.25 = 125 -> 126)\n    const newPremiumBn = new BigNumber(message.GasPremium)\n      .times(1.25)\n      .plus(Number.EPSILON)\n      .integerValue(BigNumber.ROUND_CEIL)\n\n    const newFeeCap = newPremiumBn.isGreaterThan(message.GasFeeCap)\n      ? newPremiumBn.toString()\n      : message.GasFeeCap\n\n    return {\n      gasFeeCap: newFeeCap,\n      gasPremium: newPremiumBn.toString(),\n      gasLimit: message.GasLimit,\n    }\n  }\n}\n"],"file":"filecoin.js"}