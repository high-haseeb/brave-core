{"version":3,"sources":["../../../src/providers/hd-wallet-provider/index.ts"],"names":["CoinType","Message","signingTools","createPath","coinTypeCode","validIndexes","errors","InvalidParamsError","WalletProviderError","HDWalletProvider","constructor","seed","nStart","nEnd","coinType","MAIN","message","TEST","accounts","i","path","account","keyDerive","address","push","accountToPath","from","From","msg","fromLotusType","err","Error","undefined","private_hexstring","signature","transactionSign","toZondaxType","Buffer","toString","Signature","Type","type","Data","data"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SACEC,OADF,QAIO,wBAJP;AAKA,OAAOC,YAAP,MAAyB,mCAAzB;AAGA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,YAAnC,QAAuD,aAAvD;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAM;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,IAA8CF,MAApD;;;;AAEA,OAAO,MAAMG,gBAAN,CAAoD;AAIzDC,EAAAA,WAAW,CAACC,IAAD,EAAe;AAAA;;AAAA,kCAHA,WAGA;;AAAA,2CAFsB,EAEtB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAKZ,WACZC,MAAM,GAAG,CADG,EAEZC,IAAI,GAAG,CAFK,EAGZC,QAAQ,GAAGd,QAAQ,CAACe,IAHR,EAIU;AACtB,YAAI,CAACV,YAAY,CAACO,MAAD,EAASC,IAAT,CAAjB,EAAiC;AAC/B,gBAAM,IAAIN,kBAAJ,CAAuB;AAC3BS,YAAAA,OAAO,EAAE;AADkB,WAAvB,CAAN;AAGD;;AAED,YAAIF,QAAQ,KAAKd,QAAQ,CAACe,IAAtB,IAA8BD,QAAQ,KAAKd,QAAQ,CAACiB,IAAxD,EAA8D;AAC5D,gBAAM,IAAIV,kBAAJ,CAAuB;AAC3BS,YAAAA,OAAO,EAAE;AADkB,WAAvB,CAAN;AAGD;;AAED,cAAME,QAAQ,GAAG,EAAjB;;AACA,aAAK,IAAIC,CAAC,GAAGP,MAAb,EAAqBO,CAAC,GAAGN,IAAzB,EAA+BM,CAAC,IAAI,CAApC,EAAuC;AACrC,gBAAMC,IAAI,GAAGjB,UAAU,CAACC,YAAY,CAACU,QAAD,CAAb,EAAyBK,CAAzB,CAAvB;AACA,gBAAME,OAAO,GAAGnB,YAAY,CAACoB,SAAb,uBAAuB,KAAvB,UAAmCF,IAAnC,EAAyC,EAAzC,EAA6CG,OAA7D;AACAL,UAAAA,QAAQ,CAACM,IAAT,CAAcH,OAAd;AACA,UAAA,KAAI,CAACI,aAAL,CAAmBJ,OAAnB,IAA8BD,IAA9B;AACD;;AACD,eAAOF,QAAP;AACD,OA9ByB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,oCAgCnB,WACLQ,IADK,EAELV,OAFK,EAG2B;AAChC,YAAIU,IAAI,KAAKV,OAAO,CAACW,IAArB,EAA2B;AACzB,gBAAM,IAAIpB,kBAAJ,CAAuB;AAAES,YAAAA,OAAO,EAAE;AAAX,WAAvB,CAAN;AACD;;AACD,cAAMI,IAAI,GAAG,KAAI,CAACK,aAAL,CAAmBC,IAAnB,CAAb;;AACA,YAAI,CAACN,IAAL,EAAW;AACT,gBAAM,IAAIZ,mBAAJ,CAAwB;AAC5BQ,YAAAA,OAAO,EAAE;AADmB,WAAxB,CAAN;AAGD;;AACD,YAAIY,GAAJ;;AACA,YAAI;AACFA,UAAAA,GAAG,GAAG3B,OAAO,CAAC4B,aAAR,CAAsBb,OAAtB,CAAN;AACD,SAFD,CAEE,OAAOc,GAAP,EAAY;AACZ,gBAAM,IAAIvB,kBAAJ,CACJuB,GAAG,YAAYC,KAAf,GACI;AACEf,YAAAA,OAAO,EAAG,+CAA8Cc,GAAG,CAACd,OAAQ;AADtE,WADJ,GAIIgB,SALA,CAAN;AAOD;;AAED,cAAM;AAAEC,UAAAA;AAAF,YAAwB/B,YAAY,CAACoB,SAAb,uBAAuB,KAAvB,UAAmCF,IAAnC,EAAyC,EAAzC,CAA9B;AACA,cAAM;AAAEc,UAAAA;AAAF,YAAgBhC,YAAY,CAACiC,eAAb,CACpBP,GAAG,CAACQ,YAAJ,EADoB,EAEpBC,MAAM,CAACX,IAAP,CAAYO,iBAAZ,EAA+B,KAA/B,EAAsCK,QAAtC,CAA+C,QAA/C,CAFoB,CAAtB;AAKA,eAAO;AACLrC,UAAAA,OAAO,EAAEe,OADJ;AAELuB,UAAAA,SAAS,EAAE;AACTC,YAAAA,IAAI,EAAEN,SAAS,CAACO,IADP;AAETC,YAAAA,IAAI,EAAER,SAAS,CAACS;AAFP;AAFN,SAAP;AAOD,OAvEyB;;AAAA;AAAA;AAAA;AAAA;;AACxB,QAAI,CAAChC,IAAL,EAAW,MAAM,IAAIJ,kBAAJ,EAAN;;AACX,uCAAaI,IAAb;AACD;;AAPwD","sourcesContent":["import { CoinType } from '@glif/filecoin-address'\nimport {\n  Message,\n  SignedLotusMessage,\n  LotusMessage,\n} from '@glif/filecoin-message'\nimport signingTools from '@zondax/filecoin-signing-tools/js'\nimport { WalletType } from '../../types'\nimport { WalletSubProvider } from '../../wallet-sub-provider'\nimport { createPath, coinTypeCode, validIndexes } from '../../utils'\nimport { errors } from '../../errors'\n\nconst { InvalidParamsError, WalletProviderError } = errors\n\nexport class HDWalletProvider implements WalletSubProvider {\n  public type: WalletType = 'HD_WALLET'\n  private accountToPath: Record<string, string> = {}\n  #seed: string\n  constructor(seed: string) {\n    if (!seed) throw new InvalidParamsError()\n    this.#seed = seed\n  }\n\n  getAccounts = async (\n    nStart = 0,\n    nEnd = 5,\n    coinType = CoinType.MAIN,\n  ): Promise<string[]> => {\n    if (!validIndexes(nStart, nEnd)) {\n      throw new InvalidParamsError({\n        message: 'Invalid indexes provided to getAccounts',\n      })\n    }\n\n    if (coinType !== CoinType.MAIN && coinType !== CoinType.TEST) {\n      throw new InvalidParamsError({\n        message: 'Invalid coinType passed to getAccounts',\n      })\n    }\n\n    const accounts = []\n    for (let i = nStart; i < nEnd; i += 1) {\n      const path = createPath(coinTypeCode(coinType), i)\n      const account = signingTools.keyDerive(this.#seed, path, '').address\n      accounts.push(account)\n      this.accountToPath[account] = path\n    }\n    return accounts\n  }\n\n  sign = async (\n    from: string,\n    message: LotusMessage,\n  ): Promise<SignedLotusMessage> => {\n    if (from !== message.From) {\n      throw new InvalidParamsError({ message: 'From address mismatch' })\n    }\n    const path = this.accountToPath[from]\n    if (!path) {\n      throw new WalletProviderError({\n        message: 'Account was not yet derived from this seed phrase',\n      })\n    }\n    let msg\n    try {\n      msg = Message.fromLotusType(message)\n    } catch (err) {\n      throw new InvalidParamsError(\n        err instanceof Error\n          ? {\n              message: `Invalid message params passed to sign call: ${err.message}`,\n            }\n          : undefined,\n      )\n    }\n\n    const { private_hexstring } = signingTools.keyDerive(this.#seed, path, '')\n    const { signature } = signingTools.transactionSign(\n      msg.toZondaxType(),\n      Buffer.from(private_hexstring, 'hex').toString('base64'),\n    ) as { signature: { data: string; type: number } }\n\n    return {\n      Message: message,\n      Signature: {\n        Type: signature.type,\n        Data: signature.data,\n      },\n    }\n  }\n}\n"],"file":"index.js"}