{"version":3,"sources":["../../../src/providers/metamask-provider/index.ts"],"names":["CoinType","Message","mapSeries","errors","coinTypeCode","createPath","validIndexes","extractCoinTypeFromPath","MetaMaskProvider","constructor","snap","nStart","nEnd","coinType","MAIN","InvalidParamsError","message","TEST","paths","i","push","addresses","path","configure","derivationPath","network","account","getAddress","accountToPath","err","MetaMaskError","Error","from","From","WalletProviderError","msg","fromLotusType","undefined","signReq","signMessage","toZondaxType","confirmed","TransactionRejectedError","error","Signature","Data","signedMessage","signature","data","Type","type"],"mappings":"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","sourcesContent":["import { FilecoinSnapApi } from '@chainsafe/filsnap-types'\nimport { CoinType } from '@glif/filecoin-address'\nimport {\n  LotusMessage,\n  Message,\n  SignedLotusMessage,\n  ZondaxMessage,\n} from '@glif/filecoin-message'\nimport { mapSeries } from 'bluebird'\nimport { WalletType } from '../../types'\nimport { errors } from '../../errors'\nimport { WalletSubProvider } from '../../wallet-sub-provider'\nimport {\n  coinTypeCode,\n  createPath,\n  validIndexes,\n  extractCoinTypeFromPath,\n} from '../../utils'\n\nexport class MetaMaskProvider implements WalletSubProvider {\n  public type: WalletType = 'METAMASK'\n  private snap: FilecoinSnapApi\n  private accountToPath: Record<string, string> = {}\n\n  constructor({ snap }: { snap: FilecoinSnapApi }) {\n    if (!snap)\n      throw new errors.InvalidParamsError({\n        message: 'Must pass `snap` to MetaMask provider',\n      })\n    this.snap = snap\n  }\n\n  getAccounts = async (nStart = 0, nEnd = 5, coinType = CoinType.MAIN) => {\n    if (!validIndexes(nStart, nEnd)) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid account indexes passed to getAccounts',\n      })\n    }\n\n    if (coinType !== CoinType.MAIN && coinType !== CoinType.TEST) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid coinType passed to getAccounts',\n      })\n    }\n    try {\n      const paths: string[] = []\n      for (let i = nStart; i < nEnd; i += 1) {\n        paths.push(createPath(coinTypeCode(coinType), i))\n      }\n      const addresses = await mapSeries(paths, async (path: string) => {\n        try {\n          await this.snap.configure({ derivationPath: path, network: coinType })\n          const account = await this.snap.getAddress()\n          this.accountToPath[account] = path\n          return account\n        } catch (err) {\n          throw new errors.MetaMaskError({\n            message:\n              err instanceof Error\n                ? err.message\n                : 'Error getting accounts from MetaMask',\n          })\n        }\n      })\n      return addresses\n    } catch (err) {\n      throw new errors.MetaMaskError({\n        message:\n          err instanceof Error\n            ? err.message\n            : 'Error getting accounts from MetaMask',\n      })\n    }\n  }\n\n  sign = async (\n    from: string,\n    message: LotusMessage,\n  ): Promise<SignedLotusMessage> => {\n    if (from !== message.From) {\n      throw new errors.InvalidParamsError({ message: 'From address mismatch' })\n    }\n    const path = this.accountToPath[from]\n    if (!path) {\n      throw new errors.WalletProviderError({\n        message:\n          'Must call getAccounts with to derive this from address before signing with it',\n      })\n    }\n\n    try {\n      await this.snap.configure({\n        derivationPath: path,\n        network: extractCoinTypeFromPath(path),\n      })\n    } catch (err) {\n      throw new errors.MetaMaskError({\n        message: err instanceof Error ? err.message : 'Error configuring snap',\n      })\n    }\n\n    let msg: Message\n    try {\n      msg = Message.fromLotusType(message)\n    } catch (err) {\n      throw new errors.InvalidParamsError(\n        err instanceof Error\n          ? {\n              message: `Invalid message params passed to sign call: ${err.message}`,\n            }\n          : undefined,\n      )\n    }\n\n    const signReq = await this.snap.signMessage(\n      msg.toZondaxType() as ZondaxMessage & { params: string },\n    )\n\n    if (!signReq)\n      throw new errors.MetaMaskError({ message: 'Error signing transaction' })\n    if (!signReq.confirmed) throw new errors.TransactionRejectedError()\n    if (signReq.error)\n      throw new errors.MetaMaskError({\n        message: signReq.error.message,\n      })\n\n    return {\n      Message: message,\n      Signature: {\n        Data: signReq.signedMessage?.signature?.data,\n        Type: signReq.signedMessage?.signature?.type,\n      },\n    }\n  }\n}\n"],"file":"index.js"}