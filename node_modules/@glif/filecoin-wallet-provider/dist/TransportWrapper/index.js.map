{"version":3,"sources":["../../src/TransportWrapper/index.ts"],"names":["TransportNotSupportedError","errors","LedgerReplugError","LedgerDisconnectedError","WebHIDTransportWrapper","TransportWebHID","isSupported","_transport","close","message","initted","checkSupport","disconnect","create","Error"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AAEA;;IAGEA,0B,GAGEC,c,CAHFD,0B;IACAE,iB,GAEED,c,CAFFC,iB;IACAC,uB,GACEF,c,CADFE,uB;;IAKmBC,sB;;;;;mDACG,S;sDACH,K;yDAEoB,I;sJAOxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACaC,8BAAgBC,WAAhB,EADb;;AAAA;AACPA,cAAAA,WADO;;AAAA,kBAERA,WAFQ;AAAA;AAAA;AAAA;;AAAA,oBAEW,IAAIN,0BAAJ,EAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;oJAKF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,mBAEL,KAAI,CAACO,UAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEkB,KAAI,CAACA,UAAL,CAAgBC,KAAhB,EAFlB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAIH,IAAIN,iBAAJ,CAAsB;AAAEO,gBAAAA,OAAO,EAAE;AAAX,eAAtB,CAJG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;iJAQH;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH,KAAI,CAACC,OADF;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEA,KAAI,CAACC,YAAL,EAFA;;AAAA;AAGN,cAAA,KAAI,CAACD,OAAL,GAAe,IAAf;;AAHM;AAAA;AAAA,qBAMF,KAAI,CAACE,UAAL,EANE;;AAAA;AAAA;AAAA;AAAA,qBASkBP,8BAAgBQ,MAAhB,EATlB;;AAAA;AASN,cAAA,KAAI,CAACN,UATC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAWF,wBAAeO,KAXb;AAAA;AAAA;AAAA;;AAAA,oBAYE,4CAZF;;AAAA;AAAA,oBAcE,IAAIZ,iBAAJ,EAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;wBAlBiB;AACzB,UAAI,CAAC,KAAKK,UAAV,EAAsB,MAAM,IAAIJ,uBAAJ,EAAN;AACtB,aAAO,KAAKI,UAAZ;AACD","sourcesContent":["import Transport from '@ledgerhq/hw-transport'\nimport TransportWebHID from '@ledgerhq/hw-transport-webhid'\n\nimport { errors, CommonLedgerError } from '../errors'\n\nconst {\n  TransportNotSupportedError,\n  LedgerReplugError,\n  LedgerDisconnectedError,\n} = errors\n\ntype TransportType = 'WEB_HID' | 'WEB_USB'\n\nexport default class WebHIDTransportWrapper {\n  type: TransportType = 'WEB_HID'\n  initted: boolean = false\n\n  private _transport: Transport | null = null\n\n  get transport(): Transport {\n    if (!this._transport) throw new LedgerDisconnectedError()\n    return this._transport\n  }\n\n  checkSupport = async (): Promise<void> => {\n    const isSupported = await TransportWebHID.isSupported()\n    if (!isSupported) throw new TransportNotSupportedError()\n  }\n\n  disconnect = async (): Promise<void> => {\n    try {\n      if (this._transport) await this._transport.close()\n    } catch {\n      throw new LedgerReplugError({ message: 'Error closing transport.' })\n    }\n  }\n\n  connect = async (): Promise<void> => {\n    if (!this.initted) {\n      await this.checkSupport()\n      this.initted = true\n    }\n\n    await this.disconnect()\n\n    try {\n      this._transport = await TransportWebHID.create()\n    } catch (err) {\n      if (err instanceof Error) {\n        throw CommonLedgerError(err)\n      } else {\n        throw new LedgerReplugError()\n      }\n    }\n  }\n}\n"],"file":"index.js"}