{"version":3,"sources":["../../../src/providers/hd-wallet-provider/index.ts"],"names":["InvalidParamsError","errors","WalletProviderError","HDWalletProvider","seed","nStart","nEnd","coinType","CoinType","MAIN","message","TEST","accounts","i","path","account","signingTools","keyDerive","address","push","accountToPath","from","From","msg","Message","fromLotusType","Error","undefined","private_hexstring","transactionSign","toZondaxType","Buffer","toString","signature","Signature","Type","type","Data","data"],"mappings":"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","sourcesContent":["import { CoinType } from '@glif/filecoin-address'\nimport {\n  Message,\n  SignedLotusMessage,\n  LotusMessage,\n} from '@glif/filecoin-message'\nimport signingTools from '@zondax/filecoin-signing-tools/js'\nimport { WalletType } from '../../types'\nimport { WalletSubProvider } from '../../wallet-sub-provider'\nimport { createPath, coinTypeCode, validIndexes } from '../../utils'\nimport { errors } from '../../errors'\n\nconst { InvalidParamsError, WalletProviderError } = errors\n\nexport class HDWalletProvider implements WalletSubProvider {\n  public type: WalletType = 'HD_WALLET'\n  private accountToPath: Record<string, string> = {}\n  #seed: string\n  constructor(seed: string) {\n    if (!seed) throw new InvalidParamsError()\n    this.#seed = seed\n  }\n\n  getAccounts = async (\n    nStart = 0,\n    nEnd = 5,\n    coinType = CoinType.MAIN,\n  ): Promise<string[]> => {\n    if (!validIndexes(nStart, nEnd)) {\n      throw new InvalidParamsError({\n        message: 'Invalid indexes provided to getAccounts',\n      })\n    }\n\n    if (coinType !== CoinType.MAIN && coinType !== CoinType.TEST) {\n      throw new InvalidParamsError({\n        message: 'Invalid coinType passed to getAccounts',\n      })\n    }\n\n    const accounts = []\n    for (let i = nStart; i < nEnd; i += 1) {\n      const path = createPath(coinTypeCode(coinType), i)\n      const account = signingTools.keyDerive(this.#seed, path, '').address\n      accounts.push(account)\n      this.accountToPath[account] = path\n    }\n    return accounts\n  }\n\n  sign = async (\n    from: string,\n    message: LotusMessage,\n  ): Promise<SignedLotusMessage> => {\n    if (from !== message.From) {\n      throw new InvalidParamsError({ message: 'From address mismatch' })\n    }\n    const path = this.accountToPath[from]\n    if (!path) {\n      throw new WalletProviderError({\n        message: 'Account was not yet derived from this seed phrase',\n      })\n    }\n    let msg\n    try {\n      msg = Message.fromLotusType(message)\n    } catch (err) {\n      throw new InvalidParamsError(\n        err instanceof Error\n          ? {\n              message: `Invalid message params passed to sign call: ${err.message}`,\n            }\n          : undefined,\n      )\n    }\n\n    const { private_hexstring } = signingTools.keyDerive(this.#seed, path, '')\n    const { signature } = signingTools.transactionSign(\n      msg.toZondaxType(),\n      Buffer.from(private_hexstring, 'hex').toString('base64'),\n    ) as { signature: { data: string; type: number } }\n\n    return {\n      Message: message,\n      Signature: {\n        Type: signature.type,\n        Data: signature.data,\n      },\n    }\n  }\n}\n"],"file":"index.js"}