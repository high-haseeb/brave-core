"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommonLedgerError = void 0;

var _errors = _interopRequireDefault(require("./errors"));

var LedgerInUseByAnotherApp = _errors["default"].LedgerInUseByAnotherApp,
    LedgerReplugError = _errors["default"].LedgerReplugError,
    LedgerNotFoundError = _errors["default"].LedgerNotFoundError,
    LedgerFilecoinAppNotOpenError = _errors["default"].LedgerFilecoinAppNotOpenError,
    TransactionRejectedError = _errors["default"].TransactionRejectedError;

var CommonLedgerError = function CommonLedgerError(error) {
  // tslint:disable-next-line no-console
  console.log('error', error);

  if (error.message.toLowerCase().includes('unable to claim interface.') || error.message.toLowerCase().includes('failed to open the device')) {
    return new LedgerInUseByAnotherApp(error);
  } else if (error.message.toLowerCase().includes('transporterror: invalid channel') || error.message.toLocaleLowerCase().includes('device is already open.')) {
    return new LedgerReplugError(error);
  } else if (error.message.toLowerCase().includes('no device selected') || error.message.toLowerCase().includes('access denied to use ledger device')) {
    return new LedgerNotFoundError(error);
  } else if (error.message.toLowerCase().includes('28161') || error.message.toLowerCase().includes('app does not seem to be open')) {
    return new LedgerFilecoinAppNotOpenError();
  } else if (error.message.toLocaleLowerCase().includes('transaction rejected')) {
    return new TransactionRejectedError();
  } else {
    return new LedgerReplugError(error);
  }
};

exports.CommonLedgerError = CommonLedgerError;
//# sourceMappingURL=handleLedgerErrors.js.map