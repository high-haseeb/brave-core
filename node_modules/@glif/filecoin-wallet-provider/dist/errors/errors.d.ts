interface WalletProviderErrorInterface extends Partial<Error> {
    message: string;
    code?: number;
}
declare class WalletProviderError extends Error {
    code?: number;
    constructor(args: WalletProviderErrorInterface);
    toJSON(): WalletProviderErrorInterface;
}
declare class LedgerLostConnectionError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class TransportNotSupportedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerReplugError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerDisconnectedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerInUseByAnotherApp extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerNotFoundError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerDeviceLockedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerFilecoinAppBadVersionError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerFilecoinAppNotOpenError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class LedgerDeviceBusyError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class InvalidParamsError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class UnsupportedKeyTypeError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class TransactionRejectedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class MetaMaskError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class MetaMaskNotInstalledError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class MetaMaskSnapsNotSupportedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class MetaMaskLockedError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare class MetaMaskFilSnapNotInstalledError extends WalletProviderError {
    constructor({ ...args }?: Partial<WalletProviderErrorInterface>);
}
declare const _default: {
    InvalidParamsError: typeof InvalidParamsError;
    LedgerLostConnectionError: typeof LedgerLostConnectionError;
    LedgerReplugError: typeof LedgerReplugError;
    LedgerDisconnectedError: typeof LedgerDisconnectedError;
    LedgerInUseByAnotherApp: typeof LedgerInUseByAnotherApp;
    LedgerNotFoundError: typeof LedgerNotFoundError;
    LedgerDeviceLockedError: typeof LedgerDeviceLockedError;
    LedgerFilecoinAppBadVersionError: typeof LedgerFilecoinAppBadVersionError;
    LedgerFilecoinAppNotOpenError: typeof LedgerFilecoinAppNotOpenError;
    LedgerDeviceBusyError: typeof LedgerDeviceBusyError;
    MetaMaskError: typeof MetaMaskError;
    MetaMaskNotInstalledError: typeof MetaMaskNotInstalledError;
    MetaMaskSnapsNotSupportedError: typeof MetaMaskSnapsNotSupportedError;
    MetaMaskLockedError: typeof MetaMaskLockedError;
    MetaMaskFilSnapNotInstalledError: typeof MetaMaskFilSnapNotInstalledError;
    TransactionRejectedError: typeof TransactionRejectedError;
    TransportNotSupportedError: typeof TransportNotSupportedError;
    UnsupportedKeyTypeError: typeof UnsupportedKeyTypeError;
    WalletProviderError: typeof WalletProviderError;
};
export default _default;
//# sourceMappingURL=errors.d.ts.map