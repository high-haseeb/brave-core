import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { CoinType } from '@glif/filecoin-address';
import FilecoinApp from '@zondax/ledger-filecoin';
import { mapSeries } from 'bluebird';
import { Message } from '@glif/filecoin-message';
import signingTools from '@zondax/filecoin-signing-tools/js';
import { createPath, coinTypeCode, validIndexes } from '../../utils';
import { CommonLedgerError, errors } from '../../errors';
var LedgerLostConnectionError = errors.LedgerLostConnectionError,
    LedgerDeviceLockedError = errors.LedgerDeviceLockedError,
    LedgerFilecoinAppBadVersionError = errors.LedgerFilecoinAppBadVersionError,
    LedgerReplugError = errors.LedgerReplugError,
    LedgerDeviceBusyError = errors.LedgerDeviceBusyError,
    WalletProviderError = errors.WalletProviderError;
import { badVersion } from './badVersion';

function handleLedgerResponseErrors(response) {
  if (response.device_locked) {
    throw new LedgerDeviceLockedError();
  }

  if (response.error_message && response.error_message.toLowerCase().includes('no errors')) {
    return response;
  }

  if (response.error_message && response.error_message.toLowerCase().includes('transporterror: invalid channel')) {
    throw new LedgerLostConnectionError();
  }

  throw new WalletProviderError({
    message: response.error_message
  });
}

var throwIfBusy = function throwIfBusy(busy) {
  if (busy) throw new LedgerDeviceBusyError();
};

export var LedgerProvider = function LedgerProvider(_ref) {
  var _this = this;

  var transport = _ref.transport,
      minLedgerVersion = _ref.minLedgerVersion;

  _classCallCheck(this, LedgerProvider);

  _defineProperty(this, "type", 'LEDGER');

  _defineProperty(this, "ledgerBusy", false);

  _defineProperty(this, "minLedgerVersion", void 0);

  _defineProperty(this, "transport", void 0);

  _defineProperty(this, "accountToPath", {});

  _defineProperty(this, "getVersion", function () {
    throwIfBusy(_this.ledgerBusy);
    _this.ledgerBusy = true;
    return new Promise(function (resolve, reject) {
      var finished = false;
      setTimeout(function () {
        if (!finished) {
          finished = true;
          _this.ledgerBusy = false;
          return reject(new LedgerDeviceBusyError());
        }
      }, 3000);
      setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var vs;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.t0 = handleLedgerResponseErrors;
                _context.next = 4;
                return new FilecoinApp(_this.transport).getVersion();

              case 4:
                _context.t1 = _context.sent;
                vs = (0, _context.t0)(_context.t1);

                if (!badVersion(_this.minLedgerVersion, vs)) {
                  _context.next = 8;
                  break;
                }

                throw new LedgerFilecoinAppBadVersionError({
                  message: "\n              Filecoin App on Ledger device should be version\n              ".concat(_this.minLedgerVersion.major, ".").concat(_this.minLedgerVersion.minor, ".").concat(_this.minLedgerVersion.patch, "\n            ")
                });

              case 8:
                return _context.abrupt("return", resolve(vs));

              case 11:
                _context.prev = 11;
                _context.t2 = _context["catch"](0);
                return _context.abrupt("return", reject(_context.t2));

              case 14:
                _context.prev = 14;

                if (!finished) {
                  finished = true;
                  _this.ledgerBusy = false;
                }

                return _context.finish(14);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 11, 14, 17]]);
      })));
    });
  });

  _defineProperty(this, "ready", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.t0 = handleLedgerResponseErrors;
            _context2.next = 4;
            return _this.getVersion();

          case 4:
            _context2.t1 = _context2.sent;
            (0, _context2.t0)(_context2.t1);
            _context2.next = 15;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t2 = _context2["catch"](0);

            if (!(_context2.t2 instanceof Error)) {
              _context2.next = 14;
              break;
            }

            throw CommonLedgerError(_context2.t2);

          case 14:
            throw new LedgerReplugError();

          case 15:
            return _context2.abrupt("return", true);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 8]]);
  })));

  _defineProperty(this, "sign", /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(from, message) {
      var path, msg, serializedMessage, res, signedMessage;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              throwIfBusy(_this.ledgerBusy);

              if (!(from !== message.From)) {
                _context3.next = 3;
                break;
              }

              throw new errors.InvalidParamsError({
                message: 'from address mismatch'
              });

            case 3:
              _this.ledgerBusy = true;
              path = _this.accountToPath[from];

              if (path) {
                _context3.next = 8;
                break;
              }

              _this.ledgerBusy = false;
              throw new errors.WalletProviderError({
                message: 'Must call getAccounts with to derive this from address before signing with it'
              });

            case 8:
              _context3.prev = 8;
              msg = Message.fromLotusType(message);
              _context3.next = 15;
              break;

            case 12:
              _context3.prev = 12;
              _context3.t0 = _context3["catch"](8);
              throw new errors.InvalidParamsError(_context3.t0 instanceof Error ? {
                message: "Invalid message params passed to sign call: ".concat(_context3.t0.message)
              } : undefined);

            case 15:
              _context3.prev = 15;
              _this.ledgerBusy = false;
              return _context3.finish(15);

            case 18:
              serializedMessage = signingTools.transactionSerialize(msg.toZondaxType());
              _context3.prev = 19;
              _context3.t1 = handleLedgerResponseErrors;
              _context3.next = 23;
              return new FilecoinApp(_this.transport).sign(path, Buffer.from(serializedMessage, 'hex'));

            case 23:
              _context3.t2 = _context3.sent;
              res = (0, _context3.t1)(_context3.t2);
              signedMessage = {
                Message: message,
                Signature: {
                  Data: res.signature_compact.toString('base64'),
                  Type: 1
                }
              };
              return _context3.abrupt("return", signedMessage);

            case 29:
              _context3.prev = 29;
              _context3.t3 = _context3["catch"](19);

              if (!(_context3.t3 instanceof Error)) {
                _context3.next = 35;
                break;
              }

              throw CommonLedgerError(_context3.t3);

            case 35:
              throw new LedgerReplugError();

            case 36:
              _context3.prev = 36;
              _this.ledgerBusy = false;
              return _context3.finish(36);

            case 39:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[8, 12, 15, 18], [19, 29, 36, 39]]);
    }));

    return function (_x, _x2) {
      return _ref4.apply(this, arguments);
    };
  }());

  _defineProperty(this, "getAccounts", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var nStart,
        nEnd,
        coinType,
        paths,
        i,
        addresses,
        _args5 = arguments;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            nStart = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : 0;
            nEnd = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : 5;
            coinType = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : CoinType.MAIN;
            throwIfBusy(_this.ledgerBusy);

            if (validIndexes(nStart, nEnd)) {
              _context5.next = 6;
              break;
            }

            throw new errors.InvalidParamsError({
              message: 'invalid account indexes passed to getAccounts'
            });

          case 6:
            if (!(coinType !== CoinType.MAIN && coinType !== CoinType.TEST)) {
              _context5.next = 8;
              break;
            }

            throw new errors.InvalidParamsError({
              message: 'invalid coinType passed to getAccounts'
            });

          case 8:
            _this.ledgerBusy = true;
            paths = [];

            for (i = nStart; i < nEnd; i += 1) {
              paths.push(createPath(coinTypeCode(coinType), i));
            }

            _context5.next = 13;
            return mapSeries(paths, /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path) {
                var _ref7, addrString;

                return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.prev = 0;
                        _context4.t0 = handleLedgerResponseErrors;
                        _context4.next = 4;
                        return new FilecoinApp(_this.transport).getAddressAndPubKey(path);

                      case 4:
                        _context4.t1 = _context4.sent;
                        _ref7 = (0, _context4.t0)(_context4.t1);
                        addrString = _ref7.addrString;
                        _this.accountToPath[addrString] = path;
                        return _context4.abrupt("return", addrString);

                      case 11:
                        _context4.prev = 11;
                        _context4.t2 = _context4["catch"](0);

                        if (!(_context4.t2 instanceof Error)) {
                          _context4.next = 17;
                          break;
                        }

                        throw CommonLedgerError(_context4.t2);

                      case 17:
                        throw new LedgerReplugError();

                      case 18:
                        _context4.prev = 18;
                        _this.ledgerBusy = false;
                        return _context4.finish(18);

                      case 21:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, null, [[0, 11, 18, 21]]);
              }));

              return function (_x3) {
                return _ref6.apply(this, arguments);
              };
            }());

          case 13:
            addresses = _context5.sent;
            _this.ledgerBusy = false;
            return _context5.abrupt("return", addresses);

          case 16:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));

  _defineProperty(this, "showAddressAndPubKey", /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(path) {
      var res;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              throwIfBusy(_this.ledgerBusy);
              _this.ledgerBusy = true;
              _context6.prev = 2;
              _context6.t0 = handleLedgerResponseErrors;
              _context6.next = 6;
              return new FilecoinApp(_this.transport).showAddressAndPubKey(path);

            case 6:
              _context6.t1 = _context6.sent;
              res = (0, _context6.t0)(_context6.t1);
              return _context6.abrupt("return", res);

            case 11:
              _context6.prev = 11;
              _context6.t2 = _context6["catch"](2);

              if (!(_context6.t2 instanceof Error)) {
                _context6.next = 17;
                break;
              }

              throw CommonLedgerError(_context6.t2);

            case 17:
              throw new LedgerReplugError();

            case 18:
              _context6.prev = 18;
              _this.ledgerBusy = false;
              return _context6.finish(18);

            case 21:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[2, 11, 18, 21]]);
    }));

    return function (_x4) {
      return _ref8.apply(this, arguments);
    };
  }());

  _defineProperty(this, "resetTransport", /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_transport) {
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _this.transport = _transport;

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function (_x5) {
      return _ref9.apply(this, arguments);
    };
  }());

  if (!transport) throw new errors.InvalidParamsError({
    message: 'Must provide transport when instantiating LedgerSubProvider'
  });
  if (!minLedgerVersion || typeof minLedgerVersion.major !== 'number' || typeof minLedgerVersion.minor !== 'number' || typeof minLedgerVersion.patch !== 'number') throw new errors.InvalidParamsError({
    message: 'Must provide valid minLedgerVersions'
  });
  this.transport = transport;
  this.minLedgerVersion = minLedgerVersion;
}
/**
 * getVersion call rejects if it takes too long to respond,
 * meaning the Ledger device is locked
 */
;
//# sourceMappingURL=index.js.map