{"version":3,"sources":["../../../src/providers/ledger-provider/index.ts"],"names":["CoinType","FilecoinApp","mapSeries","Message","signingTools","createPath","coinTypeCode","validIndexes","CommonLedgerError","errors","LedgerLostConnectionError","LedgerDeviceLockedError","LedgerFilecoinAppBadVersionError","LedgerReplugError","LedgerDeviceBusyError","WalletProviderError","badVersion","handleLedgerResponseErrors","response","device_locked","error_message","toLowerCase","includes","message","throwIfBusy","busy","LedgerProvider","transport","minLedgerVersion","ledgerBusy","Promise","resolve","reject","finished","setTimeout","getVersion","vs","major","minor","patch","Error","from","From","InvalidParamsError","path","accountToPath","msg","fromLotusType","undefined","serializedMessage","transactionSerialize","toZondaxType","sign","Buffer","res","signedMessage","Signature","Data","signature_compact","toString","Type","nStart","nEnd","coinType","MAIN","TEST","paths","i","push","getAddressAndPubKey","addrString","addresses","showAddressAndPubKey","_transport"],"mappings":"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","sourcesContent":["import { CoinType } from '@glif/filecoin-address'\nimport FilecoinApp from '@zondax/ledger-filecoin'\nimport Transport from '@ledgerhq/hw-transport'\nimport { mapSeries } from 'bluebird'\nimport {\n  LotusMessage,\n  Message,\n  SignedLotusMessage,\n} from '@glif/filecoin-message'\nimport signingTools from '@zondax/filecoin-signing-tools/js'\nimport { createPath, coinTypeCode, validIndexes } from '../../utils'\nimport { SemanticVersion, WalletType } from '../../types'\nimport { WalletSubProvider } from '../../wallet-sub-provider'\nimport { CommonLedgerError, errors } from '../../errors'\n\nconst {\n  LedgerLostConnectionError,\n  LedgerDeviceLockedError,\n  LedgerFilecoinAppBadVersionError,\n  LedgerReplugError,\n  LedgerDeviceBusyError,\n  WalletProviderError,\n} = errors\n\nimport { badVersion } from './badVersion'\n\ntype LedgerResponse = {\n  return_code: number\n  error_message: string\n  device_locked: boolean\n}\n\nexport type LedgerVersion = LedgerResponse &\n  SemanticVersion & {\n    test_mode: boolean\n    target_id: string\n  }\n\nexport type LedgerShowAddrAndPubKey = LedgerResponse & {\n  addrString: string\n}\n\nexport type LedgerSignature = LedgerResponse & {\n  signature_compact: Buffer\n}\n\nexport type LedgerSubProvider = WalletSubProvider & {\n  getVersion: () => Promise<LedgerVersion>\n  showAddressAndPubKey: (_: string) => Promise<LedgerShowAddrAndPubKey>\n  resetTransport: (_: Transport) => Promise<void>\n  ready: () => Promise<boolean>\n}\n\nfunction handleLedgerResponseErrors(response: LedgerResponse): LedgerResponse {\n  if (response.device_locked) {\n    throw new LedgerDeviceLockedError()\n  }\n\n  if (\n    response.error_message &&\n    response.error_message.toLowerCase().includes('no errors')\n  ) {\n    return response\n  }\n  if (\n    response.error_message &&\n    response.error_message\n      .toLowerCase()\n      .includes('transporterror: invalid channel')\n  ) {\n    throw new LedgerLostConnectionError()\n  }\n\n  throw new WalletProviderError({ message: response.error_message })\n}\n\nconst throwIfBusy = (busy: boolean): void => {\n  if (busy) throw new LedgerDeviceBusyError()\n}\n\nexport class LedgerProvider implements LedgerSubProvider {\n  public type: WalletType = 'LEDGER'\n  public ledgerBusy: boolean = false\n  public minLedgerVersion: SemanticVersion\n  private transport: Transport\n  private accountToPath: Record<string, string> = {}\n\n  constructor({\n    transport,\n    minLedgerVersion,\n  }: {\n    transport: Transport\n    minLedgerVersion: SemanticVersion\n  }) {\n    if (!transport)\n      throw new errors.InvalidParamsError({\n        message: 'Must provide transport when instantiating LedgerSubProvider',\n      })\n    if (\n      !minLedgerVersion ||\n      typeof minLedgerVersion.major !== 'number' ||\n      typeof minLedgerVersion.minor !== 'number' ||\n      typeof minLedgerVersion.patch !== 'number'\n    )\n      throw new errors.InvalidParamsError({\n        message: 'Must provide valid minLedgerVersions',\n      })\n\n    this.transport = transport\n    this.minLedgerVersion = minLedgerVersion\n  }\n\n  /**\n   * getVersion call rejects if it takes too long to respond,\n   * meaning the Ledger device is locked\n   */\n  getVersion = (): Promise<LedgerVersion> => {\n    throwIfBusy(this.ledgerBusy)\n    this.ledgerBusy = true\n    return new Promise((resolve, reject) => {\n      let finished = false\n      setTimeout(() => {\n        if (!finished) {\n          finished = true\n          this.ledgerBusy = false\n          return reject(new LedgerDeviceBusyError())\n        }\n      }, 3000)\n\n      setTimeout(async () => {\n        try {\n          const vs = handleLedgerResponseErrors(\n            (await new FilecoinApp(\n              this.transport,\n            ).getVersion()) as LedgerVersion,\n          ) as LedgerVersion\n\n          if (badVersion(this.minLedgerVersion, vs))\n            throw new LedgerFilecoinAppBadVersionError({\n              message: `\n              Filecoin App on Ledger device should be version\n              ${this.minLedgerVersion.major}.${this.minLedgerVersion.minor}.${this.minLedgerVersion.patch}\n            `,\n            })\n          return resolve(vs)\n        } catch (err) {\n          return reject(err)\n        } finally {\n          if (!finished) {\n            finished = true\n            this.ledgerBusy = false\n          }\n        }\n      })\n    })\n  }\n\n  ready = async (): Promise<boolean> => {\n    try {\n      // tslint:disable-next-line no-unused-expression\n      handleLedgerResponseErrors(await this.getVersion()) as LedgerVersion\n    } catch (err) {\n      if (err instanceof Error) {\n        throw CommonLedgerError(err)\n      } else {\n        throw new LedgerReplugError()\n      }\n    }\n    return true\n  }\n\n  sign = async (\n    from: string,\n    message: LotusMessage,\n  ): Promise<SignedLotusMessage> => {\n    throwIfBusy(this.ledgerBusy)\n    if (from !== message.From)\n      throw new errors.InvalidParamsError({ message: 'from address mismatch' })\n    this.ledgerBusy = true\n    const path = this.accountToPath[from]\n    if (!path) {\n      this.ledgerBusy = false\n      throw new errors.WalletProviderError({\n        message:\n          'Must call getAccounts with to derive this from address before signing with it',\n      })\n    }\n    let msg: Message\n    try {\n      msg = Message.fromLotusType(message)\n    } catch (err) {\n      throw new errors.InvalidParamsError(\n        err instanceof Error\n          ? {\n              message: `Invalid message params passed to sign call: ${err.message}`,\n            }\n          : undefined,\n      )\n    } finally {\n      this.ledgerBusy = false\n    }\n    const serializedMessage = signingTools.transactionSerialize(\n      msg.toZondaxType(),\n    )\n    try {\n      const res = handleLedgerResponseErrors(\n        await new FilecoinApp(this.transport).sign(\n          path,\n          Buffer.from(serializedMessage, 'hex'),\n        ),\n      ) as LedgerSignature\n      const signedMessage: SignedLotusMessage = {\n        Message: message,\n        Signature: {\n          Data: res.signature_compact.toString('base64'),\n          Type: 1,\n        },\n      }\n      return signedMessage\n    } catch (err) {\n      if (err instanceof Error) {\n        throw CommonLedgerError(err)\n      } else {\n        throw new LedgerReplugError()\n      }\n    } finally {\n      this.ledgerBusy = false\n    }\n  }\n\n  getAccounts = async (nStart = 0, nEnd = 5, coinType = CoinType.MAIN) => {\n    throwIfBusy(this.ledgerBusy)\n    if (!validIndexes(nStart, nEnd)) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid account indexes passed to getAccounts',\n      })\n    }\n\n    if (coinType !== CoinType.MAIN && coinType !== CoinType.TEST) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid coinType passed to getAccounts',\n      })\n    }\n\n    this.ledgerBusy = true\n    const paths: string[] = []\n    for (let i = nStart; i < nEnd; i += 1) {\n      paths.push(createPath(coinTypeCode(coinType), i))\n    }\n    const addresses = await mapSeries(paths, async (path: string) => {\n      try {\n        const { addrString } = handleLedgerResponseErrors(\n          await new FilecoinApp(this.transport).getAddressAndPubKey(path),\n        ) as LedgerShowAddrAndPubKey\n        this.accountToPath[addrString] = path\n        return addrString\n      } catch (err) {\n        if (err instanceof Error) {\n          throw CommonLedgerError(err)\n        } else {\n          throw new LedgerReplugError()\n        }\n      } finally {\n        this.ledgerBusy = false\n      }\n    })\n    this.ledgerBusy = false\n    return addresses\n  }\n\n  showAddressAndPubKey = async (\n    path: string,\n  ): Promise<LedgerShowAddrAndPubKey> => {\n    throwIfBusy(this.ledgerBusy)\n    this.ledgerBusy = true\n    try {\n      const res = handleLedgerResponseErrors(\n        await new FilecoinApp(this.transport).showAddressAndPubKey(path),\n      ) as LedgerShowAddrAndPubKey\n      return res\n    } catch (err) {\n      if (err instanceof Error) {\n        throw CommonLedgerError(err)\n      } else {\n        throw new LedgerReplugError()\n      }\n    } finally {\n      this.ledgerBusy = false\n    }\n  }\n\n  resetTransport = async (_transport: Transport): Promise<void> => {\n    this.transport = _transport\n  }\n}\n"],"file":"index.js"}