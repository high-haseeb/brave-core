import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { CoinType } from '@glif/filecoin-address';
import { Message } from '@glif/filecoin-message';
import { mapSeries } from 'bluebird';
import { errors } from '../../errors';
import { coinTypeCode, createPath, validIndexes, extractCoinTypeFromPath } from '../../utils';
export var MetaMaskProvider = function MetaMaskProvider(_ref) {
  var _this = this;

  var snap = _ref.snap;

  _classCallCheck(this, MetaMaskProvider);

  _defineProperty(this, "type", 'METAMASK');

  _defineProperty(this, "snap", void 0);

  _defineProperty(this, "accountToPath", {});

  _defineProperty(this, "getAccounts", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var nStart,
        nEnd,
        coinType,
        paths,
        i,
        addresses,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            nStart = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 0;
            nEnd = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;
            coinType = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : CoinType.MAIN;

            if (validIndexes(nStart, nEnd)) {
              _context2.next = 5;
              break;
            }

            throw new errors.InvalidParamsError({
              message: 'invalid account indexes passed to getAccounts'
            });

          case 5:
            if (!(coinType !== CoinType.MAIN && coinType !== CoinType.TEST)) {
              _context2.next = 7;
              break;
            }

            throw new errors.InvalidParamsError({
              message: 'invalid coinType passed to getAccounts'
            });

          case 7:
            _context2.prev = 7;
            paths = [];

            for (i = nStart; i < nEnd; i += 1) {
              paths.push(createPath(coinTypeCode(coinType), i));
            }

            _context2.next = 12;
            return mapSeries(paths, /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {
                var account;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return _this.snap.configure({
                          derivationPath: path,
                          network: coinType
                        });

                      case 3:
                        _context.next = 5;
                        return _this.snap.getAddress();

                      case 5:
                        account = _context.sent;
                        _this.accountToPath[account] = path;
                        return _context.abrupt("return", account);

                      case 10:
                        _context.prev = 10;
                        _context.t0 = _context["catch"](0);
                        throw new errors.MetaMaskError({
                          message: _context.t0 instanceof Error ? _context.t0.message : 'Error getting accounts from MetaMask'
                        });

                      case 13:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 10]]);
              }));

              return function (_x) {
                return _ref3.apply(this, arguments);
              };
            }());

          case 12:
            addresses = _context2.sent;
            return _context2.abrupt("return", addresses);

          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](7);
            throw new errors.MetaMaskError({
              message: _context2.t0 instanceof Error ? _context2.t0.message : 'Error getting accounts from MetaMask'
            });

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[7, 16]]);
  })));

  _defineProperty(this, "sign", /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(from, message) {
      var _signReq$signedMessag, _signReq$signedMessag2, _signReq$signedMessag3, _signReq$signedMessag4;

      var path, msg, signReq;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(from !== message.From)) {
                _context3.next = 2;
                break;
              }

              throw new errors.InvalidParamsError({
                message: 'From address mismatch'
              });

            case 2:
              path = _this.accountToPath[from];

              if (path) {
                _context3.next = 5;
                break;
              }

              throw new errors.WalletProviderError({
                message: 'Must call getAccounts with to derive this from address before signing with it'
              });

            case 5:
              _context3.prev = 5;
              _context3.next = 8;
              return _this.snap.configure({
                derivationPath: path,
                network: extractCoinTypeFromPath(path)
              });

            case 8:
              _context3.next = 13;
              break;

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](5);
              throw new errors.MetaMaskError({
                message: _context3.t0 instanceof Error ? _context3.t0.message : 'Error configuring snap'
              });

            case 13:
              _context3.prev = 13;
              msg = Message.fromLotusType(message);
              _context3.next = 20;
              break;

            case 17:
              _context3.prev = 17;
              _context3.t1 = _context3["catch"](13);
              throw new errors.InvalidParamsError(_context3.t1 instanceof Error ? {
                message: "Invalid message params passed to sign call: ".concat(_context3.t1.message)
              } : undefined);

            case 20:
              _context3.next = 22;
              return _this.snap.signMessage(msg.toZondaxType());

            case 22:
              signReq = _context3.sent;

              if (signReq) {
                _context3.next = 25;
                break;
              }

              throw new errors.MetaMaskError({
                message: 'Error signing transaction'
              });

            case 25:
              if (signReq.confirmed) {
                _context3.next = 27;
                break;
              }

              throw new errors.TransactionRejectedError();

            case 27:
              if (!signReq.error) {
                _context3.next = 29;
                break;
              }

              throw new errors.MetaMaskError({
                message: signReq.error.message
              });

            case 29:
              return _context3.abrupt("return", {
                Message: message,
                Signature: {
                  Data: (_signReq$signedMessag = signReq.signedMessage) === null || _signReq$signedMessag === void 0 ? void 0 : (_signReq$signedMessag2 = _signReq$signedMessag.signature) === null || _signReq$signedMessag2 === void 0 ? void 0 : _signReq$signedMessag2.data,
                  Type: (_signReq$signedMessag3 = signReq.signedMessage) === null || _signReq$signedMessag3 === void 0 ? void 0 : (_signReq$signedMessag4 = _signReq$signedMessag3.signature) === null || _signReq$signedMessag4 === void 0 ? void 0 : _signReq$signedMessag4.type
                }
              });

            case 30:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[5, 10], [13, 17]]);
    }));

    return function (_x2, _x3) {
      return _ref4.apply(this, arguments);
    };
  }());

  if (!snap) throw new errors.InvalidParamsError({
    message: 'Must pass `snap` to MetaMask provider'
  });
  this.snap = snap;
};
//# sourceMappingURL=index.js.map