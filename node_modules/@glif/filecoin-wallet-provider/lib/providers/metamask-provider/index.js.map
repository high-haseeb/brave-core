{"version":3,"sources":["../../../src/providers/metamask-provider/index.ts"],"names":["CoinType","Message","mapSeries","errors","coinTypeCode","createPath","validIndexes","extractCoinTypeFromPath","MetaMaskProvider","snap","nStart","nEnd","coinType","MAIN","InvalidParamsError","message","TEST","paths","i","push","path","configure","derivationPath","network","getAddress","account","accountToPath","MetaMaskError","Error","addresses","from","From","WalletProviderError","msg","fromLotusType","undefined","signMessage","toZondaxType","signReq","confirmed","TransactionRejectedError","error","Signature","Data","signedMessage","signature","data","Type","type"],"mappings":"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","sourcesContent":["import { FilecoinSnapApi } from '@chainsafe/filsnap-types'\nimport { CoinType } from '@glif/filecoin-address'\nimport {\n  LotusMessage,\n  Message,\n  SignedLotusMessage,\n  ZondaxMessage,\n} from '@glif/filecoin-message'\nimport { mapSeries } from 'bluebird'\nimport { WalletType } from '../../types'\nimport { errors } from '../../errors'\nimport { WalletSubProvider } from '../../wallet-sub-provider'\nimport {\n  coinTypeCode,\n  createPath,\n  validIndexes,\n  extractCoinTypeFromPath,\n} from '../../utils'\n\nexport class MetaMaskProvider implements WalletSubProvider {\n  public type: WalletType = 'METAMASK'\n  private snap: FilecoinSnapApi\n  private accountToPath: Record<string, string> = {}\n\n  constructor({ snap }: { snap: FilecoinSnapApi }) {\n    if (!snap)\n      throw new errors.InvalidParamsError({\n        message: 'Must pass `snap` to MetaMask provider',\n      })\n    this.snap = snap\n  }\n\n  getAccounts = async (nStart = 0, nEnd = 5, coinType = CoinType.MAIN) => {\n    if (!validIndexes(nStart, nEnd)) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid account indexes passed to getAccounts',\n      })\n    }\n\n    if (coinType !== CoinType.MAIN && coinType !== CoinType.TEST) {\n      throw new errors.InvalidParamsError({\n        message: 'invalid coinType passed to getAccounts',\n      })\n    }\n    try {\n      const paths: string[] = []\n      for (let i = nStart; i < nEnd; i += 1) {\n        paths.push(createPath(coinTypeCode(coinType), i))\n      }\n      const addresses = await mapSeries(paths, async (path: string) => {\n        try {\n          await this.snap.configure({ derivationPath: path, network: coinType })\n          const account = await this.snap.getAddress()\n          this.accountToPath[account] = path\n          return account\n        } catch (err) {\n          throw new errors.MetaMaskError({\n            message:\n              err instanceof Error\n                ? err.message\n                : 'Error getting accounts from MetaMask',\n          })\n        }\n      })\n      return addresses\n    } catch (err) {\n      throw new errors.MetaMaskError({\n        message:\n          err instanceof Error\n            ? err.message\n            : 'Error getting accounts from MetaMask',\n      })\n    }\n  }\n\n  sign = async (\n    from: string,\n    message: LotusMessage,\n  ): Promise<SignedLotusMessage> => {\n    if (from !== message.From) {\n      throw new errors.InvalidParamsError({ message: 'From address mismatch' })\n    }\n    const path = this.accountToPath[from]\n    if (!path) {\n      throw new errors.WalletProviderError({\n        message:\n          'Must call getAccounts with to derive this from address before signing with it',\n      })\n    }\n\n    try {\n      await this.snap.configure({\n        derivationPath: path,\n        network: extractCoinTypeFromPath(path),\n      })\n    } catch (err) {\n      throw new errors.MetaMaskError({\n        message: err instanceof Error ? err.message : 'Error configuring snap',\n      })\n    }\n\n    let msg: Message\n    try {\n      msg = Message.fromLotusType(message)\n    } catch (err) {\n      throw new errors.InvalidParamsError(\n        err instanceof Error\n          ? {\n              message: `Invalid message params passed to sign call: ${err.message}`,\n            }\n          : undefined,\n      )\n    }\n\n    const signReq = await this.snap.signMessage(\n      msg.toZondaxType() as ZondaxMessage & { params: string },\n    )\n\n    if (!signReq)\n      throw new errors.MetaMaskError({ message: 'Error signing transaction' })\n    if (!signReq.confirmed) throw new errors.TransactionRejectedError()\n    if (signReq.error)\n      throw new errors.MetaMaskError({\n        message: signReq.error.message,\n      })\n\n    return {\n      Message: message,\n      Signature: {\n        Data: signReq.signedMessage?.signature?.data,\n        Type: signReq.signedMessage?.signature?.type,\n      },\n    }\n  }\n}\n"],"file":"index.js"}