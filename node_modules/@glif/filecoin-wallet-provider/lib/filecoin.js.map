{"version":3,"sources":["../src/filecoin.ts"],"names":["LotusRpcEngine","FilecoinNumber","checkAddressString","Message","computeGasToBurn","KNOWN_TYPE_0_ADDRESS","KNOWN_TYPE_1_ADDRESS","KNOWN_TYPE_3_ADDRESS","allCallsExitWithCode0","BigNumber","Filecoin","provider","config","apiAddress","address","jsonRpcEngine","request","balance","message","res","signedLotusMessage","Error","Signature","Number","nonce","toLowerCase","includes","clonedMsg","Object","assign","From","coinType","cloneMsgWOnChainFromAddr","feeCap","gasLimit","numBlocksIncluded","GasLimit","gasPremium","maxFee","toAttoFil","MaxFee","To","Value","GasPremium","GasFeeCap","Method","Nonce","Params","toAddressWithCorrectPrefix","slice","to","from","value","gasFeeCap","method","params","gasEstimateMessageGas","msgWithGas","toLotusType","limit","times","baseFee","gasUsed","gasFeeCapBN","gasPremiumBN","gasLimitBN","baseFeeBN","gasUsedBN","gasToBurn","totalGas","plus","minBaseFeeFeeCap","minimum","leftSide","minTip","minus","rightSide","maximum","getReplaceMessageMinGasParams","minGasFeeCap","minGasPremium","minGasLimit","copiedMessage","recommendedMessage","takeMin","isLessThan","toString","newPremiumBn","EPSILON","integerValue","ROUND_CEIL","newFeeCap","isGreaterThan","wallet"],"mappings":"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","sourcesContent":["import LotusRpcEngine, { LotusRpcEngineConfig } from '@glif/filecoin-rpc-client'\nimport { FilecoinNumber } from '@glif/filecoin-number'\nimport { checkAddressString, CoinType } from '@glif/filecoin-address'\nimport {\n  LotusMessage,\n  Message,\n  SignedLotusMessage,\n} from '@glif/filecoin-message'\nimport {\n  computeGasToBurn,\n  KNOWN_TYPE_0_ADDRESS,\n  KNOWN_TYPE_1_ADDRESS,\n  KNOWN_TYPE_3_ADDRESS,\n  allCallsExitWithCode0,\n} from './utils'\nimport { BigNumber } from 'bignumber.js'\nimport { WalletSubProvider } from './wallet-sub-provider'\nimport { InvocResult, CID } from './types'\n\nexport class Filecoin {\n  public wallet: WalletSubProvider\n  public jsonRpcEngine: LotusRpcEngine\n\n  constructor(\n    provider: WalletSubProvider,\n    config: LotusRpcEngineConfig = {\n      apiAddress: 'http://127.0.0.1:1234/rpc/v0',\n    },\n  ) {\n    if (!provider) throw new Error('No provider provided.')\n    this.wallet = provider\n    this.jsonRpcEngine = new LotusRpcEngine(config)\n  }\n\n  getBalance = async (address: string): Promise<FilecoinNumber> => {\n    checkAddressString(address)\n    const balance = await this.jsonRpcEngine.request<string>(\n      'WalletBalance',\n      address,\n    )\n    return new FilecoinNumber(balance, 'attofil')\n  }\n\n  simulateMessage = async (message: LotusMessage): Promise<boolean> => {\n    const res = await this.jsonRpcEngine.request<InvocResult>(\n      'StateCall',\n      message,\n      null,\n    )\n    return allCallsExitWithCode0(res)\n  }\n\n  sendMessage = async (\n    signedLotusMessage: SignedLotusMessage,\n  ): Promise<CID> => {\n    if (!signedLotusMessage.Message) throw new Error('No message provided.')\n    if (!signedLotusMessage.Signature) throw new Error('No signature provided.')\n\n    return this.jsonRpcEngine.request<{ '/': string }>(\n      'MpoolPush',\n      signedLotusMessage,\n    )\n  }\n\n  getNonce = async (address: string): Promise<number> => {\n    if (!address) throw new Error('No address provided.')\n    checkAddressString(address)\n    try {\n      const nonce = Number(\n        await this.jsonRpcEngine.request('MpoolGetNonce', address),\n      )\n      return nonce\n    } catch (err) {\n      if (err instanceof Error) {\n        if (err?.message.toLowerCase().includes('actor not found')) {\n          return 0\n        }\n\n        throw new Error(err.message)\n      }\n      throw new Error('An unknown error occured when fetching the nonce.')\n    }\n  }\n\n  cloneMsgWOnChainFromAddr = async (\n    message: LotusMessage,\n  ): Promise<LotusMessage> => {\n    const clonedMsg = Object.assign({}, message)\n    try {\n      // state call errs if the from address does not exist on chain yet, lookup from actor ID to know this for sure\n      await this.jsonRpcEngine.request('StateLookupID', clonedMsg.From, null)\n    } catch (err) {\n      // if from actor doesnt exist, use a hardcoded known actor address\n      if (\n        err instanceof Error &&\n        err.message.toLowerCase().includes('actor not found')\n      ) {\n        const coinType = clonedMsg.From[0] as CoinType\n\n        if (!clonedMsg.From) clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        if (clonedMsg.From[1] === '0')\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        else if (clonedMsg.From[1] === '1')\n          clonedMsg.From = KNOWN_TYPE_1_ADDRESS[coinType]\n        else if (clonedMsg.From[1] === '3')\n          clonedMsg.From = KNOWN_TYPE_3_ADDRESS[coinType]\n        else {\n          // this should never happen, only t1 and t3 addresses can be used as a from?\n          clonedMsg.From = KNOWN_TYPE_0_ADDRESS[coinType]\n        }\n      }\n    }\n    return clonedMsg\n  }\n\n  gasEstimateFeeCap = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const feeCap = await this.jsonRpcEngine.request<string>(\n      'GasEstimateFeeCap',\n      clonedMsg,\n      0,\n      null,\n    )\n\n    return new FilecoinNumber(feeCap, 'attofil')\n  }\n\n  gasEstimateGasLimit = async (\n    message: LotusMessage,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasLimit = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasLimit',\n      clonedMsg,\n      null,\n    )\n\n    return new FilecoinNumber(gasLimit, 'attofil')\n  }\n\n  gasEstimateGasPremium = async (\n    message: LotusMessage,\n    numBlocksIncluded: number = 0,\n  ): Promise<FilecoinNumber> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n\n    const gasPremium = await this.jsonRpcEngine.request<string>(\n      'GasEstimateGasPremium',\n      numBlocksIncluded,\n      clonedMsg.From,\n      clonedMsg.GasLimit || 0,\n      null,\n    )\n\n    return new FilecoinNumber(gasPremium, 'attofil')\n  }\n\n  gasEstimateMessageGas = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<Message> => {\n    if (!message) throw new Error('No message provided.')\n    const clonedMsg = await this.cloneMsgWOnChainFromAddr(message)\n    const {\n      To,\n      Value,\n      GasPremium,\n      GasFeeCap,\n      GasLimit,\n      Method,\n      Nonce,\n      Params,\n    } = await this.jsonRpcEngine.request(\n      'GasEstimateMessageGas',\n      clonedMsg,\n      { MaxFee: maxFee },\n      null,\n    )\n\n    // this is a hack to get by weird UI bugs where f addresses convert to t addresses\n    const toAddressWithCorrectPrefix = clonedMsg.To[0] + To.slice(1)\n    return new Message({\n      to: toAddressWithCorrectPrefix,\n      from: message.From,\n      value: Value,\n      gasPremium: GasPremium,\n      gasFeeCap: GasFeeCap,\n      gasLimit: GasLimit,\n      method: Method,\n      nonce: Nonce,\n      params: Params,\n    })\n  }\n\n  gasEstimateMaxFee = async (\n    message: LotusMessage,\n  ): Promise<{ maxFee: FilecoinNumber; message: LotusMessage }> => {\n    const msgWithGas = (await this.gasEstimateMessageGas(message)).toLotusType()\n    const feeCap = new BigNumber(msgWithGas.GasFeeCap)\n    const limit = new BigNumber(msgWithGas.GasLimit)\n    return {\n      maxFee: new FilecoinNumber(feeCap.times(limit), 'attofil'),\n      message: msgWithGas,\n    }\n  }\n\n  /**\n   * formula (some of these variable names might not be the best...):\n   * (GasUsed+GasToBurn)*min(BaseFee, FeeCap)+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium)))\n   *\n   * minBaseFeeFeeCap = min(BaseFee, FeeCap)\n   * totalGas = GasUsed+GasToBurn\n   * leftSide = totalGas*minBaseFeeFeeCap\n   *\n   * minTip = min(FeeCap-BaseFee, GasPremium)\n   * rightSide = gasLimit*max(0, minTip)\n   *\n   * paidByMessageSender =\n   * leftSide + rightSide\n   */\n  gasCalcTxFee = async (\n    gasFeeCap: string,\n    gasPremium: string,\n    gasLimit: number,\n    baseFee: string,\n    gasUsed: string,\n  ): Promise<FilecoinNumber> => {\n    const gasFeeCapBN = new BigNumber(gasFeeCap)\n    const gasPremiumBN = new BigNumber(gasPremium)\n    const gasLimitBN = new BigNumber(gasLimit)\n    const baseFeeBN = new BigNumber(baseFee)\n    const gasUsedBN = new BigNumber(gasUsed)\n\n    /* compute left side */\n    const gasToBurn = computeGasToBurn(gasUsedBN, gasLimitBN)\n    const totalGas = gasUsedBN.plus(gasToBurn)\n    const minBaseFeeFeeCap = BigNumber.minimum(baseFeeBN, gasFeeCapBN)\n    const leftSide = totalGas.times(minBaseFeeFeeCap)\n\n    /* compute right side */\n    const minTip = BigNumber.minimum(gasFeeCapBN.minus(baseFeeBN), gasPremiumBN)\n    const rightSide = gasLimitBN.times(BigNumber.maximum(0, minTip))\n\n    return new FilecoinNumber(leftSide.plus(rightSide), 'attofil')\n  }\n\n  /*\n   * Used for calculating gas params of replaced messages\n   * To get the params - we compare the minimum bump in gas (gas premium * 1.25)\n   * against the recommended gas params (taken from gasEstimateMessageGas, maxFee = .1)\n   *\n   * If any of the 3 gas params in the recommended gas amounts are LESS\n   * than the params calculated in the minimum bump in gas, take the minimum bump in gas\n   *\n   */\n\n  getReplaceMessageGasParams = async (\n    message: LotusMessage,\n    maxFee: string = new FilecoinNumber('0.1', 'fil').toAttoFil(),\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n\n    const {\n      gasFeeCap: minGasFeeCap,\n      gasPremium: minGasPremium,\n      gasLimit: minGasLimit\n    } = await this.getReplaceMessageMinGasParams(message)\n\n    const copiedMessage = {\n      ...message,\n      GasFeeCap: '0',\n      GasPremium: '0',\n      GasLimit: 0\n    }\n\n    const recommendedMessage = await this.gasEstimateMessageGas(copiedMessage, maxFee)\n\n    const takeMin =\n      recommendedMessage.gasFeeCap.isLessThan(minGasFeeCap) ||\n      recommendedMessage.gasPremium.isLessThan(minGasPremium) ||\n      recommendedMessage.gasLimit < minGasLimit\n\n    return {\n      gasFeeCap: takeMin ? minGasFeeCap : recommendedMessage.gasFeeCap.toString(),\n      gasPremium: takeMin ? minGasPremium : recommendedMessage.gasPremium.toString(),\n      gasLimit: takeMin ? minGasLimit : recommendedMessage.gasLimit\n    }\n  }\n\n  /**\n   * Used for calculating the minimum boost in gas params to replace a message\n   *  (1.25x prev gasPremium, bump fee cap as needed)\n   */\n  getReplaceMessageMinGasParams = async (\n    message: LotusMessage,\n  ): Promise<{ gasFeeCap: string; gasPremium: string; gasLimit: number }> => {\n\n    // Sometimes the replaced message still got rejected because Lotus expected\n    // a gas premium of 1 higher than what we calculated as the new minimum. In\n    // order to resolve this, we add Epsilon (the smallest possible number) before\n    // rounding up. This causes whole numbers that result from the multiplication\n    // to be rounded up to the next whole number. (e.g. 100 * 1.25 = 125 -> 126)\n    const newPremiumBn = new BigNumber(message.GasPremium)\n      .times(1.25)\n      .plus(Number.EPSILON)\n      .integerValue(BigNumber.ROUND_CEIL)\n\n    const newFeeCap = newPremiumBn.isGreaterThan(message.GasFeeCap)\n      ? newPremiumBn.toString()\n      : message.GasFeeCap\n\n    return {\n      gasFeeCap: newFeeCap,\n      gasPremium: newPremiumBn.toString(),\n      gasLimit: message.GasLimit,\n    }\n  }\n}\n"],"file":"filecoin.js"}