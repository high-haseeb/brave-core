import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import TransportWebHID from '@ledgerhq/hw-transport-webhid';
import { errors, CommonLedgerError } from '../errors';
var TransportNotSupportedError = errors.TransportNotSupportedError,
    LedgerReplugError = errors.LedgerReplugError,
    LedgerDisconnectedError = errors.LedgerDisconnectedError;

var WebHIDTransportWrapper = /*#__PURE__*/function () {
  function WebHIDTransportWrapper() {
    var _this = this;

    _classCallCheck(this, WebHIDTransportWrapper);

    _defineProperty(this, "type", 'WEB_HID');

    _defineProperty(this, "initted", false);

    _defineProperty(this, "_transport", null);

    _defineProperty(this, "checkSupport", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var isSupported;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return TransportWebHID.isSupported();

            case 2:
              isSupported = _context.sent;

              if (isSupported) {
                _context.next = 5;
                break;
              }

              throw new TransportNotSupportedError();

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));

    _defineProperty(this, "disconnect", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;

              if (!_this._transport) {
                _context2.next = 4;
                break;
              }

              _context2.next = 4;
              return _this._transport.close();

            case 4:
              _context2.next = 9;
              break;

            case 6:
              _context2.prev = 6;
              _context2.t0 = _context2["catch"](0);
              throw new LedgerReplugError({
                message: 'Error closing transport.'
              });

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 6]]);
    })));

    _defineProperty(this, "connect", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_this.initted) {
                _context3.next = 4;
                break;
              }

              _context3.next = 3;
              return _this.checkSupport();

            case 3:
              _this.initted = true;

            case 4:
              _context3.next = 6;
              return _this.disconnect();

            case 6:
              _context3.prev = 6;
              _context3.next = 9;
              return TransportWebHID.create();

            case 9:
              _this._transport = _context3.sent;
              _context3.next = 19;
              break;

            case 12:
              _context3.prev = 12;
              _context3.t0 = _context3["catch"](6);

              if (!(_context3.t0 instanceof Error)) {
                _context3.next = 18;
                break;
              }

              throw CommonLedgerError(_context3.t0);

            case 18:
              throw new LedgerReplugError();

            case 19:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[6, 12]]);
    })));
  }

  _createClass(WebHIDTransportWrapper, [{
    key: "transport",
    get: function get() {
      if (!this._transport) throw new LedgerDisconnectedError();
      return this._transport;
    }
  }]);

  return WebHIDTransportWrapper;
}();

export { WebHIDTransportWrapper as default };
//# sourceMappingURL=index.js.map