{"version":3,"sources":["../src/index.ts"],"names":["BigNumber","validateAddressString","set","ROUNDING_MODE","ROUND_HALF_DOWN","config","EXPONENTIAL_AT","Message","to","_to","from","_from","nonce","_nonce","method","_method","value","_value","gasPremium","_gasPremium","gasFeeCap","_gasFeeCap","gasLimit","_gasLimit","params","_params","constructor","msg","To","From","Nonce","Value","toFixed","GasPremium","GasFeeCap","GasLimit","Method","Params","gaspremium","gasfeecap","gaslimit","cid","toAddr","robust","id","fromAddr","toString","height","typeCheck","Error","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { validateAddressString } from '@glif/filecoin-address'\n\nBigNumber.set({ ROUNDING_MODE: BigNumber.ROUND_HALF_DOWN })\nBigNumber.config({ EXPONENTIAL_AT: 1e9 })\n\nexport interface ZondaxMessage {\n  readonly to: string\n  readonly from: string\n  readonly nonce: number\n  readonly value: string\n  readonly gaspremium: string\n  readonly gaslimit: number\n  readonly gasfeecap: string\n  readonly method: number\n  readonly params: string | string[] | undefined\n}\n\nexport type Address = {\n  robust: string\n  id: string\n}\n\nexport type MessagePending = {\n  cid: string\n  from: Address\n  gasFeeCap: string\n  gasLimit: string\n  gasPremium: string\n  height: string\n  method: string\n  nonce: string\n  params: string | string[] | undefined\n  to: Address\n  value: string\n  version?: string\n}\n\ntype SerializableMessage = ZondaxMessage\n\nexport interface LotusMessage {\n  To: string\n  From: string\n  Nonce: number\n  Value: string\n  GasPremium: string\n  GasLimit: number\n  GasFeeCap: string\n  Method: number\n  Params?: string | string[]\n}\n\nexport interface SignedLotusMessage {\n  Message: LotusMessage\n  Signature: {\n    Type: number\n    Data: string\n  }\n}\n\nexport interface MessageObj {\n  to: string\n  from: string\n  nonce: number\n  method: number\n  value: string | number | BigNumber\n  gasPremium?: string | number | BigNumber\n  gasFeeCap?: string | number | BigNumber\n  gasLimit?: number\n  params?: string | string[]\n}\n\nexport class Message {\n  private _to: string\n  private _from: string\n  private _nonce: number\n  private _method: number\n  private _value: BigNumber\n  private _gasPremium: BigNumber\n  private _gasFeeCap: BigNumber\n  private _gasLimit: number\n  private _params: string | string[] | undefined\n\n  public get to(): string {\n    return this._to\n  }\n\n  public get from(): string {\n    return this._from\n  }\n\n  public get nonce(): number {\n    return this._nonce\n  }\n\n  public get method(): number {\n    return this._method\n  }\n\n  public get value(): BigNumber {\n    return this._value\n  }\n\n  public get gasPremium(): BigNumber {\n    return this._gasPremium\n  }\n\n  public get gasFeeCap(): BigNumber {\n    return this._gasFeeCap\n  }\n\n  public get gasLimit(): number {\n    return this._gasLimit\n  }\n\n  public get params(): string | string[] | undefined {\n    return this._params\n  }\n\n  public constructor(msg: MessageObj) {\n    typeCheck(msg)\n    this._to = msg.to\n    this._from = msg.from\n    this._nonce = msg.nonce\n    this._value = new BigNumber(msg.value || 0)\n    this._gasPremium = new BigNumber(msg.gasPremium || 0)\n    this._gasFeeCap = new BigNumber(msg.gasFeeCap || 0)\n    this._gasLimit = msg.gasLimit || 0\n    this._method = msg.method\n    this._params = msg.params\n  }\n\n  static fromZondaxType = ({\n    to,\n    from,\n    nonce,\n    value,\n    gaspremium,\n    gaslimit,\n    gasfeecap,\n    method,\n    params\n  }: ZondaxMessage): Message => {\n    return new Message({\n      to,\n      from,\n      nonce,\n      value,\n      gasPremium: gaspremium,\n      gasLimit: gaslimit,\n      gasFeeCap: gasfeecap,\n      method,\n      params\n    })\n  }\n\n  static fromLotusType = ({\n    To,\n    From,\n    Nonce,\n    Value,\n    GasPremium,\n    GasLimit,\n    GasFeeCap,\n    Method,\n    Params\n  }: LotusMessage): Message => {\n    return new Message({\n      to: To,\n      from: From,\n      nonce: Nonce,\n      value: Value,\n      gasPremium: GasPremium,\n      gasLimit: GasLimit,\n      gasFeeCap: GasFeeCap,\n      method: Method,\n      params: Params\n    })\n  }\n\n  public toLotusType = (): LotusMessage => {\n    return {\n      To: this.to,\n      From: this.from,\n      Nonce: this.nonce,\n      Value: this.value.toFixed(0, 1),\n      GasPremium: this.gasPremium.toFixed(0, 1),\n      GasFeeCap: this.gasFeeCap.toFixed(0, 1),\n      GasLimit: this.gasLimit,\n      Method: this.method,\n      Params: this.params\n    }\n  }\n\n  public toSerializeableType = (): SerializableMessage => {\n    return {\n      to: this.to,\n      from: this.from,\n      nonce: this.nonce,\n      value: this.value.toFixed(0, 1),\n      gaspremium: this.gasPremium.toFixed(0, 1),\n      gasfeecap: this.gasFeeCap.toFixed(0, 1),\n      gaslimit: this.gasLimit,\n      method: this.method,\n      params: this.params\n    }\n  }\n\n  public toZondaxType = (): ZondaxMessage => {\n    return {\n      to: this.to,\n      from: this.from,\n      nonce: this.nonce,\n      value: this.value.toFixed(0, 1),\n      gaspremium: this.gasPremium.toFixed(0, 1),\n      gasfeecap: this.gasFeeCap.toFixed(0, 1),\n      gaslimit: this.gasLimit,\n      method: this.method,\n      params: this.params || ''\n    }\n  }\n\n  public toPendingMessage = (cid: string): MessagePending => {\n    const toAddr: Address = {\n      robust: '',\n      id: ''\n    }\n\n    const fromAddr: Address = {\n      robust: '',\n      id: ''\n    }\n    if (this.to[1] === '0') toAddr.id = this.to\n    else toAddr.robust = this.to\n\n    if (this.from[1] === '0') fromAddr.id = this.from\n    else fromAddr.robust = this.from\n    return {\n      to: toAddr,\n      from: fromAddr,\n      cid,\n      method: this.method.toString(),\n      gasFeeCap: this.gasFeeCap.toString(),\n      gasLimit: this.gasLimit.toString(),\n      gasPremium: this.gasPremium.toString(),\n      params: this.params || '',\n      height: '',\n      value: this.value.toString(),\n      nonce: this.nonce.toString()\n    }\n  }\n}\n\nconst typeCheck = (msg: MessageObj): void => {\n  if (!msg.to) throw new Error('No to address provided')\n  if (!msg.from) throw new Error('No from address provided')\n\n  if (!validateAddressString(msg.to))\n    throw new Error('Invalid to address provided')\n  if (!validateAddressString(msg.from))\n    throw new Error('Invalid from address provided')\n\n  if (!msg.nonce && msg.nonce !== 0) throw new Error('No nonce provided')\n  if (typeof msg.nonce !== 'number') throw new Error('Nonce is not a number')\n  if (!(msg.nonce <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER')\n\n  if (!msg.value) throw new Error('No value provided')\n\n  if (msg.gasLimit && typeof msg.gasLimit !== 'number')\n    throw new Error('Gas limit is not a number')\n  if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER')\n\n  if (!msg.method && msg.method !== 0) throw new Error('No method provided')\n  if (typeof msg.method !== 'number') throw new Error('Method is not a number')\n  if (!(msg.method <= Number.MAX_SAFE_INTEGER))\n    throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER')\n}\n\nexport default {\n  Message\n}\n"],"file":"index.js"}