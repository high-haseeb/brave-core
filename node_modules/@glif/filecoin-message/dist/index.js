"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Message = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _filecoinAddress = require("@glif/filecoin-address");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_bignumber["default"].set({
  ROUNDING_MODE: _bignumber["default"].ROUND_HALF_DOWN
});

_bignumber["default"].config({
  EXPONENTIAL_AT: 1e9
});

var Message = /*#__PURE__*/function () {
  _createClass(Message, [{
    key: "to",
    get: function get() {
      return this._to;
    }
  }, {
    key: "from",
    get: function get() {
      return this._from;
    }
  }, {
    key: "nonce",
    get: function get() {
      return this._nonce;
    }
  }, {
    key: "method",
    get: function get() {
      return this._method;
    }
  }, {
    key: "value",
    get: function get() {
      return this._value;
    }
  }, {
    key: "gasPremium",
    get: function get() {
      return this._gasPremium;
    }
  }, {
    key: "gasFeeCap",
    get: function get() {
      return this._gasFeeCap;
    }
  }, {
    key: "gasLimit",
    get: function get() {
      return this._gasLimit;
    }
  }, {
    key: "params",
    get: function get() {
      return this._params;
    }
  }]);

  function Message(msg) {
    var _this = this;

    _classCallCheck(this, Message);

    _defineProperty(this, "_to", void 0);

    _defineProperty(this, "_from", void 0);

    _defineProperty(this, "_nonce", void 0);

    _defineProperty(this, "_method", void 0);

    _defineProperty(this, "_value", void 0);

    _defineProperty(this, "_gasPremium", void 0);

    _defineProperty(this, "_gasFeeCap", void 0);

    _defineProperty(this, "_gasLimit", void 0);

    _defineProperty(this, "_params", void 0);

    _defineProperty(this, "toLotusType", function () {
      return {
        To: _this.to,
        From: _this.from,
        Nonce: _this.nonce,
        Value: _this.value.toFixed(0, 1),
        GasPremium: _this.gasPremium.toFixed(0, 1),
        GasFeeCap: _this.gasFeeCap.toFixed(0, 1),
        GasLimit: _this.gasLimit,
        Method: _this.method,
        Params: _this.params
      };
    });

    _defineProperty(this, "toSerializeableType", function () {
      return {
        to: _this.to,
        from: _this.from,
        nonce: _this.nonce,
        value: _this.value.toFixed(0, 1),
        gaspremium: _this.gasPremium.toFixed(0, 1),
        gasfeecap: _this.gasFeeCap.toFixed(0, 1),
        gaslimit: _this.gasLimit,
        method: _this.method,
        params: _this.params
      };
    });

    _defineProperty(this, "toZondaxType", function () {
      return {
        to: _this.to,
        from: _this.from,
        nonce: _this.nonce,
        value: _this.value.toFixed(0, 1),
        gaspremium: _this.gasPremium.toFixed(0, 1),
        gasfeecap: _this.gasFeeCap.toFixed(0, 1),
        gaslimit: _this.gasLimit,
        method: _this.method,
        params: _this.params || ''
      };
    });

    _defineProperty(this, "toPendingMessage", function (cid) {
      var toAddr = {
        robust: '',
        id: ''
      };
      var fromAddr = {
        robust: '',
        id: ''
      };
      if (_this.to[1] === '0') toAddr.id = _this.to;else toAddr.robust = _this.to;
      if (_this.from[1] === '0') fromAddr.id = _this.from;else fromAddr.robust = _this.from;
      return {
        to: toAddr,
        from: fromAddr,
        cid: cid,
        method: _this.method.toString(),
        gasFeeCap: _this.gasFeeCap.toString(),
        gasLimit: _this.gasLimit.toString(),
        gasPremium: _this.gasPremium.toString(),
        params: _this.params || '',
        height: '',
        value: _this.value.toString(),
        nonce: _this.nonce.toString()
      };
    });

    typeCheck(msg);
    this._to = msg.to;
    this._from = msg.from;
    this._nonce = msg.nonce;
    this._value = new _bignumber["default"](msg.value || 0);
    this._gasPremium = new _bignumber["default"](msg.gasPremium || 0);
    this._gasFeeCap = new _bignumber["default"](msg.gasFeeCap || 0);
    this._gasLimit = msg.gasLimit || 0;
    this._method = msg.method;
    this._params = msg.params;
  }

  return Message;
}();

exports.Message = Message;

_defineProperty(Message, "fromZondaxType", function (_ref) {
  var to = _ref.to,
      from = _ref.from,
      nonce = _ref.nonce,
      value = _ref.value,
      gaspremium = _ref.gaspremium,
      gaslimit = _ref.gaslimit,
      gasfeecap = _ref.gasfeecap,
      method = _ref.method,
      params = _ref.params;
  return new Message({
    to: to,
    from: from,
    nonce: nonce,
    value: value,
    gasPremium: gaspremium,
    gasLimit: gaslimit,
    gasFeeCap: gasfeecap,
    method: method,
    params: params
  });
});

_defineProperty(Message, "fromLotusType", function (_ref2) {
  var To = _ref2.To,
      From = _ref2.From,
      Nonce = _ref2.Nonce,
      Value = _ref2.Value,
      GasPremium = _ref2.GasPremium,
      GasLimit = _ref2.GasLimit,
      GasFeeCap = _ref2.GasFeeCap,
      Method = _ref2.Method,
      Params = _ref2.Params;
  return new Message({
    to: To,
    from: From,
    nonce: Nonce,
    value: Value,
    gasPremium: GasPremium,
    gasLimit: GasLimit,
    gasFeeCap: GasFeeCap,
    method: Method,
    params: Params
  });
});

var typeCheck = function typeCheck(msg) {
  if (!msg.to) throw new Error('No to address provided');
  if (!msg.from) throw new Error('No from address provided');
  if (!(0, _filecoinAddress.validateAddressString)(msg.to)) throw new Error('Invalid to address provided');
  if (!(0, _filecoinAddress.validateAddressString)(msg.from)) throw new Error('Invalid from address provided');
  if (!msg.nonce && msg.nonce !== 0) throw new Error('No nonce provided');
  if (typeof msg.nonce !== 'number') throw new Error('Nonce is not a number');
  if (!(msg.nonce <= Number.MAX_SAFE_INTEGER)) throw new Error('Nonce must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.value) throw new Error('No value provided');
  if (msg.gasLimit && typeof msg.gasLimit !== 'number') throw new Error('Gas limit is not a number');
  if (msg.gasLimit && !(msg.gasLimit <= Number.MAX_SAFE_INTEGER)) throw new Error('Gas limit must be smaller than Number.MAX_SAFE_INTEGER');
  if (!msg.method && msg.method !== 0) throw new Error('No method provided');
  if (typeof msg.method !== 'number') throw new Error('Method is not a number');
  if (!(msg.method <= Number.MAX_SAFE_INTEGER)) throw new Error('Method must be smaller than Number.MAX_SAFE_INTEGER');
};

var _default = {
  Message: Message
};
exports["default"] = _default;
//# sourceMappingURL=index.js.map