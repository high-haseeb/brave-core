import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import axios from 'axios';
export const removeEmptyHeaders = headers => Object.fromEntries(Object.entries(headers).filter(([_key, value]) => !!value));
export const getHeaders = (headers, token) => _objectSpread(_objectSpread({}, headers), {}, {
  Accept: '*/*',
  'Content-Type': 'application/json'
}, token ? {
  Authorization: `Bearer ${token}`
} : {});
export const throwIfErrors = data => {
  if (data.error) {
    if (data.error.message) throw new Error(data.error.message);
    throw new Error(`JSON-RPC error: ${JSON.stringify(data.error)}`);
  }
};
export default class LotusRpcEngine {
  constructor(config) {
    _defineProperty(this, "apiAddress", void 0);

    _defineProperty(this, "namespace", void 0);

    _defineProperty(this, "delimeter", void 0);

    _defineProperty(this, "axiosOpts", void 0);

    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress;
    this.namespace = config.namespace || 'Filecoin';
    this.delimeter = config.delimeter || '.';
    this.axiosOpts = config.axiosOpts || {};
    this.axiosOpts.headers = getHeaders(this.axiosOpts.headers, config.token);
    this.axiosOpts.headers = removeEmptyHeaders(this.axiosOpts.headers);
  }

  async request(method, ...params) {
    const {
      data
    } = await axios.post(this.apiAddress, {
      jsonrpc: '2.0',
      method: `${this.namespace}${this.delimeter}${method}`,
      params,
      id: 1
    }, this.axiosOpts);
    throwIfErrors(data);
    return data.result;
  }

}
//# sourceMappingURL=index.js.map