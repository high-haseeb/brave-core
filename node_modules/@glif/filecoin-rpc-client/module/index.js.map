{"version":3,"sources":["../src/index.ts"],"names":["axios","removeEmptyHeaders","headers","Object","fromEntries","entries","filter","_key","value","getHeaders","token","Accept","Authorization","throwIfErrors","data","error","message","Error","JSON","stringify","LotusRpcEngine","constructor","config","apiAddress","namespace","delimeter","axiosOpts","request","method","params","post","jsonrpc","id","result"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAA+D,OAA/D;AAEA,OAAO,MAAMC,kBAAkB,GAC7BC,OADgC,IAGhCC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeH,OAAf,EAAwBI,MAAxB,CAA+B,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB,CAAC,CAACA,KAApD,CAAnB,CAHK;AAKP,OAAO,MAAMC,UAAU,GAAG,CACxBP,OADwB,EAExBQ,KAFwB,qCAIrBR,OAJqB;AAKxBS,EAAAA,MAAM,EAAE,KALgB;AAMxB,kBAAgB;AANQ,GAOpBD,KAAK,GACL;AACEE,EAAAA,aAAa,EAAG,UAASF,KAAM;AADjC,CADK,GAIL,EAXoB,CAAnB;AAcP,OAAO,MAAMG,aAAa,GAAIC,IAAD,IAAe;AAC1C,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,QAAID,IAAI,CAACC,KAAL,CAAWC,OAAf,EAAwB,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACC,KAAL,CAAWC,OAArB,CAAN;AACxB,UAAM,IAAIC,KAAJ,CAAW,mBAAkBC,IAAI,CAACC,SAAL,CAAeL,IAAI,CAACC,KAApB,CAA2B,EAAxD,CAAN;AACD;AACF,CALM;AAeP,eAAe,MAAMK,cAAN,CAAqB;AAMlCC,EAAAA,WAAW,CAACC,MAAD,EAA+B;AAAA;;AAAA;;AAAA;;AAAA;;AACxC,QAAI,CAACA,MAAL,EACE,MAAM,IAAIL,KAAJ,CACJ,8DADI,CAAN;AAGF,SAAKM,UAAL,GAAkBD,MAAM,CAACC,UAAzB;AACA,SAAKC,SAAL,GAAiBF,MAAM,CAACE,SAAP,IAAoB,UAArC;AACA,SAAKC,SAAL,GAAiBH,MAAM,CAACG,SAAP,IAAoB,GAArC;AACA,SAAKC,SAAL,GAAiBJ,MAAM,CAACI,SAAP,IAAoB,EAArC;AACA,SAAKA,SAAL,CAAexB,OAAf,GAAyBO,UAAU,CAAC,KAAKiB,SAAL,CAAexB,OAAhB,EAAyBoB,MAAM,CAACZ,KAAhC,CAAnC;AACA,SAAKgB,SAAL,CAAexB,OAAf,GAAyBD,kBAAkB,CAAC,KAAKyB,SAAL,CAAexB,OAAhB,CAA3C;AACD;;AAEY,QAAPyB,OAAO,CAAUC,MAAV,EAA0B,GAAGC,MAA7B,EAAwD;AACnE,UAAM;AAAEf,MAAAA;AAAF,QAAW,MAAMd,KAAK,CAAC8B,IAAN,CACrB,KAAKP,UADgB,EAErB;AACEQ,MAAAA,OAAO,EAAE,KADX;AAEEH,MAAAA,MAAM,EAAG,GAAE,KAAKJ,SAAU,GAAE,KAAKC,SAAU,GAAEG,MAAO,EAFtD;AAGEC,MAAAA,MAHF;AAIEG,MAAAA,EAAE,EAAE;AAJN,KAFqB,EAQrB,KAAKN,SARgB,CAAvB;AAUAb,IAAAA,aAAa,CAACC,IAAD,CAAb;AACA,WAAOA,IAAI,CAACmB,MAAZ;AACD;;AAhCiC","sourcesContent":["import axios, { AxiosRequestConfig, AxiosRequestHeaders } from 'axios'\n\nexport const removeEmptyHeaders = (\n  headers: AxiosRequestHeaders\n): AxiosRequestHeaders =>\n  Object.fromEntries(Object.entries(headers).filter(([_key, value]) => !!value))\n\nexport const getHeaders = (\n  headers?: AxiosRequestHeaders,\n  token?: string\n): AxiosRequestHeaders => ({\n  ...headers,\n  Accept: '*/*',\n  'Content-Type': 'application/json',\n  ...(token\n    ? {\n        Authorization: `Bearer ${token}`\n      }\n    : {})\n})\n\nexport const throwIfErrors = (data: any) => {\n  if (data.error) {\n    if (data.error.message) throw new Error(data.error.message)\n    throw new Error(`JSON-RPC error: ${JSON.stringify(data.error)}`)\n  }\n}\n\nexport type LotusRpcEngineConfig = {\n  apiAddress: string\n  token?: string\n  namespace?: string\n  delimeter?: string\n  axiosOpts?: AxiosRequestConfig\n}\n\nexport default class LotusRpcEngine {\n  readonly apiAddress: string\n  readonly namespace: string\n  readonly delimeter: string\n  readonly axiosOpts: AxiosRequestConfig\n\n  constructor(config: LotusRpcEngineConfig) {\n    if (!config)\n      throw new Error(\n        'Must pass a config object to the LotusRpcEngine constructor.'\n      )\n    this.apiAddress = config.apiAddress\n    this.namespace = config.namespace || 'Filecoin'\n    this.delimeter = config.delimeter || '.'\n    this.axiosOpts = config.axiosOpts || {}\n    this.axiosOpts.headers = getHeaders(this.axiosOpts.headers, config.token)\n    this.axiosOpts.headers = removeEmptyHeaders(this.axiosOpts.headers)\n  }\n\n  async request<A = any>(method: string, ...params: any[]): Promise<A> {\n    const { data } = await axios.post(\n      this.apiAddress,\n      {\n        jsonrpc: '2.0',\n        method: `${this.namespace}${this.delimeter}${method}`,\n        params,\n        id: 1\n      },\n      this.axiosOpts\n    )\n    throwIfErrors(data)\n    return data.result\n  }\n}\n"],"file":"index.js"}