{"version":3,"sources":["../src/index.ts"],"names":["axios","removeEmptyHeaders","headers","Object","fromEntries","entries","filter","_key","value","getHeaders","token","Accept","Authorization","throwIfErrors","data","error","message","Error","JSON","stringify","LotusRpcEngine","config","apiAddress","namespace","delimeter","axiosOpts","method","params","post","jsonrpc","id","result"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAA+D,OAA/D;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,OADgC;AAAA,SAGhCC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeH,OAAf,EAAwBI,MAAxB,CAA+B;AAAA;AAAA,QAAEC,IAAF;AAAA,QAAQC,KAAR;;AAAA,WAAmB,CAAC,CAACA,KAArB;AAAA,GAA/B,CAAnB,CAHgC;AAAA,CAA3B;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBP,OADwB,EAExBQ,KAFwB;AAAA,yCAIrBR,OAJqB;AAKxBS,IAAAA,MAAM,EAAE,KALgB;AAMxB,oBAAgB;AANQ,KAOpBD,KAAK,GACL;AACEE,IAAAA,aAAa,mBAAYF,KAAZ;AADf,GADK,GAIL,EAXoB;AAAA,CAAnB;AAcP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAe;AAC1C,MAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,QAAID,IAAI,CAACC,KAAL,CAAWC,OAAf,EAAwB,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACC,KAAL,CAAWC,OAArB,CAAN;AACxB,UAAM,IAAIC,KAAJ,2BAA6BC,IAAI,CAACC,SAAL,CAAeL,IAAI,CAACC,KAApB,CAA7B,EAAN;AACD;AACF,CALM;;IAecK,c;AAMnB,0BAAYC,MAAZ,EAA0C;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACxC,QAAI,CAACA,MAAL,EACE,MAAM,IAAIJ,KAAJ,CACJ,8DADI,CAAN;AAGF,SAAKK,UAAL,GAAkBD,MAAM,CAACC,UAAzB;AACA,SAAKC,SAAL,GAAiBF,MAAM,CAACE,SAAP,IAAoB,UAArC;AACA,SAAKC,SAAL,GAAiBH,MAAM,CAACG,SAAP,IAAoB,GAArC;AACA,SAAKC,SAAL,GAAiBJ,MAAM,CAACI,SAAP,IAAoB,EAArC;AACA,SAAKA,SAAL,CAAevB,OAAf,GAAyBO,UAAU,CAAC,KAAKgB,SAAL,CAAevB,OAAhB,EAAyBmB,MAAM,CAACX,KAAhC,CAAnC;AACA,SAAKe,SAAL,CAAevB,OAAf,GAAyBD,kBAAkB,CAAC,KAAKwB,SAAL,CAAevB,OAAhB,CAA3C;AACD;;;;;+FAEsBwB,M;;;;;;;;;;;;0CAAmBC,M;AAAAA,kBAAAA,M;;;;uBACjB3B,KAAK,CAAC4B,IAAN,CACrB,KAAKN,UADgB,EAErB;AACEO,kBAAAA,OAAO,EAAE,KADX;AAEEH,kBAAAA,MAAM,YAAK,KAAKH,SAAV,SAAsB,KAAKC,SAA3B,SAAuCE,MAAvC,CAFR;AAGEC,kBAAAA,MAAM,EAANA,MAHF;AAIEG,kBAAAA,EAAE,EAAE;AAJN,iBAFqB,EAQrB,KAAKL,SARgB,C;;;;AAAfX,gBAAAA,I,qBAAAA,I;AAURD,gBAAAA,aAAa,CAACC,IAAD,CAAb;iDACOA,IAAI,CAACiB,M;;;;;;;;;;;;;;;;;;;;;SA/BKX,c","sourcesContent":["import axios, { AxiosRequestConfig, AxiosRequestHeaders } from 'axios'\n\nexport const removeEmptyHeaders = (\n  headers: AxiosRequestHeaders\n): AxiosRequestHeaders =>\n  Object.fromEntries(Object.entries(headers).filter(([_key, value]) => !!value))\n\nexport const getHeaders = (\n  headers?: AxiosRequestHeaders,\n  token?: string\n): AxiosRequestHeaders => ({\n  ...headers,\n  Accept: '*/*',\n  'Content-Type': 'application/json',\n  ...(token\n    ? {\n        Authorization: `Bearer ${token}`\n      }\n    : {})\n})\n\nexport const throwIfErrors = (data: any) => {\n  if (data.error) {\n    if (data.error.message) throw new Error(data.error.message)\n    throw new Error(`JSON-RPC error: ${JSON.stringify(data.error)}`)\n  }\n}\n\nexport type LotusRpcEngineConfig = {\n  apiAddress: string\n  token?: string\n  namespace?: string\n  delimeter?: string\n  axiosOpts?: AxiosRequestConfig\n}\n\nexport default class LotusRpcEngine {\n  readonly apiAddress: string\n  readonly namespace: string\n  readonly delimeter: string\n  readonly axiosOpts: AxiosRequestConfig\n\n  constructor(config: LotusRpcEngineConfig) {\n    if (!config)\n      throw new Error(\n        'Must pass a config object to the LotusRpcEngine constructor.'\n      )\n    this.apiAddress = config.apiAddress\n    this.namespace = config.namespace || 'Filecoin'\n    this.delimeter = config.delimeter || '.'\n    this.axiosOpts = config.axiosOpts || {}\n    this.axiosOpts.headers = getHeaders(this.axiosOpts.headers, config.token)\n    this.axiosOpts.headers = removeEmptyHeaders(this.axiosOpts.headers)\n  }\n\n  async request<A = any>(method: string, ...params: any[]): Promise<A> {\n    const { data } = await axios.post(\n      this.apiAddress,\n      {\n        jsonrpc: '2.0',\n        method: `${this.namespace}${this.delimeter}${method}`,\n        params,\n        id: 1\n      },\n      this.axiosOpts\n    )\n    throwIfErrors(data)\n    return data.result\n  }\n}\n"],"file":"index.js"}