import * as React from 'react';
import { StyledLabel, StyledBox, StyledText } from './style';
import { CheckIcon } from '../../icons';
function onKeyPressForAction(handler, event) {
    if ([' ', 'Enter'].includes(event.key)) {
        handler();
    }
}
export default class Checkbox extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.generateChecks = (children) => {
            const self = this;
            return React.Children.map(children, (child, i) => {
                if (child.props['data-key'] === undefined) {
                    return null;
                }
                const element = child.props.children;
                const key = child.props['data-key'];
                const selected = self.props.value[key] || false;
                const onClick = self.onOptionClick.bind(self, key, child, selected);
                return (React.createElement(StyledLabel, { key: `checkbox-${i}`, "data-testid": `checkbox-child-${i}`, role: 'checkbox', "aria-checked": selected ? 'true' : 'false', tabIndex: self.props.disabled ? undefined : 0, onClick: !self.props.disabled ? onClick : undefined, onKeyPress: !self.props.disabled ? onKeyPressForAction.bind(null, onClick) : undefined, type: self.props.type, size: self.props.size, disabled: self.props.disabled, selected: selected },
                    React.createElement(StyledBox, null, selected ? React.createElement(CheckIcon, null) : null),
                    React.createElement(StyledText, { disabled: self.props.disabled, size: self.props.size }, element)));
            });
        };
        this.onOptionClick = (key, child, selected) => {
            const multiple = this.props.multiple;
            const checked = this.props.value;
            let newState = {};
            selected = !selected;
            Object.keys(this.props.value).map((item) => {
                newState[item] = multiple ? checked[item] : false;
                if (key === item) {
                    newState[item] = selected;
                }
            });
            if (this.props.onChange) {
                this.props.onChange(key, selected, child, newState);
            }
        };
    }
    render() {
        const { id, testId, children } = this.props;
        const num = React.Children.count(children);
        let data = null;
        if (num > 0) {
            data = this.generateChecks(children);
        }
        return (React.createElement("div", { id: id, "data-test-id": testId }, data));
    }
}
Checkbox.defaultProps = {
    type: 'light',
    size: 'small',
    disabled: false,
    multiple: false
};
//# sourceMappingURL=index.js.map