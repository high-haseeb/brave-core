import * as React from 'react';
import { StyledWrapper, StyledSelect, StyledOptions, StyledOption, StyledSelectWrapper, StyledSelectText, StyledSelectArrow, StyledOptionCheck, StyledOptionText, StyledOptionsOverlay, StyledOptionsModal, StyledSelectTitle, StyledModalContent, StyledRadioOptions } from './style';
import { Radio } from '../../';
import { CheckIcon, CaratDownIcon } from '../../icons';
export default class Select extends React.PureComponent {
    constructor(props) {
        super(props);
        this.getRadioOptions = (value, children) => {
            const currentValue = this.state.value;
            let options = {};
            React.Children.map(children, (child, i) => {
                if (child.props['data-value'] === undefined) {
                    return null;
                }
                const value = child.props['data-value'];
                const selected = value === currentValue;
                return options[value] = selected;
            });
            return options;
        };
        this.onRadioOptionClick = (key, selected, child, all) => {
            this.setState({
                value: key,
                radioShown: false
            });
            if (this.props.onChange) {
                this.props.onChange(key, child);
            }
        };
        this.onOverlayClick = (event) => {
            if (event.target.hasAttribute('data-overlay')) {
                this.setState({
                    radioShown: false
                });
            }
        };
        this.styledModalOverlay = (value, children) => {
            if (!this.state.radioShown) {
                return null;
            }
            return (React.createElement(StyledOptionsOverlay, { "data-overlay": 'overlay', onClick: this.onOverlayClick },
                React.createElement(StyledOptionsModal, null,
                    React.createElement(StyledModalContent, null,
                        this.props.title
                            ? React.createElement(StyledSelectTitle, null, this.props.title)
                            : null,
                        React.createElement(StyledRadioOptions, null,
                            React.createElement(Radio, { size: 'big', disabled: false, onChange: this.onRadioOptionClick, value: this.getRadioOptions(value, children) }, this.props.children))))));
        };
        this.generateOptions = (value, children, showAllContents) => {
            const self = this;
            return React.Children.map(children, (child, i) => {
                if (child.props['data-value'] === undefined) {
                    return null;
                }
                const element = child.props.children;
                const value = child.props['data-value'];
                const selected = value === self.state.value;
                return (React.createElement(StyledOption, { showAllContents: showAllContents, key: `${self.props.id}-option-${i}`, onClick: self.onOptionClick.bind(self, value, child), selected: selected },
                    React.createElement(StyledOptionCheck, null, selected ? React.createElement(CheckIcon, null) : null),
                    React.createElement(StyledOptionText, { showAllContents: showAllContents }, element)));
            });
        };
        this.onOptionClick = (value, child) => {
            this.setState({
                value: value,
                show: false
            });
            if (this.props.onChange) {
                this.props.onChange(value, child);
            }
        };
        this.isTouchscreen = () => {
            return 'ontouchstart' in window;
        };
        this.onSelectClick = () => {
            if (!this.isTouchscreen()) {
                this.setState({
                    show: !this.state.show
                });
                return;
            }
            this.setState({
                radioShown: true
            });
        };
        this.onBlur = () => {
            this.setState({
                show: false
            });
        };
        this.state = {
            value: this.getDefaultValue(props).value,
            show: false,
            radioShown: false
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.setState({
                value: this.getDefaultValue(this.props).value,
                show: false
            });
        }
    }
    getDefaultValue(props) {
        const children = React.Children.toArray(props.children);
        let child;
        const value = (props.value || '').toString();
        child = children.find((child) => child.props['data-value'] === value);
        if (child === undefined && children) {
            child = children.find((child) => child && child.props['data-value'] !== undefined);
        }
        if (!child || !child.props) {
            return {
                value: '',
                selected: null
            };
        }
        return {
            value: child.props['data-value'],
            selected: child.props.children
        };
    }
    render() {
        const { id, children, disabled, value, type, floating, showAllContents } = this.props;
        const num = React.Children.count(children);
        let data = null;
        if (num > 0) {
            data = this.generateOptions(value, children, showAllContents);
        }
        return (React.createElement(StyledWrapper, { id: id }, num > 0
            ? React.createElement(StyledSelectWrapper, { tabIndex: 0, onBlur: this.onBlur },
                React.createElement(StyledSelect, { onClick: !disabled ? this.onSelectClick : undefined, disabled: disabled, show: this.state.show, type: type, floating: floating },
                    React.createElement(StyledSelectText, { floating: floating }, this.getDefaultValue(this.props).selected),
                    React.createElement(StyledSelectArrow, { floating: floating },
                        React.createElement(CaratDownIcon, null))),
                React.createElement(StyledOptions, { show: this.state.show, showAllContents: showAllContents }, data),
                this.styledModalOverlay(value, children))
            : null));
    }
}
Select.defaultProps = {
    type: 'light'
};
//# sourceMappingURL=index.js.map