import * as React from 'react';
import { capitalize } from '../../helpers';
import { StyledSwitchButtonWrapper, StyledSwitchButtonLabel, StyledSwitchButton } from './style';
class SwitchButton extends React.PureComponent {
    constructor(props) {
        super(props);
        this.state = { checked: props.checked };
        this.handleChange = this.handleChange.bind(this);
    }
    componentWillReceiveProps(nextProps) {
        if ('checked' in nextProps) {
            this.setState({ checked: nextProps.checked });
        }
    }
    handleChange(e) {
        const { props } = this;
        if (props.disabled) {
            return;
        }
        if (!('checked' in props)) {
            this.setState({ checked: e.target.checked });
        }
        props.onChange({
            target: {
                checked: e.target.checked,
                id: e.target.id
            }
        });
    }
    getLabel(side) {
        return (React.createElement(StyledSwitchButtonLabel, { id: `${this.props.id + capitalize(side)}Text`, htmlFor: this.props.id, switchSize: this.props.switchSize, customStyle: this.props.customStyle }, side === 'left' ? this.props.leftText : this.props.rightText));
    }
    render() {
        const { id, readOnly, disabled, autoFocus, switchSize = 'medium', rightText, leftText } = this.props;
        const { checked } = this.state;
        return (React.createElement(StyledSwitchButtonWrapper, { disabled: disabled },
            leftText && this.getLabel('left'),
            React.createElement(StyledSwitchButton, { type: 'checkbox', id: id, checked: !!checked, readOnly: readOnly, disabled: disabled, autoFocus: autoFocus, switchSize: switchSize, onChange: this.handleChange }),
            rightText && this.getLabel('right')));
    }
}
export default SwitchButton;
//# sourceMappingURL=index.js.map