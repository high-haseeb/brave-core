import { SvelteComponentTyped } from "svelte";
import type { AlertMode, AlertType } from './alert.svelte';
type Action = {
    kind?: ButtonKind;
    isDisabled?: boolean;
    isLoading?: boolean;
    component?: ComponentType<SvelteComponent>;
    action: (alert: AlertInfo) => void;
} & ({
    text: string;
    icon?: IconName;
} | {
    icon: IconName;
    text?: string;
});
export interface AlertOptions {
    mode: AlertMode;
    type: AlertType;
    content: string;
    title?: string;
    icon?: IconName;
    component?: ComponentType<SvelteComponent>;
    actions: Action[];
}
declare class AlertInfo {
    #private;
    id: number;
    mode: AlertMode;
    type: AlertType;
    content: string;
    title?: string;
    icon?: IconName;
    component?: ComponentType<SvelteComponent>;
    actions: Action[];
    duration?: number;
    canDismiss?: boolean;
    constructor(options: AlertOptions, duration?: number, canDismiss?: boolean);
    pauseDismiss(): void;
    resumeDismiss(): void;
    dismiss(): void;
    updateAlert(update: Partial<AlertOptions>): void;
}
export declare const showAlert: (options: AlertOptions, duration?: number, canDismiss?: boolean) => AlertInfo;
import type { ButtonKind } from '../button/props';
import type { ComponentType, SvelteComponent } from 'svelte';
import type { IconName } from '../../../icons/meta';
declare const __propDef: {
    props: {
        position?: `${'top' | 'bottom'}-${'left' | 'right' | 'center'}`;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type AlertCenterProps = typeof __propDef.props;
export type AlertCenterEvents = typeof __propDef.events;
export type AlertCenterSlots = typeof __propDef.slots;
export default class AlertCenter extends SvelteComponentTyped<AlertCenterProps, AlertCenterEvents, AlertCenterSlots> {
}
export {};
