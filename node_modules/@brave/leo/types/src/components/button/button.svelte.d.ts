import { SvelteComponentTyped } from "svelte";
declare class __sveltets_Render<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> {
    props(): ({
        kind?: "hero" | "filled" | "outline" | "plain" | "plain-faint";
        size?: "small" | "jumbo" | "large" | "medium" | "tiny";
        fab?: boolean;
        onClick?: (e: MouseEvent) => void;
    } & Omit<Partial<import("svelte/elements").HTMLButtonAttributes>, "size" | "href" | "hreflang"> & {
        isDisabled?: Disabled;
        isLoading?: boolean;
        href?: never;
    }) | ({
        kind?: "hero" | "filled" | "outline" | "plain" | "plain-faint";
        size?: "small" | "jumbo" | "large" | "medium" | "tiny";
        fab?: boolean;
        onClick?: (e: MouseEvent) => void;
    } & Omit<Partial<import("svelte/elements").HTMLAnchorAttributes>, "size" | "href" | "hreflang"> & {
        href: Href;
    });
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        loading: {};
        default: {};
        'icon-before': {};
        'icon-after': {};
    };
}
export type ButtonProps<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['props']>;
export type ButtonEvents<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['events']>;
export type ButtonSlots<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['slots']>;
export default class Button<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> extends SvelteComponentTyped<ButtonProps<Href, Disabled>, ButtonEvents<Href, Disabled>, ButtonSlots<Href, Disabled>> {
}
export {};
