import { SvelteComponentTyped } from "svelte";
export type InputEventDetail = {
    innerEvent: Event & {
        target: HTMLInputElement;
    };
    value: string;
    valueAsNumber: number;
    valueAsDate: Date | null;
};
export type InputEvent = (detail: InputEventDetail) => void;
import { type Mode, type Size } from '../formItem/formItem.svelte';
declare const __propDef: {
    props: Omit<import("svelte/elements").HTMLInputAttributes, "value" | "size" | "type" | "class" | `on:${string}`> & {
        type?: "number" | "hidden" | "search" | "time" | "text" | "color" | "date" | "tel" | "url" | "email" | "file" | "range" | "datetime-local" | "month" | "password" | "week";
        value?: string | number | boolean;
        size?: Size;
        showErrors?: boolean;
        mode?: Mode | undefined;
        onChange?: InputEvent;
        onInput?: InputEvent;
        onFocus?: InputEvent;
        onPaste?: InputEvent;
        onBlur?: InputEvent;
        onKeyDown?: InputEvent;
        onKeyPress?: InputEvent;
        onKeyUp?: InputEvent;
        onFocusIn?: InputEvent;
        onFocusOut?: InputEvent;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        'left-icon': {
            slot: string;
        };
        extra: {};
        'right-icon': {
            slot: string;
        };
        default: {
            slot: string;
        };
        errors: {};
    };
};
export type InputProps = typeof __propDef.props;
export type InputEvents = typeof __propDef.events;
export type InputSlots = typeof __propDef.slots;
export default class Input extends SvelteComponentTyped<InputProps, InputEvents, InputSlots> {
}
export {};
