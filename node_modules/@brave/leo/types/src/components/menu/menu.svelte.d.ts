import { SvelteComponentTyped } from "svelte";
import type { HTMLAttributes } from 'svelte/elements';
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'leo-menu-item': HTMLAttributes<HTMLElement> & {
                key?: string | number | null;
                children?: any;
                onClick?: EventListener;
            };
            'leo-option': HTMLAttributes<HTMLElement> & {
                key?: string | number | null;
                value?: string;
                children?: any;
            };
        }
    }
}
export interface CloseEventDetail {
    originalEvent: Event;
    reason: 'select' | 'blur' | 'cancel';
}
export type CloseEvent = (detail: CloseEventDetail) => boolean | undefined | void;
export interface SelectItemEventDetail {
    value: string | undefined;
}
import { type Strategy } from '@floating-ui/dom';
declare const __propDef: {
    props: {
        isOpen?: boolean;
        target?: HTMLElement | undefined;
        currentValue?: string | undefined;
        positionStrategy?: Strategy;
        onClose?: CloseEvent;
        onSelectItem?: (detail: SelectItemEventDetail) => void;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export type MenuProps = typeof __propDef.props;
export type MenuEvents = typeof __propDef.events;
export type MenuSlots = typeof __propDef.slots;
export default class Menu extends SvelteComponentTyped<MenuProps, MenuEvents, MenuSlots> {
}
export {};
