import { SvelteComponentTyped } from "svelte";
import type { IconName } from '../../../icons/meta';
declare class __sveltets_Render<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> {
    props(): ({
        outsideList?: boolean;
        icon?: IconName;
        onClick?: () => void;
    } & Omit<Partial<import("svelte/elements").HTMLButtonAttributes>, "size" | "href" | "hreflang"> & {
        isDisabled?: Disabled;
        isLoading?: boolean;
        href?: never;
    }) | ({
        outsideList?: boolean;
        icon?: IconName;
        onClick?: () => void;
    } & Omit<Partial<import("svelte/elements").HTMLAnchorAttributes>, "size" | "href" | "hreflang"> & {
        href: Href;
        isCurrent?: boolean;
    });
    events(): {} & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {
        default: {};
        subnav: {};
    };
}
export type NavigationItemProps<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['props']>;
export type NavigationItemEvents<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['events']>;
export type NavigationItemSlots<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> = ReturnType<__sveltets_Render<Href, Disabled>['slots']>;
export default class NavigationItem<Href extends string | undefined, Disabled extends undefined extends Href ? boolean : undefined> extends SvelteComponentTyped<NavigationItemProps<Href, Disabled>, NavigationItemEvents<Href, Disabled>, NavigationItemSlots<Href, Disabled>> {
}
export {};
