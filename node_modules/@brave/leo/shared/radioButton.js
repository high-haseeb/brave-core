import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, c as create_slot, e as element, b as space, d as attr, t as toggle_class, f as insert, g as append, l as listen, h as transition_out, j as check_outros, k as transition_in, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, o as detach, p as group_outros, q as create_component, v as mount_component, Z as create_out_transition, y as destroy_component, w as add_render_callback, x as create_bidirectional_transition, I as text, J as set_data } from './a4e1d370.js';
import { p as preloadIcon, I as Icon } from './58debee4.js';
import { s as scale, f as fade } from './4b0b9071.js';

/* src/components/radioButton/radioButton.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1j5q2iu", ":host{display:inline-block}.leo-radiobutton.svelte-1j5q2iu.svelte-1j5q2iu.svelte-1j5q2iu{--focus-border-radius:var(--leo-radiobutton-focus-border-radius, 2px);--label-gap:var(--leo-radiobutton-label-gap, var(--leo-spacing-m));--flex-direction:var(--leo-radiobutton-flex-direction, row);--checked-color:var(\n    --leo-radiobutton-checked-color,\n    var(--leo-color-icon-interactive)\n  );--checked-color-hover:var(\n    --leo-radiobutton-checked-color-hover,\n    var(--leo-color-primary-70)\n  );--unchecked-color:var(\n    --leo-radiobutton-unchecked-color,\n    var(--leo-color-icon-default)\n  );--unchecked-color-hover:var(\n    --leo-radiobutton-unchecked-color-hover,\n    var(--leo-color-neutral-70)\n  );--disabled-color:var(\n    --leo-radiobutton-disabled-color,\n    var(--leo-color-text-disabled)\n  );--font:var(--leo-radiobutton-font, var(--leo-font-default-regular));--radiobutton-size:var(--leo-radiobutton-radiobutton-size, 20px);display:flex;flex-direction:var(--flex-direction);align-items:center;gap:var(--label-gap);cursor:pointer;-webkit-tap-highlight-color:transparent;font:var(--font)}.leo-radiobutton.disabled.svelte-1j5q2iu.svelte-1j5q2iu.svelte-1j5q2iu{cursor:not-allowed}.leo-radiobutton.small.svelte-1j5q2iu.svelte-1j5q2iu.svelte-1j5q2iu{--radiobutton-size:var(--leo-radiobutton-radiobutton-size, 16px)}.leo-radiobutton.disabled.svelte-1j5q2iu.svelte-1j5q2iu.svelte-1j5q2iu{color:var(--disabled-color)}.leo-radiobutton.disabled.svelte-1j5q2iu .check.svelte-1j5q2iu.svelte-1j5q2iu{color:var(--disabled-color) !important}.leo-radiobutton.svelte-1j5q2iu .check.svelte-1j5q2iu.svelte-1j5q2iu{--leo-icon-size:var(--radiobutton-size);position:relative;width:var(--radiobutton-size);height:var(--radiobutton-size);transition:box-shadow 0.12s ease-in-out;border-radius:var(--leo-radius-full);color:var(--unchecked-color)}.leo-radiobutton.svelte-1j5q2iu .check.svelte-1j5q2iu.svelte-1j5q2iu:has(input:checked){color:var(--checked-color)}.leo-radiobutton.svelte-1j5q2iu .check.svelte-1j5q2iu>input.svelte-1j5q2iu{opacity:0}.leo-radiobutton.svelte-1j5q2iu .check.svelte-1j5q2iu>div.svelte-1j5q2iu{position:absolute;top:0;bottom:0;left:0;right:0}.leo-radiobutton.svelte-1j5q2iu .check.svelte-1j5q2iu.svelte-1j5q2iu:has(input:focus-visible){box-shadow:0px 0px 0px 1.5px rgba(255, 255, 255, 0.5), 0px 0px 4px 2px #423eee}.leo-radiobutton.svelte-1j5q2iu:hover .check.svelte-1j5q2iu.svelte-1j5q2iu{color:var(--unchecked-color-hover)}.leo-radiobutton.svelte-1j5q2iu:hover .check.svelte-1j5q2iu.svelte-1j5q2iu:has(input:checked){color:var(--checked-color-hover)}");
}

// (53:4) {:else}
function create_else_block(ctx) {
	let div;
	let icon;
	let div_outro;
	let current;
	icon = new Icon({ props: { name: "radio-unchecked" } });

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			attr(div, "class", "svelte-1j5q2iu");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);

			if (local) {
				div_outro = create_out_transition(div, fade, transition);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(icon);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (49:4) {#if currentValue === value && currentValue}
function create_if_block(ctx) {
	let div;
	let icon;
	let div_transition;
	let current;
	icon = new Icon({ props: { name: "radio-checked" } });

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			attr(div, "class", "svelte-1j5q2iu");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!div_transition) div_transition = create_bidirectional_transition(div, scale, transition, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, scale, transition, false);
				div_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(icon);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (59:8) {value}
function fallback_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*value*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t, /*value*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	let label;
	let div;
	let input;
	let input_checked_value;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*currentValue*/ ctx[0] === /*value*/ ctx[1] && /*currentValue*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		c() {
			label = element("label");
			div = element("div");
			input = element("input");
			t0 = space();
			if_block.c();
			t1 = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(input, "type", "radio");
			attr(input, "name", /*name*/ ctx[2]);
			input.checked = input_checked_value = /*currentValue*/ ctx[0] === /*value*/ ctx[1];
			attr(input, "class", "svelte-1j5q2iu");
			attr(div, "class", "check svelte-1j5q2iu");
			attr(label, "class", "leo-radiobutton svelte-1j5q2iu");
			toggle_class(label, "small", /*size*/ ctx[3] === 'small');
			toggle_class(label, "disabled", /*isDisabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, div);
			append(div, input);
			append(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append(label, t1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(input, "change", /*changed*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 4) {
				attr(input, "name", /*name*/ ctx[2]);
			}

			if (!current || dirty & /*currentValue, value*/ 3 && input_checked_value !== (input_checked_value = /*currentValue*/ ctx[0] === /*value*/ ctx[1])) {
				input.checked = input_checked_value;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*value*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*size*/ 8) {
				toggle_class(label, "small", /*size*/ ctx[3] === 'small');
			}

			if (!current || dirty & /*isDisabled*/ 16) {
				toggle_class(label, "disabled", /*isDisabled*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(label);
			}

			if_blocks[current_block_type_index].d();
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

let sizes = ['small', 'normal'];
const transition = { duration: 120 };
preloadIcon('radio-checked');
preloadIcon('radio-unchecked');
const tagName = 'leo-radiobutton';

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { currentValue } = $$props;
	let { value } = $$props;
	let { name } = $$props;
	let { size = 'normal' } = $$props;
	let { isDisabled = false } = $$props;
	let { onChange } = $$props;

	const changed = e => {
		var _a, _b;

		if (isDisabled || !((_a = e.currentTarget) === null || _a === void 0
		? void 0
		: _a.checked)) return;

		// If we're in a custom element, make sure we update all the
		// other elements in our group, to make the behavior the same
		// as the built in radio.
		const maybeElement = (_b = e.currentTarget.getRootNode()) === null || _b === void 0
		? void 0
		: _b.host;

		if (maybeElement && maybeElement.tagName === tagName.toUpperCase()) {
			// Note: We query the rootNode containing the element so we work
			// even when our element is contained inside another shadowRoot.
			const elements = maybeElement.getRootNode().querySelectorAll(`${tagName}[name=${name}]`);

			for (const el of elements) el.currentValue = value;
		}

		$$invalidate(0, currentValue = value);

		onChange === null || onChange === void 0
		? void 0
		: onChange({ value });
	};

	$$self.$$set = $$props => {
		if ('currentValue' in $$props) $$invalidate(0, currentValue = $$props.currentValue);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('name' in $$props) $$invalidate(2, name = $$props.name);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
		if ('isDisabled' in $$props) $$invalidate(4, isDisabled = $$props.isDisabled);
		if ('onChange' in $$props) $$invalidate(6, onChange = $$props.onChange);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [currentValue, value, name, size, isDisabled, changed, onChange, $$scope, slots];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				currentValue: 0,
				value: 1,
				name: 2,
				size: 3,
				isDisabled: 4,
				onChange: 6
			},
			add_css
		);
	}
}

export { RadioButton as default, sizes };
//# sourceMappingURL=radioButton.js.map
