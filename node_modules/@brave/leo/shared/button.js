import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, B as empty, f as insert, k as transition_in, h as transition_out, o as detach, R as compute_rest_props, F as compute_slots, P as assign, T as exclude_internal_props, e as element, W as set_dynamic_element_data, t as toggle_class, l as listen, K as is_function, p as group_outros, j as check_outros, c as create_slot, b as space, d as attr, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, q as create_component, v as mount_component, y as destroy_component, I as text } from './a4e1d370.js';
import { g as get_spread_update } from './d682c58e.js';
import ProgressRing from './progressRing.js';

/* src/components/button/button.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1mfuzhy", ":host-context(:root),:host-context(:root[data-theme][data-theme=light]),:host-context([data-theme][data-theme=light]){--\\.leoButton\\.isOutline_--border-color-hover:var(--leo-color-primary-40);--\\.leoButton\\.isPlain_--bg-hover-mix:5%;--\\.leoButton\\.isPlainFaint_--foreground:black;--\\.leoButton\\.isPlainFaint_--bg-hover-mix:5%}:host-context(:root[data-theme][data-theme=dark]),:host-context([data-theme][data-theme=dark]){--\\.leoButton\\.isOutline_--border-color-hover:var(--leo-color-primitive-primary-60);--\\.leoButton\\.isPlain_--bg-hover-mix:10%;--\\.leoButton\\.isPlainFaint_--foreground:white;--\\.leoButton\\.isPlainFaint_--bg-hover-mix:10%}@media(prefers-color-scheme: dark){:host-context(:root){--\\.leoButton\\.isOutline_--border-color-hover:var(--leo-color-primitive-primary-60);--\\.leoButton\\.isPlain_--bg-hover-mix:10%;--\\.leoButton\\.isPlainFaint_--foreground:white;--\\.leoButton\\.isPlainFaint_--bg-hover-mix:10%}}:host{display:inline-block;flex-grow:1;container-type:normal}:host button.svelte-1mfuzhy.svelte-1mfuzhy{width:100%}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy{--foreground:var(--leo-color-text-primary);--background:var(--leo-color-container-background);--primary-color:var(\n    --leo-button-color,\n    var(--leo-color-button-background)\n  );--mixed-primary-color:var(--primary-color)}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy,.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:visited:not(:hover){--default-transition:box-shadow 0.12s ease-in-out, color 0.12s ease-in-out,\n    border-color 0.12s ease-in-out, opacity 0.12s ease-in-out;--box-shadow-hover:var(--leo-effect-elevation-02);--box-shadow-focus:var(--leo-effect-focus-state);--radius:0;--border-color:transparent;--border-width:0px;--leo-icon-color:var(--icon-color);--leo-progressring-size:var(--leo-icon-size);--leo-progressring-color:var(--icon-color);display:flex;justify-content:center;align-items:center;cursor:pointer;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transition:background 0.12s ease-in-out, var(--default-transition);box-shadow:none;border:solid var(--border-width, 1px) var(--border-color, transparent);border-radius:var(--leo-button-radius, var(--radius));background:var(--bg);color:var(--color);text-decoration:none;padding:var(--leo-button-padding, calc(var(--padding-y) - var(--border-width)) var(--padding-x));max-height:max-content}.leoButton.fab.svelte-1mfuzhy.svelte-1mfuzhy,.leoButton:visited:not(:hover).fab.svelte-1mfuzhy.svelte-1mfuzhy{max-width:max-content}.leoButton.svelte-1mfuzhy .content.svelte-1mfuzhy,.leoButton.svelte-1mfuzhy:visited:not(:hover) .content.svelte-1mfuzhy{padding:0 var(--icon-gap)}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(:has(> *)),.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:visited:not(:hover):not(:has(> *)){padding-left:var(--leo-button-padding, calc(var(--padding-x) + var(--icon-gap)));padding-right:var(--leo-button-padding, calc(var(--padding-x) + var(--icon-gap)))}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled):hover,.leoButton:not(:disabled) [data-is-button-target]:hover :host .leoButton.svelte-1mfuzhy.svelte-1mfuzhy{--leo-icon-color:var(--icon-hover-color, var(--icon-color));--mixed-primary-color:var(--leo-color-primary-70);background:var(--bg-hover, var(--bg));color:var(--color-hover, var(--color));box-shadow:var(--box-shadow-hover);border-color:var(--border-color-hover, var(--border-color))}@supports (color: color-mix(in srgb, transparent, transparent)){.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled):hover,.leoButton:not(:disabled) [data-is-button-target]:hover :host .leoButton.svelte-1mfuzhy.svelte-1mfuzhy{--mixed-primary-color:color-mix(\n      in srgb,\n      var(--primary-color),\n      var(--foreground) 20%\n    )}}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled):active{opacity:0.75;background:var(--bg-active, var(--bg));color:var(--color-active, var(--color-hover, var(--color)))}.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled):focus-visible{outline:none;color:var(--color-focus, var(--color));box-shadow:var(--box-shadow-focus);background:var(--bg-focus, var(--bg));border-color:var(--border-color-focus, var(--border-color))}.leoButton.isLoading.svelte-1mfuzhy.svelte-1mfuzhy{opacity:0.75;background:var(--bg-loading, var(--bg));color:var(--color-loading, var(--color))}:host:disabled .leoButton.svelte-1mfuzhy.svelte-1mfuzhy,.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:disabled{cursor:auto}:host:disabled .leoButton.svelte-1mfuzhy.svelte-1mfuzhy:not(.isLoading),.leoButton.svelte-1mfuzhy.svelte-1mfuzhy:disabled:not(.isLoading){--icon-color:var(--leo-color-icon-disabled);background:var(--bg-disabled, var(--bg));color:var(--leo-color-text-disabled);border-color:var(--leo-color-button-disabled)}.leoButton.isTiny.svelte-1mfuzhy.svelte-1mfuzhy{font:var(--leo-font-components-button-small);min-height:28px;--padding-y:var(--leo-spacing-s);--padding-x:var(--leo-spacing-m);--radius:var(--leo-radius-m);--leo-icon-size:var(--leo-icon-xs);--icon-gap:var(--leo-spacing-m)}.leoButton.isTiny.fab.svelte-1mfuzhy.svelte-1mfuzhy{min-height:0;--padding-x:6px;--padding-y:6px}.leoButton.isSmall.svelte-1mfuzhy.svelte-1mfuzhy{font:var(--leo-font-components-button-small);min-height:36px;--padding-y:var(--leo-spacing-m);--padding-x:var(--leo-spacing-l);--radius:var(--leo-radius-m);--leo-icon-size:var(--leo-icon-s);--icon-gap:var(--leo-spacing-m)}.leoButton.isSmall.fab.svelte-1mfuzhy.svelte-1mfuzhy{min-height:0;--padding-x:var(--leo-spacing-m)}.leoButton.isMedium.svelte-1mfuzhy.svelte-1mfuzhy{font:var(--leo-font-components-button-default);min-height:44px;--padding-y:var(--leo-spacing-l);--padding-x:var(--leo-spacing-xl);--radius:var(--leo-radius-l);--leo-icon-size:var(--leo-icon-m);--icon-gap:var(--leo-spacing-m)}.leoButton.isMedium.fab.svelte-1mfuzhy.svelte-1mfuzhy{min-height:0;--padding-x:var(--leo-spacing-l);--padding-y:var(--leo-spacing-l)}.leoButton.isLarge.svelte-1mfuzhy.svelte-1mfuzhy{font:var(--leo-font-components-button-large);min-height:52px;--padding-y:var(--leo-spacing-l);--padding-x:var(--leo-spacing-xl);--radius:var(--leo-radius-xl);--leo-icon-size:var(--leo-icon-m);--icon-gap:10px}.leoButton.isLarge.fab.svelte-1mfuzhy.svelte-1mfuzhy{min-height:0;--padding-x:var(--leo-spacing-xl);--padding-y:var(--leo-spacing-xl)}.leoButton.isJumbo.svelte-1mfuzhy.svelte-1mfuzhy{font:var(--leo-font-components-button-jumbo);min-height:60px;--padding-y:var(--leo-spacing-xl);--padding-x:var(--leo-spacing-xl);--radius:var(--leo-radius-xl);--leo-icon-size:var(--leo-icon-l);--icon-gap:var(--leo-spacing-l)}.leoButton.isJumbo.fab.svelte-1mfuzhy.svelte-1mfuzhy{min-height:0;--padding-x:18px;--padding-y:18px}.leoButton.isFilled.svelte-1mfuzhy.svelte-1mfuzhy{--bg:var(--mixed-primary-color);--bg-disabled:var(--leo-color-button-disabled);--color:var(--leo-color-schemes-on-primary);--icon-color:var(--color)}@container style(--leo-button-color){.leoButton.isFilled.svelte-1mfuzhy.svelte-1mfuzhy{--color:white}}.leoButton.isOutline.svelte-1mfuzhy.svelte-1mfuzhy{--bg:transparent;--bg-active:--leo-color-neutral-20;--color:var(--leo-color-text-interactive);--border-width:1px;--border-color:var(--leo-color-divider-interactive);--border-color-focus:var(--leo-color-divider-interactive);--box-shadow-focus:0px 0px 0px 2px #423eee,\n    0px 0px 0px 1px rgba(255, 255, 255, 0.3);--icon-color:var(--color);--border-color-hover:var(--\\.leoButton\\.isOutline_--border-color-hover)}@container style(--leo-button-color){.leoButton.isOutline.svelte-1mfuzhy.svelte-1mfuzhy{--color:var(--mixed-primary-color)}}@supports (color: color-mix(in srgb, transparent, transparent)){.leoButton.isOutline.svelte-1mfuzhy.svelte-1mfuzhy{--border-color:color-mix(\n      in srgb,\n      var(--primary-color),\n      var(--background) 50%\n    );--border-color-hover:var(--primary-color)}}.leoButton.isPlain.svelte-1mfuzhy.svelte-1mfuzhy{--color:var(--leo-color-text-interactive);--box-shadow-hover:none;--bg-hover-mix:var(--\\.leoButton\\.isPlain_--bg-hover-mix)}@container style(--leo-button-color){.leoButton.isPlain.svelte-1mfuzhy.svelte-1mfuzhy{--color:var(--mixed-primary-color)}}@supports (color: color-mix(in srgb, transparent, transparent)){.leoButton.isPlain.svelte-1mfuzhy.svelte-1mfuzhy{--bg-hover:color-mix(\n      in srgb,\n      var(--primary-color) var(--bg-hover-mix),\n      var(--background)\n    )}}.leoButton.isPlain.svelte-1mfuzhy.svelte-1mfuzhy:disabled:not(.isLoading){--color:var(--leo-color-text-primary)}.leoButton.isPlain.fab.svelte-1mfuzhy.svelte-1mfuzhy{--radius:var(--leo-radius-m);--bg-hover:transparent;--padding-y:0;--padding-x:0}.leoButton.isPlainFaint.svelte-1mfuzhy.svelte-1mfuzhy{--primary-color:currentColor;--color:var(--mixed-primary-color);--box-shadow-hover:none;--icon-color:var(--mixed-primary-color);--foreground:var(--\\.leoButton\\.isPlainFaint_--foreground);--bg-hover-mix:var(--\\.leoButton\\.isPlainFaint_--bg-hover-mix)}@supports (color: color-mix(in srgb, transparent, transparent)){.leoButton.isPlainFaint.svelte-1mfuzhy.svelte-1mfuzhy{--icon-color:color-mix(\n      in srgb,\n      var(--primary-color),\n      var(--background) 30%\n    );--icon-hover-color:color-mix(\n      in srgb,\n      var(--icon-color),\n      var(--foreground) 20%\n    );position:relative;z-index:0}.leoButton.isPlainFaint.svelte-1mfuzhy.svelte-1mfuzhy::before{content:\"\";width:100%;height:100%;position:absolute;top:0;right:0;bottom:0;left:0;z-index:-1;border-radius:var(--radius);background-color:color-mix(in srgb, var(--primary-color) var(--bg-hover-mix), transparent);transition:var(--default-transition);opacity:0.001}.leoButton.isPlainFaint.svelte-1mfuzhy.svelte-1mfuzhy:hover::before{opacity:1}}.leoButton.isPlainFaint.fab.svelte-1mfuzhy.svelte-1mfuzhy{--radius:var(--leo-radius-m);--bg-hover:transparent;--padding-y:0;--padding-x:0}.leoButton.isPlainFaint.fab.svelte-1mfuzhy.svelte-1mfuzhy::before{content:unset}.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy{transition:var(--default-transition);--bg:transparent;--bg-focus:var(--bg);--bg-disabled:var(--leo-color-button-disabled);--color:white;--icon-color:white;--default-bg-opacity:1;position:relative;z-index:0}.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled:not(.isLoading))::before,.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled:not(.isLoading))::after{content:\"\";pointer-events:none;display:block;position:absolute;top:0;right:0;bottom:0;left:0;border-radius:var(--leo-button-radius, var(--radius))}.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled:not(.isLoading))::before{transition:var(--default-transition);z-index:-1;background:var(--leo-gradient-hero);opacity:var(--default-bg-opacity)}.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy:not(:disabled:not(.isLoading))::after{z-index:-2;background:linear-gradient(0deg, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.2) 100%), linear-gradient(174deg, #f50 2.32%, #f5002d 93.33%)}.leoButton.isHero.svelte-1mfuzhy.svelte-1mfuzhy:hover:not(:disabled){--default-bg-opacity:0}.leoButton.fab.svelte-1mfuzhy.svelte-1mfuzhy{aspect-ratio:1/1}");
}

const get_icon_after_slot_changes = dirty => ({});
const get_icon_after_slot_context = ctx => ({});
const get_icon_before_slot_changes = dirty => ({});
const get_icon_before_slot_context = ctx => ({});
const get_loading_slot_changes = dirty => ({});
const get_loading_slot_context = ctx => ({});

// (42:2) {:else}
function create_else_block(ctx) {
	let t0;
	let div;
	let t1;
	let current;
	const icon_before_slot_template = /*#slots*/ ctx[12]["icon-before"];
	const icon_before_slot = create_slot(icon_before_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_before_slot_context);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	const default_slot_or_fallback = default_slot || fallback_block_1();
	const icon_after_slot_template = /*#slots*/ ctx[12]["icon-after"];
	const icon_after_slot = create_slot(icon_after_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_after_slot_context);

	return {
		c() {
			if (icon_before_slot) icon_before_slot.c();
			t0 = space();
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t1 = space();
			if (icon_after_slot) icon_after_slot.c();
			attr(div, "class", "svelte-1mfuzhy");
			toggle_class(div, "content", !/*fab*/ ctx[4]);
		},
		m(target, anchor) {
			if (icon_before_slot) {
				icon_before_slot.m(target, anchor);
			}

			insert(target, t0, anchor);
			insert(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			insert(target, t1, anchor);

			if (icon_after_slot) {
				icon_after_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_before_slot) {
				if (icon_before_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						icon_before_slot,
						icon_before_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(icon_before_slot_template, /*$$scope*/ ctx[11], dirty, get_icon_before_slot_changes),
						get_icon_before_slot_context
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*fab*/ 16) {
				toggle_class(div, "content", !/*fab*/ ctx[4]);
			}

			if (icon_after_slot) {
				if (icon_after_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						icon_after_slot,
						icon_after_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(icon_after_slot_template, /*$$scope*/ ctx[11], dirty, get_icon_after_slot_changes),
						get_icon_after_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_before_slot, local);
			transition_in(default_slot_or_fallback, local);
			transition_in(icon_after_slot, local);
			current = true;
		},
		o(local) {
			transition_out(icon_before_slot, local);
			transition_out(default_slot_or_fallback, local);
			transition_out(icon_after_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(div);
				detach(t1);
			}

			if (icon_before_slot) icon_before_slot.d(detaching);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (icon_after_slot) icon_after_slot.d(detaching);
		}
	};
}

// (33:2) {#if isLoading}
function create_if_block(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let t;
	let progressring;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*$$slots*/ ctx[9].loading) return 0;
		if (!/*fab*/ ctx[4]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	progressring = new ProgressRing({});

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(progressring.$$.fragment);
			attr(div, "class", "svelte-1mfuzhy");
			toggle_class(div, "content", !/*fab*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			insert(target, t, anchor);
			mount_component(progressring, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				} else {
					if_block = null;
				}
			}

			if (!current || dirty & /*fab*/ 16) {
				toggle_class(div, "content", !/*fab*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(progressring.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(progressring.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
				detach(t);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			destroy_component(progressring, detaching);
		}
	};
}

// (45:12) Leo Button
function fallback_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Leo Button");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (37:21) 
function create_if_block_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	const default_slot_or_fallback = default_slot || fallback_block();

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (35:6) {#if $$slots.loading}
function create_if_block_1(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[12].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[11], get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[11], dirty, get_loading_slot_changes),
						get_loading_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (38:14) Leo Button
function fallback_block(ctx) {
	let t;

	return {
		c() {
			t = text("Leo Button");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (13:0) <svelte:element   this={tag}   href={href || undefined}   class="leoButton"   class:isFilled={kind === 'filled'}   class:isOutline={kind === 'outline'}   class:isPlain={kind === 'plain'}   class:isPlainFaint={kind === 'plain-faint'}   class:isHero={kind === 'hero'}   class:isJumbo={size === 'jumbo'}   class:isLarge={size === 'large'}   class:isMedium={size === 'medium'}   class:isSmall={size === 'small'}   class:isTiny={size === 'tiny'}   class:fab   class:isLoading   disabled={isLoading || disabled || undefined}   on:click={onClick}   {...$$restProps} >
function create_dynamic_element(ctx) {
	let svelte_element;
	let current_block_type_index;
	let if_block;
	let svelte_element_href_value;
	let svelte_element_disabled_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isLoading*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let svelte_element_levels = [
		{
			href: svelte_element_href_value = /*href*/ ctx[3] || undefined
		},
		{ class: "leoButton" },
		{
			disabled: svelte_element_disabled_value = /*isLoading*/ ctx[2] || /*disabled*/ ctx[6] || undefined
		},
		/*$$restProps*/ ctx[8]
	];

	let svelte_element_data = {};

	for (let i = 0; i < svelte_element_levels.length; i += 1) {
		svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
	}

	return {
		c() {
			svelte_element = element(/*tag*/ ctx[7]);
			if_block.c();
			set_dynamic_element_data(/*tag*/ ctx[7])(svelte_element, svelte_element_data);
			toggle_class(svelte_element, "isFilled", /*kind*/ ctx[0] === 'filled');
			toggle_class(svelte_element, "isOutline", /*kind*/ ctx[0] === 'outline');
			toggle_class(svelte_element, "isPlain", /*kind*/ ctx[0] === 'plain');
			toggle_class(svelte_element, "isPlainFaint", /*kind*/ ctx[0] === 'plain-faint');
			toggle_class(svelte_element, "isHero", /*kind*/ ctx[0] === 'hero');
			toggle_class(svelte_element, "isJumbo", /*size*/ ctx[1] === 'jumbo');
			toggle_class(svelte_element, "isLarge", /*size*/ ctx[1] === 'large');
			toggle_class(svelte_element, "isMedium", /*size*/ ctx[1] === 'medium');
			toggle_class(svelte_element, "isSmall", /*size*/ ctx[1] === 'small');
			toggle_class(svelte_element, "isTiny", /*size*/ ctx[1] === 'tiny');
			toggle_class(svelte_element, "fab", /*fab*/ ctx[4]);
			toggle_class(svelte_element, "isLoading", /*isLoading*/ ctx[2]);
			toggle_class(svelte_element, "svelte-1mfuzhy", true);
		},
		m(target, anchor) {
			insert(target, svelte_element, anchor);
			if_blocks[current_block_type_index].m(svelte_element, null);
			current = true;

			if (!mounted) {
				dispose = listen(svelte_element, "click", function () {
					if (is_function(/*onClick*/ ctx[5])) /*onClick*/ ctx[5].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(svelte_element, null);
			}

			set_dynamic_element_data(/*tag*/ ctx[7])(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
				(!current || dirty & /*href*/ 8 && svelte_element_href_value !== (svelte_element_href_value = /*href*/ ctx[3] || undefined)) && { href: svelte_element_href_value },
				{ class: "leoButton" },
				(!current || dirty & /*isLoading, disabled*/ 68 && svelte_element_disabled_value !== (svelte_element_disabled_value = /*isLoading*/ ctx[2] || /*disabled*/ ctx[6] || undefined)) && { disabled: svelte_element_disabled_value },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(svelte_element, "isFilled", /*kind*/ ctx[0] === 'filled');
			toggle_class(svelte_element, "isOutline", /*kind*/ ctx[0] === 'outline');
			toggle_class(svelte_element, "isPlain", /*kind*/ ctx[0] === 'plain');
			toggle_class(svelte_element, "isPlainFaint", /*kind*/ ctx[0] === 'plain-faint');
			toggle_class(svelte_element, "isHero", /*kind*/ ctx[0] === 'hero');
			toggle_class(svelte_element, "isJumbo", /*size*/ ctx[1] === 'jumbo');
			toggle_class(svelte_element, "isLarge", /*size*/ ctx[1] === 'large');
			toggle_class(svelte_element, "isMedium", /*size*/ ctx[1] === 'medium');
			toggle_class(svelte_element, "isSmall", /*size*/ ctx[1] === 'small');
			toggle_class(svelte_element, "isTiny", /*size*/ ctx[1] === 'tiny');
			toggle_class(svelte_element, "fab", /*fab*/ ctx[4]);
			toggle_class(svelte_element, "isLoading", /*isLoading*/ ctx[2]);
			toggle_class(svelte_element, "svelte-1mfuzhy", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(svelte_element);
			}

			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let previous_tag = /*tag*/ ctx[7];
	let svelte_element_anchor;
	let current;
	let svelte_element = /*tag*/ ctx[7] && create_dynamic_element(ctx);

	return {
		c() {
			if (svelte_element) svelte_element.c();
			svelte_element_anchor = empty();
		},
		m(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			insert(target, svelte_element_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*tag*/ ctx[7]) {
				if (!previous_tag) {
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*tag*/ ctx[7];
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else if (safe_not_equal(previous_tag, /*tag*/ ctx[7])) {
					svelte_element.d(1);
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*tag*/ ctx[7];
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else {
					svelte_element.p(ctx, dirty);
				}
			} else if (previous_tag) {
				svelte_element.d(1);
				svelte_element = null;
				previous_tag = /*tag*/ ctx[7];
			}
		},
		i(local) {
			if (current) return;
			transition_in(svelte_element, local);
			current = true;
		},
		o(local) {
			transition_out(svelte_element, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(svelte_element_anchor);
			}

			if (svelte_element) svelte_element.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let tag;
	let disabled;
	const omit_props_names = ["kind","size","isLoading","isDisabled","href","fab","onClick"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = 'filled' } = $$props;
	let { size = 'medium' } = $$props;
	let { isLoading = false } = $$props;
	let { isDisabled = undefined } = $$props;
	let { href = undefined } = $$props;
	let { fab = false } = $$props;
	let { onClick = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('isLoading' in $$new_props) $$invalidate(2, isLoading = $$new_props.isLoading);
		if ('isDisabled' in $$new_props) $$invalidate(10, isDisabled = $$new_props.isDisabled);
		if ('href' in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ('fab' in $$new_props) $$invalidate(4, fab = $$new_props.fab);
		if ('onClick' in $$new_props) $$invalidate(5, onClick = $$new_props.onClick);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*href*/ 8) {
			$$invalidate(7, tag = href ? 'a' : 'button');
		}

		if ($$self.$$.dirty & /*isDisabled*/ 1024) {
			$$invalidate(6, disabled = !!(isDisabled || isDisabled === ''));
		}
	};

	return [
		kind,
		size,
		isLoading,
		href,
		fab,
		onClick,
		disabled,
		tag,
		$$restProps,
		$$slots,
		isDisabled,
		$$scope,
		slots
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				kind: 0,
				size: 1,
				isLoading: 2,
				isDisabled: 10,
				href: 3,
				fab: 4,
				onClick: 5
			},
			add_css
		);
	}
}

export { Button as default };
//# sourceMappingURL=button.js.map
