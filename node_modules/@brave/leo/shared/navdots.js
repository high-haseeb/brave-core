import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, e as element, b as space, d as attr, t as toggle_class, f as insert, g as append, z as noop, o as detach, V as destroy_each, l as listen, G as binding_callbacks } from './a4e1d370.js';
import { e as ensure_array_like } from './0a2d7621.js';

/* src/components/navdots/navdots.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1i791e4", ":root{--leo-direction:1}:root[dir=rtl]{--leo-direction:-1}:host{display:block}.leo-navdots.svelte-1i791e4.svelte-1i791e4.svelte-1i791e4{--dot-size:var(--leo-navdots-size, 8px);--expanded-dot-size:var(\n    --leo-navdots-expanded-size,\n    calc(var(--dot-size) + var(--dot-spacing))\n  );--dot-spacing:var(--leo-navdots-spacing, 10px);--dot-vertical-margin:var(--leo-navdots-vertical-margin, 1px);--transition-duration:var(--leo-navdots-transition-duration, 0.2s);--transition-easing:var(--leo-navdots-easing, ease-in-out);--active-dot-color:var(\n    --leo-navdots-active-color,\n    var(--leo-color-button-background)\n  );--active-dot-color-hover:var(\n    --leo-navdots-active-color-hover,\n    var(--leo-color-icon-interactive)\n  );--dot-color:var(--leo-navdots-color, var(--leo-color-primary-20));--dot-color-hover:var(\n    --leo-navdots-color-hover,\n    var(--leo-color-primary-30)\n  );--current-dot:0;display:flex;flex-direction:row;justify-content:center}.leo-navdots.svelte-1i791e4 .dot-container.svelte-1i791e4.svelte-1i791e4{display:flex;flex-direction:row;gap:var(--dot-spacing);position:relative;padding:0 calc(var(--dot-spacing) / 2);margin:0;list-style:none}.leo-navdots.svelte-1i791e4 .dot-container.svelte-1i791e4>li.svelte-1i791e4{display:flex}.leo-navdots.svelte-1i791e4 .dot-container:has(.dot.active:focus-visible) .active-dot.svelte-1i791e4.svelte-1i791e4{box-shadow:0px 0px 0px 1.5px rgba(255, 255, 255, 0.5), 0px 0px 4px 2px #423eee}.leo-navdots.svelte-1i791e4 .dot.svelte-1i791e4.svelte-1i791e4{all:unset;cursor:pointer;-webkit-tap-highlight-color:transparent;margin:var(--dot-vertical-margin) 0;width:var(--dot-size);height:var(--dot-size);border-radius:var(--dot-size);background:var(--dot-color);transition:background-color var(--transition-duration) var(--transition-easing), box-shadow var(--transition-duration) var(--transition-easing)}.leo-navdots.svelte-1i791e4 .dot.svelte-1i791e4.svelte-1i791e4:hover{background-color:var(--dot-color-hover)}.leo-navdots.svelte-1i791e4 .dot.svelte-1i791e4.svelte-1i791e4:focus-visible:not(.active){box-shadow:0px 0px 0px 1.5px rgba(255, 255, 255, 0.5), 0px 0px 4px 2px #423eee}.leo-navdots.svelte-1i791e4 .no-animate.svelte-1i791e4.svelte-1i791e4{--transition-duration:0}.leo-navdots.svelte-1i791e4 .active-dot.svelte-1i791e4.svelte-1i791e4{cursor:pointer;position:absolute;transition:transform var(--transition-duration) var(--transition-easing), box-shadow var(--transition-duration) var(--transition-easing);transform:translate(calc(((var(--dot-size) + var(--dot-spacing)) * var(--current-dot) - var(--dot-spacing) / 2) * var(--leo-direction)), 0);width:calc(var(--dot-size) + var(--dot-spacing));height:calc(var(--dot-size) + var(--dot-vertical-margin) * 2);border-radius:var(--dot-size);background:var(--active-dot-color)}.leo-navdots.svelte-1i791e4 .active-dot.svelte-1i791e4.svelte-1i791e4:hover{background:var(--active-dot-color-hover)}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (17:4) {#each dots as dot}
function create_each_block(ctx) {
	let li;
	let button;
	let button_aria_current_value;
	let button_aria_label_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[9](/*dot*/ ctx[11]);
	}

	return {
		c() {
			li = element("li");
			button = element("button");
			attr(button, "class", "dot svelte-1i791e4");
			attr(button, "aria-current", button_aria_current_value = /*dot*/ ctx[11] === /*activeDot*/ ctx[1]);
			attr(button, "aria-label", button_aria_label_value = /*getDotLabel*/ ctx[2](/*dot*/ ctx[11], /*dot*/ ctx[11] === /*activeDot*/ ctx[1]));
			toggle_class(button, "active", /*dot*/ ctx[11] == /*activeDot*/ ctx[1]);
			attr(li, "class", "svelte-1i791e4");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*dots, activeDot*/ 34 && button_aria_current_value !== (button_aria_current_value = /*dot*/ ctx[11] === /*activeDot*/ ctx[1])) {
				attr(button, "aria-current", button_aria_current_value);
			}

			if (dirty & /*getDotLabel, dots, activeDot*/ 38 && button_aria_label_value !== (button_aria_label_value = /*getDotLabel*/ ctx[2](/*dot*/ ctx[11], /*dot*/ ctx[11] === /*activeDot*/ ctx[1]))) {
				attr(button, "aria-label", button_aria_label_value);
			}

			if (dirty & /*dots, activeDot*/ 34) {
				toggle_class(button, "active", /*dot*/ ctx[11] == /*activeDot*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) {
				detach(li);
			}

			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let ol;
	let t;
	let li;
	let each_value = ensure_array_like(/*dots*/ ctx[5]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			nav = element("nav");
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			li = element("li");
			attr(li, "aria-hidden", "true");
			attr(li, "class", "active-dot svelte-1i791e4");
			toggle_class(li, "no-animate", !/*animateSlide*/ ctx[0]);
			attr(ol, "class", "dot-container svelte-1i791e4");
			attr(nav, "class", "leo-navdots svelte-1i791e4");
			attr(nav, "aria-label", /*label*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ol, null);
				}
			}

			append(ol, t);
			append(ol, li);
			/*ol_binding*/ ctx[10](ol);
		},
		p(ctx, [dirty]) {
			if (dirty & /*dots, activeDot, getDotLabel, setActive*/ 102) {
				each_value = ensure_array_like(/*dots*/ ctx[5]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*animateSlide*/ 1) {
				toggle_class(li, "no-animate", !/*animateSlide*/ ctx[0]);
			}

			if (dirty & /*label*/ 8) {
				attr(nav, "aria-label", /*label*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(nav);
			}

			destroy_each(each_blocks, detaching);
			/*ol_binding*/ ctx[10](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let dots;
	let { animateSlide = true } = $$props;
	let { dotCount } = $$props;
	let { activeDot = 0 } = $$props;
	let { getDotLabel = dot => `Page ${dot + 1}` } = $$props;
	let { label = 'Pagination' } = $$props;
	let { onChange } = $$props;
	let container;

	function setActive(dot) {
		onChange === null || onChange === void 0
		? void 0
		: onChange({ activeDot: dot });
	}

	const click_handler = dot => setActive(dot);

	function ol_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(4, container);
		});
	}

	$$self.$$set = $$props => {
		if ('animateSlide' in $$props) $$invalidate(0, animateSlide = $$props.animateSlide);
		if ('dotCount' in $$props) $$invalidate(7, dotCount = $$props.dotCount);
		if ('activeDot' in $$props) $$invalidate(1, activeDot = $$props.activeDot);
		if ('getDotLabel' in $$props) $$invalidate(2, getDotLabel = $$props.getDotLabel);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
		if ('onChange' in $$props) $$invalidate(8, onChange = $$props.onChange);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*container, activeDot*/ 18) {
			container === null || container === void 0
			? void 0
			: container.setAttribute('style', `--current-dot: ${activeDot}`);
		}

		if ($$self.$$.dirty & /*dotCount*/ 128) {
			$$invalidate(5, dots = Array.from(Array(dotCount), (_, i) => i));
		}
	};

	return [
		animateSlide,
		activeDot,
		getDotLabel,
		label,
		container,
		dots,
		setActive,
		dotCount,
		onChange,
		click_handler,
		ol_binding
	];
}

class Navdots extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				animateSlide: 0,
				dotCount: 7,
				activeDot: 1,
				getDotLabel: 2,
				label: 3,
				onChange: 8
			},
			add_css
		);
	}
}

export { Navdots as default };
//# sourceMappingURL=navdots.js.map
