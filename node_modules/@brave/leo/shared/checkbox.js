import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, c as create_slot, e as element, b as space, d as attr, t as toggle_class, f as insert, g as append, l as listen, h as transition_out, j as check_outros, k as transition_in, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, o as detach, r as run_all, p as group_outros, q as create_component, v as mount_component, w as add_render_callback, x as create_bidirectional_transition, y as destroy_component } from './a4e1d370.js';
import { p as preloadIcon, I as Icon } from './58debee4.js';
import { f as fade } from './4b0b9071.js';

/* src/components/checkbox/checkbox.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1f50gjj", ":host{display:inline-block}.leo-checkbox.svelte-1f50gjj.svelte-1f50gjj{--focus-border-radius:var(--leo-checkbox-focus-border-radius, 2px);--label-gap:var(--leo-checkbox-label-gap, var(--leo-spacing-m));--flex-direction:var(--leo-checkbox-flex-direction, row);--checked-color:var(\n    --leo-checkbox-checked-color,\n    var(--leo-color-icon-interactive)\n  );--checked-color-hover:var(\n    --leo-checkbox-checked-color-hover,\n    var(--leo-color-primary-70)\n  );--unchecked-color:var(\n    --leo-checkbox-unchecked-color,\n    var(--leo-color-icon-default)\n  );--unchecked-color-hover:var(\n    --leo-checkbox-unchecked-color-hover,\n    var(--leo-color-neutral-70)\n  );--disabled-color:var(\n    --leo-checkbox-disabled-color,\n    var(--leo-color-text-disabled)\n  );--font:var(--leo-checkbox-font, var(--leo-font-default-regular));display:flex;align-items:center;flex-direction:var(--flex-direction);gap:var(--label-gap);font:var(--font);cursor:pointer;-webkit-tap-highlight-color:transparent}.leo-checkbox.disabled.svelte-1f50gjj.svelte-1f50gjj{cursor:not-allowed}.leo-checkbox.disabled.svelte-1f50gjj.svelte-1f50gjj{color:var(--disabled-color)}.normal.svelte-1f50gjj.svelte-1f50gjj{--checkbox-size:var(--leo-checkbox-size, 20px)}.small.svelte-1f50gjj.svelte-1f50gjj{--checkbox-size:var(--leo-checkbox-size, 16px)}.leo-checkbox.svelte-1f50gjj input.svelte-1f50gjj{opacity:0}.leo-checkbox.svelte-1f50gjj .check.svelte-1f50gjj{--leo-icon-size:var(--checkbox-size);position:relative;width:var(--checkbox-size);height:var(--checkbox-size);color:var(--unchecked-color)}.leo-checkbox.svelte-1f50gjj .check div.svelte-1f50gjj{position:absolute;top:0;left:0;bottom:0;right:0}.leo-checkbox.svelte-1f50gjj .check.svelte-1f50gjj:has(input:checked){color:var(--checked-color)}.leo-checkbox.svelte-1f50gjj .check.svelte-1f50gjj:has(input:focus-visible){box-shadow:0px 0px 0px 1.5px rgba(255, 255, 255, 0.5), 0px 0px 4px 2px #423eee;border-radius:var(--focus-border-radius)}.leo-checkbox.disabled.svelte-1f50gjj .check.svelte-1f50gjj{color:var(--disabled-color) !important}.leo-checkbox.svelte-1f50gjj:hover .check.svelte-1f50gjj{color:var(--unchecked-color-hover)}.leo-checkbox.svelte-1f50gjj:hover .check.svelte-1f50gjj:has(input:checked){color:var(--checked-color-hover)}");
}

// (34:4) {:else}
function create_else_block(ctx) {
	let div;
	let icon;
	let div_transition;
	let current;
	icon = new Icon({ props: { name: "checkbox-unchecked" } });

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			attr(div, "class", "svelte-1f50gjj");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!div_transition) div_transition = create_bidirectional_transition(div, fade, fadeTransition, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, fadeTransition, false);
				div_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(icon);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (30:4) {#if checked}
function create_if_block(ctx) {
	let div;
	let icon;
	let div_transition;
	let current;
	icon = new Icon({ props: { name: "checkbox-checked" } });

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			attr(div, "class", "svelte-1f50gjj");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!div_transition) div_transition = create_bidirectional_transition(div, fade, fadeTransition, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, fadeTransition, false);
				div_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(icon);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let label;
	let div;
	let input;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*checked*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			label = element("label");
			div = element("div");
			input = element("input");
			t0 = space();
			if_block.c();
			t1 = space();
			if (default_slot) default_slot.c();
			input.disabled = /*isDisabled*/ ctx[1];
			attr(input, "type", "checkbox");
			attr(input, "class", "svelte-1f50gjj");
			attr(div, "class", "check svelte-1f50gjj");
			attr(label, "class", "leo-checkbox svelte-1f50gjj");
			toggle_class(label, "small", /*size*/ ctx[2] === 'small');
			toggle_class(label, "normal", /*size*/ ctx[2] !== 'small');
			toggle_class(label, "disabled", /*isDisabled*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, div);
			append(div, input);
			input.checked = /*checked*/ ctx[0];
			append(div, t0);
			if_blocks[current_block_type_index].m(div, null);
			append(label, t1);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[6]),
					listen(input, "change", /*change_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*isDisabled*/ 2) {
				input.disabled = /*isDisabled*/ ctx[1];
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*size*/ 4) {
				toggle_class(label, "small", /*size*/ ctx[2] === 'small');
			}

			if (!current || dirty & /*size*/ 4) {
				toggle_class(label, "normal", /*size*/ ctx[2] !== 'small');
			}

			if (!current || dirty & /*isDisabled*/ 2) {
				toggle_class(label, "disabled", /*isDisabled*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(label);
			}

			if_blocks[current_block_type_index].d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const sizes = ['small', 'normal'];
const fadeTransition = { duration: 120 };

// Preload the SVGs we need for the component.
preloadIcon('checkbox-checked');

preloadIcon('checkbox-unchecked');

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { checked } = $$props;
	let { isDisabled = false } = $$props;
	let { size = 'normal' } = $$props;
	let { onChange = undefined } = $$props;

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	const change_handler = e => onChange?.({ checked: e.currentTarget.checked });

	$$self.$$set = $$props => {
		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
		if ('isDisabled' in $$props) $$invalidate(1, isDisabled = $$props.isDisabled);
		if ('size' in $$props) $$invalidate(2, size = $$props.size);
		if ('onChange' in $$props) $$invalidate(3, onChange = $$props.onChange);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [
		checked,
		isDisabled,
		size,
		onChange,
		$$scope,
		slots,
		input_change_handler,
		change_handler
	];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				checked: 0,
				isDisabled: 1,
				size: 2,
				onChange: 3
			},
			add_css
		);
	}
}

export { Checkbox as default, sizes };
//# sourceMappingURL=checkbox.js.map
