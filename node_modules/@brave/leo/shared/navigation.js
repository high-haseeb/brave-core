import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, c as create_slot, e as element, b as space, d as attr, f as insert, g as append, k as transition_in, h as transition_out, j as check_outros, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, o as detach, F as compute_slots, p as group_outros } from './a4e1d370.js';

/* src/components/navigation/navigation.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1wkjppt", ".leo-navigation.svelte-1wkjppt{--nav-direction:row;display:flex;flex-direction:var(--nav-direction);height:100%}.leo-navigation.kind-vertical.svelte-1wkjppt{--nav-direction:column}");
}

const get_actions_slot_changes = dirty => ({});
const get_actions_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (7:2) {#if $$slots.header}
function create_if_block_1(ctx) {
	let current;
	const header_slot_template = /*#slots*/ ctx[3].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[2], get_header_slot_context);

	return {
		c() {
			if (header_slot) header_slot.c();
		},
		m(target, anchor) {
			if (header_slot) {
				header_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (header_slot) {
				if (header_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[2], dirty, get_header_slot_changes),
						get_header_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			current = false;
		},
		d(detaching) {
			if (header_slot) header_slot.d(detaching);
		}
	};
}

// (15:2) {#if $$slots.actions}
function create_if_block(ctx) {
	let current;
	const actions_slot_template = /*#slots*/ ctx[3].actions;
	const actions_slot = create_slot(actions_slot_template, ctx, /*$$scope*/ ctx[2], get_actions_slot_context);

	return {
		c() {
			if (actions_slot) actions_slot.c();
		},
		m(target, anchor) {
			if (actions_slot) {
				actions_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (actions_slot) {
				if (actions_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						actions_slot,
						actions_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(actions_slot_template, /*$$scope*/ ctx[2], dirty, get_actions_slot_changes),
						get_actions_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(actions_slot, local);
			current = true;
		},
		o(local) {
			transition_out(actions_slot, local);
			current = false;
		},
		d(detaching) {
			if (actions_slot) actions_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let nav;
	let t1;
	let div_class_value;
	let current;
	let if_block0 = /*$$slots*/ ctx[1].header && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let if_block1 = /*$$slots*/ ctx[1].actions && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			nav = element("nav");
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr(div, "class", div_class_value = "leo-navigation kind-" + /*kind*/ ctx[0] + " svelte-1wkjppt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			append(div, nav);

			if (default_slot) {
				default_slot.m(nav, null);
			}

			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[1].header) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$$slots*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (/*$$slots*/ ctx[1].actions) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*kind*/ 1 && div_class_value !== (div_class_value = "leo-navigation kind-" + /*kind*/ ctx[0] + " svelte-1wkjppt")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = 'vertical' } = $$props;

	$$self.$$set = $$props => {
		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [kind, $$slots, $$scope, slots];
}

class Navigation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { kind: 0 }, add_css);
	}
}

export { Navigation as default };
//# sourceMappingURL=navigation.js.map
