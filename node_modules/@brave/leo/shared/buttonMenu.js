import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, c as create_slot, e as element, b as space, q as create_component, d as attr, f as insert, g as append, v as mount_component, l as listen, L as stop_propagation, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, k as transition_in, h as transition_out, o as detach, y as destroy_component, G as binding_callbacks } from './a4e1d370.js';
import Menu from './menu.js';
import './90683fde.js';

/* src/components/buttonMenu/buttonMenu.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1ff9jih", ":host{display:inline-block}.leo-button-menu.svelte-1ff9jih{cursor:pointer;-webkit-tap-highlight-color:transparent}");
}

const get_anchor_content_slot_changes = dirty => ({});
const get_anchor_content_slot_context = ctx => ({});

// (28:2) <Menu {positionStrategy} isOpen={isOpenInternal} target={anchor} {onClose}>
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let menu;
	let current;
	let mounted;
	let dispose;
	const anchor_content_slot_template = /*#slots*/ ctx[7]["anchor-content"];
	const anchor_content_slot = create_slot(anchor_content_slot_template, ctx, /*$$scope*/ ctx[9], get_anchor_content_slot_context);

	menu = new Menu({
			props: {
				positionStrategy: /*positionStrategy*/ ctx[1],
				isOpen: /*isOpenInternal*/ ctx[3],
				target: /*anchor*/ ctx[2],
				onClose: /*onClose*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (anchor_content_slot) anchor_content_slot.c();
			t = space();
			create_component(menu.$$.fragment);
			attr(div1, "class", "leo-button-menu svelte-1ff9jih");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (anchor_content_slot) {
				anchor_content_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[8](div0);
			append(div1, t);
			mount_component(menu, div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", stop_propagation(/*toggle*/ ctx[4]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (anchor_content_slot) {
				if (anchor_content_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						anchor_content_slot,
						anchor_content_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(anchor_content_slot_template, /*$$scope*/ ctx[9], dirty, get_anchor_content_slot_changes),
						get_anchor_content_slot_context
					);
				}
			}

			const menu_changes = {};
			if (dirty & /*positionStrategy*/ 2) menu_changes.positionStrategy = /*positionStrategy*/ ctx[1];
			if (dirty & /*isOpenInternal*/ 8) menu_changes.isOpen = /*isOpenInternal*/ ctx[3];
			if (dirty & /*anchor*/ 4) menu_changes.target = /*anchor*/ ctx[2];
			if (dirty & /*onClose*/ 1) menu_changes.onClose = /*onClose*/ ctx[0];

			if (dirty & /*$$scope*/ 512) {
				menu_changes.$$scope = { dirty, ctx };
			}

			menu.$set(menu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(anchor_content_slot, local);
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(anchor_content_slot, local);
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div1);
			}

			if (anchor_content_slot) anchor_content_slot.d(detaching);
			/*div0_binding*/ ctx[8](null);
			destroy_component(menu);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let isOpenInternal;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isOpen = undefined } = $$props;
	let { onClose = undefined } = $$props;
	let { onChange = undefined } = $$props;
	let { positionStrategy = 'absolute' } = $$props;
	let anchor;

	const toggle = () => {
		const toggleTo = !isOpenInternal;
		if (isOpen === undefined) $$invalidate(3, isOpenInternal = toggleTo);

		onChange === null || onChange === void 0
		? void 0
		: onChange({ isOpen: toggleTo });
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchor = $$value;
			$$invalidate(2, anchor);
		});
	}

	$$self.$$set = $$props => {
		if ('isOpen' in $$props) $$invalidate(5, isOpen = $$props.isOpen);
		if ('onClose' in $$props) $$invalidate(0, onClose = $$props.onClose);
		if ('onChange' in $$props) $$invalidate(6, onChange = $$props.onChange);
		if ('positionStrategy' in $$props) $$invalidate(1, positionStrategy = $$props.positionStrategy);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isOpen*/ 32) {
			$$invalidate(3, isOpenInternal = isOpen !== null && isOpen !== void 0 ? isOpen : false);
		}
	};

	return [
		onClose,
		positionStrategy,
		anchor,
		isOpenInternal,
		toggle,
		isOpen,
		onChange,
		slots,
		div0_binding,
		$$scope
	];
}

class ButtonMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				isOpen: 5,
				onClose: 0,
				onChange: 6,
				positionStrategy: 1
			},
			add_css
		);
	}
}

export { ButtonMenu as default };
//# sourceMappingURL=buttonMenu.js.map
