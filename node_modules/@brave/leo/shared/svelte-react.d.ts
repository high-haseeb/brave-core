import { type PropsWithChildren } from 'react';
import type { SvelteComponent } from 'svelte';
export type IntrinsicProps = 'className' | 'id' | 'hidden' | 'role' | 'style' | 'tabIndex';
export type SvelteProps<T> = T extends SvelteComponent<infer Props, any, any> ? Props : {};
type Ref<T> = ((ref: (Omit<HTMLElement, keyof T> & T) | null) => void) | {
    current: HTMLElement | Partial<T> | (Omit<HTMLElement, keyof T> & T) | undefined | null;
};
export type ReactProps<Props> = Props & {
    ref?: Ref<Props>;
    slot?: string;
} & {
    [P in IntrinsicProps]?: Omit<JSX.IntrinsicElements, 'ref'>['div'][P];
};
/**
 *
 * @param tag custom element tag name for svelte component
 * @param component The imported svelte component itself. This is not used, but ensures that the component's code has been included in the bundle.
 * @returns A react component
 */
export default function SvelteWebComponentToReact<T extends Record<string, any>>(tag: string, component: typeof HTMLElement): import("react").ForwardRefExoticComponent<import("react").PropsWithoutRef<PropsWithChildren<T>> & import("react").RefAttributes<HTMLElement>>;
export {};
