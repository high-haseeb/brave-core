import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, e as element, d as attr, f as insert, j as check_outros, k as transition_in, h as transition_out, o as detach, A as component_subscribe, U as construct_svelte_component, q as create_component, b as space, v as mount_component, g as append, l as listen, p as group_outros, y as destroy_component, w as add_render_callback, x as create_bidirectional_transition, r as run_all, P as assign, I as text, J as set_data, B as empty, V as destroy_each, z as noop } from './a4e1d370.js';
import { e as ensure_array_like, u as update_keyed_each, o as outro_and_destroy_block } from './0a2d7621.js';
import { g as get_spread_update, a as get_spread_object } from './d682c58e.js';
import { w as writable, I as Icon } from './58debee4.js';
import Alert from './alert.js';
import Button from './button.js';
import { a as fly } from './4b0b9071.js';
import './progressRing.js';

/* src/components/alert/alertCenter.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-1ik181m", ".leo-alert-center.svelte-1ik181m{--width:var(--leo-alert-center-width, min(540px, 100vw));z-index:var(--leo-alert-center-z-index, 1000);position:var(--leo-alert-center-position, fixed);width:var(--width);padding:var(--leo-spacing-m);display:flex;flex-direction:column;gap:var(--leo-spacing-m)}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (76:6) <svelte:component this={alert.component || Alert} {...alert} hasActions={alert.actions.length > 0} hasContentAfter={alert.canDismiss} isToast>
function create_default_slot_2(ctx) {
	let t_value = /*alert*/ ctx[7].content + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$alerts*/ 2 && t_value !== (t_value = /*alert*/ ctx[7].content + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (77:8) 
function create_title_slot(ctx) {
	let div;
	let t_value = /*alert*/ ctx[7].title + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "slot", "title");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$alerts*/ 2 && t_value !== (t_value = /*alert*/ ctx[7].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (81:10) {#if alert.canDismiss}
function create_if_block_1(ctx) {
	let button;
	let current;

	function func_1() {
		return /*func_1*/ ctx[4](/*alert*/ ctx[7]);
	}

	button = new Button({
			props: {
				kind: "plain-faint",
				fab: true,
				onClick: func_1,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};
			if (dirty & /*$alerts*/ 2) button_changes.onClick = func_1;

			if (dirty & /*$$scope*/ 8192) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (82:12) <Button kind="plain-faint" fab onClick={() => alert.dismiss()}>
function create_default_slot_1(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: "close" } });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

// (80:8) <svelte:fragment slot='content-after'>
function create_content_after_slot(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*alert*/ ctx[7].canDismiss && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*alert*/ ctx[7].canDismiss) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$alerts*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};
}

// (100:14) {:else}
function create_else_block(ctx) {
	let t_value = /*action*/ ctx[10].text + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$alerts*/ 2 && t_value !== (t_value = /*action*/ ctx[10].text + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (98:14) {#if action.icon && !action.text}
function create_if_block(ctx) {
	let icon;
	let current;
	icon = new Icon({ props: { name: /*action*/ ctx[10].icon } });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*$alerts*/ 2) icon_changes.name = /*action*/ ctx[10].icon;
			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

// (90:12) <svelte:component               this={action.component || ButtonComponent}               size={alert.mode === "full" ? "medium" : "small"}               fab={action.icon && !action.text}               kind={action.kind || 'filled'}               onClick={() => action.action(alert)}               {...action}             >
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*action*/ ctx[10].icon && !/*action*/ ctx[10].text) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			t = space();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t.parentNode, t);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (103:14) 
function create_icon_after_slot(ctx) {
	let div;
	let icon;
	let t;
	let div_hidden_value;
	let current;
	icon = new Icon({ props: { name: /*action*/ ctx[10].icon } });

	return {
		c() {
			div = element("div");
			create_component(icon.$$.fragment);
			t = space();
			attr(div, "slot", "icon-after");
			div.hidden = div_hidden_value = !/*action*/ ctx[10].text || !/*action*/ ctx[10].icon;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(icon, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*$alerts*/ 2) icon_changes.name = /*action*/ ctx[10].icon;
			icon.$set(icon_changes);

			if (!current || dirty & /*$alerts*/ 2 && div_hidden_value !== (div_hidden_value = !/*action*/ ctx[10].text || !/*action*/ ctx[10].icon)) {
				div.hidden = div_hidden_value;
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(icon);
		}
	};
}

// (89:10) {#each alert.actions as action}
function create_each_block_1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	function func() {
		return /*func*/ ctx[3](/*action*/ ctx[10], /*alert*/ ctx[7]);
	}

	const switch_instance_spread_levels = [
		{
			size: /*alert*/ ctx[7].mode === "full" ? "medium" : "small"
		},
		{
			fab: /*action*/ ctx[10].icon && !/*action*/ ctx[10].text
		},
		{
			kind: /*action*/ ctx[10].kind || 'filled'
		},
		{ onClick: func },
		/*action*/ ctx[10]
	];

	var switch_value = /*action*/ ctx[10].component || ButtonComponent;

	function switch_props(ctx, dirty) {
		let switch_instance_props = {
			$$slots: {
				"icon-after": [create_icon_after_slot],
				default: [create_default_slot]
			},
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		if (dirty !== undefined && dirty & /*$alerts*/ 2) {
			switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
				{
					size: /*alert*/ ctx[7].mode === "full" ? "medium" : "small"
				},
				{
					fab: /*action*/ ctx[10].icon && !/*action*/ ctx[10].text
				},
				{
					kind: /*action*/ ctx[10].kind || 'filled'
				},
				{ onClick: func },
				get_spread_object(/*action*/ ctx[10])
			]));
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) mount_component(switch_instance, target, anchor);
			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$alerts*/ 2 && switch_value !== (switch_value = /*action*/ ctx[10].component || ButtonComponent)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component(switch_value, switch_props(ctx, dirty));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				const switch_instance_changes = (dirty & /*$alerts*/ 2)
				? get_spread_update(switch_instance_spread_levels, [
						{
							size: /*alert*/ ctx[7].mode === "full" ? "medium" : "small"
						},
						{
							fab: /*action*/ ctx[10].icon && !/*action*/ ctx[10].text
						},
						{
							kind: /*action*/ ctx[10].kind || 'filled'
						},
						{ onClick: func },
						get_spread_object(/*action*/ ctx[10])
					])
				: {};

				if (dirty & /*$$scope, $alerts*/ 8194) {
					switch_instance_changes.$$scope = { dirty, ctx };
				}

				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(switch_instance_anchor);
			}

			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (88:8) 
function create_actions_slot(ctx) {
	let div;
	let current;
	let each_value_1 = ensure_array_like(/*alert*/ ctx[7].actions);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "slot", "actions");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*$alerts, ButtonComponent*/ 2) {
				each_value_1 = ensure_array_like(/*alert*/ ctx[7].actions);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (69:2) {#each $alerts as alert (alert.id)}
function create_each_block(key_1, ctx) {
	let div;
	let switch_instance;
	let t;
	let div_transition;
	let current;
	let mounted;
	let dispose;

	const switch_instance_spread_levels = [
		/*alert*/ ctx[7],
		{
			hasActions: /*alert*/ ctx[7].actions.length > 0
		},
		{
			hasContentAfter: /*alert*/ ctx[7].canDismiss
		},
		{ isToast: true }
	];

	var switch_value = /*alert*/ ctx[7].component || Alert;

	function switch_props(ctx, dirty) {
		let switch_instance_props = {
			$$slots: {
				actions: [create_actions_slot],
				"content-after": [create_content_after_slot],
				title: [create_title_slot],
				default: [create_default_slot_2]
			},
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		if (dirty !== undefined && dirty & /*$alerts*/ 2) {
			switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
				get_spread_object(/*alert*/ ctx[7]),
				{
					hasActions: /*alert*/ ctx[7].actions.length > 0
				},
				{
					hasContentAfter: /*alert*/ ctx[7].canDismiss
				},
				switch_instance_spread_levels[3]
			]));
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = construct_svelte_component(switch_value, switch_props(ctx));
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[5](/*alert*/ ctx[7]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[6](/*alert*/ ctx[7]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t = space();
			attr(div, "class", "alert-container");
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (switch_instance) mount_component(switch_instance, div, null);
			append(div, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "mouseenter", mouseenter_handler),
					listen(div, "mouseleave", mouseleave_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$alerts*/ 2 && switch_value !== (switch_value = /*alert*/ ctx[7].component || Alert)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = construct_svelte_component(switch_value, switch_props(ctx, dirty));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, t);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				const switch_instance_changes = (dirty & /*$alerts*/ 2)
				? get_spread_update(switch_instance_spread_levels, [
						get_spread_object(/*alert*/ ctx[7]),
						{
							hasActions: /*alert*/ ctx[7].actions.length > 0
						},
						{
							hasContentAfter: /*alert*/ ctx[7].canDismiss
						},
						switch_instance_spread_levels[3]
					])
				: {};

				if (dirty & /*$$scope, $alerts*/ 8194) {
					switch_instance_changes.$$scope = { dirty, ctx };
				}

				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

			if (local) {
				add_render_callback(() => {
					if (!current) return;
					if (!div_transition) div_transition = create_bidirectional_transition(div, fly, transitionOptions, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);

			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fly, transitionOptions, false);
				div_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (switch_instance) destroy_component(switch_instance);
			if (detaching && div_transition) div_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = ensure_array_like(/*$alerts*/ ctx[1]);
	const get_key = ctx => /*alert*/ ctx[7].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "leo-alert-center svelte-1ik181m");
			attr(div, "style", /*style*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*transitionOptions, $alerts, ButtonComponent*/ 2) {
				each_value = ensure_array_like(/*$alerts*/ ctx[1]);
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}

			if (!current || dirty & /*style*/ 1) {
				attr(div, "style", /*style*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

var __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {
	if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");

	if (typeof state === "function"
	? receiver !== state || !f
	: !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");

	return kind === "m"
	? f
	: kind === "a"
		? f.call(receiver)
		: f ? f.value : state.get(receiver);
};

var __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {
	if (kind === "m") throw new TypeError("Private method is not writable");
	if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");

	if (typeof state === "function"
	? receiver !== state || !f
	: !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");

	return (kind === "a"
	? f.call(receiver, value)
	: f ? f.value = value : state.set(receiver, value), value);
};

var _AlertInfo_timeout;

/**
 * This is a workaround for TS since we don't know what props Action may have.
 * Additionally, Button has two generic type params, which also seems to
 * contribute to the TS error.
 */
const ButtonComponent = Button;

let nextId = 0;

class AlertInfo {
	constructor(options, duration, canDismiss) {
		var _a;
		this.id = ++nextId;
		this.actions = [];
		_AlertInfo_timeout.set(this, void 0);
		Object.assign(this, options);
		this.actions = (_a = this.actions) !== null && _a !== void 0 ? _a : [];
		this.duration = duration;
		this.canDismiss = canDismiss;
		this.resumeDismiss();
	}

	pauseDismiss() {
		clearTimeout(__classPrivateFieldGet(this, _AlertInfo_timeout, "f"));
	}

	resumeDismiss() {
		if (!this.duration) return;
		__classPrivateFieldSet(this, _AlertInfo_timeout, setTimeout(() => this.dismiss(), this.duration), "f");
	}

	dismiss() {
		alerts.update(a => a.filter(a => a !== this));
	}

	updateAlert(update) {
		Object.assign(this, update);

		// Trigger a rerender
		alerts.update(a => [...a]);
	}
}

_AlertInfo_timeout = new WeakMap();
const alerts = writable([]);

const showAlert = (options, duration = 2000, canDismiss = true) => {
	const info = new AlertInfo(options, duration, canDismiss);
	alerts.update(a => [...a, info]);
	return info;
};

const transitionOptions = { y: -64, duration: 120 };

function instance($$self, $$props, $$invalidate) {
	let style;
	let $alerts;
	component_subscribe($$self, alerts, $$value => $$invalidate(1, $alerts = $$value));
	let { position = 'top-center' } = $$props;
	const func = (action, alert) => action.action(alert);
	const func_1 = alert => alert.dismiss();
	const mouseenter_handler = alert => alert.pauseDismiss();
	const mouseleave_handler = alert => alert.resumeDismiss();

	$$self.$$set = $$props => {
		if ('position' in $$props) $$invalidate(2, position = $$props.position);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*position*/ 4) {
			$$invalidate(0, style = `${position.includes('right') ? 'right' : 'left'}: ${position.includes('center')
			? 'calc(50% - (var(--width) / 2))'
			: '0'}; ${position.includes('top') ? 'top' : 'bottom'}: 0`);
		}
	};

	return [style, $alerts, position, func, func_1, mouseenter_handler, mouseleave_handler];
}

class AlertCenter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { position: 2 }, add_css);
	}
}

export { AlertCenter as default, showAlert };
//# sourceMappingURL=alertCenter.js.map
