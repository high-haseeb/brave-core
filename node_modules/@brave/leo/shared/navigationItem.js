import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, B as empty, f as insert, l as listen, k as transition_in, h as transition_out, o as detach, r as run_all, R as compute_rest_props, F as compute_slots, Y as onMount, P as assign, T as exclude_internal_props, c as create_slot, e as element, b as space, W as set_dynamic_element_data, t as toggle_class, g as append, K as is_function, p as group_outros, j as check_outros, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, q as create_component, v as mount_component, y as destroy_component } from './a4e1d370.js';
import { g as get_spread_update } from './d682c58e.js';
import { I as Icon } from './58debee4.js';

/** @type {typeof globalThis} */
const globals =
	typeof window !== 'undefined'
		? window
		: typeof globalThis !== 'undefined'
		? globalThis
		: // @ts-ignore Node typings have this
		  global;

/* src/components/navigation/navigationItem.svelte generated by Svelte v4.2.19 */

const { window: window_1 } = globals;

function add_css(target) {
	append_styles(target, "svelte-jh1c8b", ".leo-navigation-item.svelte-jh1c8b.svelte-jh1c8b{--nav-item-color:var(--leo-color-text-secondary);--leo-icon-color:var(--leo-color-icon-default);--leo-icon-size:var(--leo-icon-s)}.leo-navigation-item.svelte-jh1c8b a.svelte-jh1c8b,.leo-navigation-item.svelte-jh1c8b button.svelte-jh1c8b{all:unset;cursor:pointer;display:flex;width:100%;box-sizing:border-box;gap:var(--leo-spacing-xl);align-items:center;height:48px;padding-left:var(--leo-spacing-2xl);padding-right:var(--leo-spacing-m);border-radius:0;outline:none;position:relative;text-decoration:none;font:var(--leo-font-components-button-default);color:var(--nav-item-color)}.leo-navigation-item.svelte-jh1c8b a.svelte-jh1c8b:hover,.leo-navigation-item.svelte-jh1c8b button.svelte-jh1c8b:hover{background:var(--leo-color-container-highlight)}.leo-navigation-item.svelte-jh1c8b a.svelte-jh1c8b:focus-visible,.leo-navigation-item.svelte-jh1c8b button.svelte-jh1c8b:focus-visible{box-shadow:var(--leo-effect-focus-state)}.leo-navigation-item.svelte-jh1c8b a.isCurrent.svelte-jh1c8b,.leo-navigation-item.svelte-jh1c8b button.isCurrent.svelte-jh1c8b{--nav-item-color:var(--leo-color-text-interactive);--leo-icon-color:var(--leo-color-icon-interactive)}.leo-navigation-item.svelte-jh1c8b a.isCurrent.svelte-jh1c8b::before,.leo-navigation-item.svelte-jh1c8b button.isCurrent.svelte-jh1c8b::before{content:\"\";width:4px;height:76%;border-top-right-radius:var(--leo-radius-xs);border-bottom-right-radius:var(--leo-radius-xs);background:var(--leo-color-text-interactive);position:absolute;left:0;top:50%;transform:translateY(-50%)}");
}

const get_subnav_slot_changes = dirty => ({});
const get_subnav_slot_context = ctx => ({});

// (38:4) {#if icon}
function create_if_block_1(ctx) {
	let icon_1;
	let current;
	icon_1 = new Icon({ props: { name: /*icon*/ ctx[2] } });

	return {
		c() {
			create_component(icon_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_1_changes = {};
			if (dirty & /*icon*/ 4) icon_1_changes.name = /*icon*/ ctx[2];
			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon_1, detaching);
		}
	};
}

// (44:2) {#if $$slots.subnav}
function create_if_block(ctx) {
	let current;
	const subnav_slot_template = /*#slots*/ ctx[12].subnav;
	const subnav_slot = create_slot(subnav_slot_template, ctx, /*$$scope*/ ctx[11], get_subnav_slot_context);

	return {
		c() {
			if (subnav_slot) subnav_slot.c();
		},
		m(target, anchor) {
			if (subnav_slot) {
				subnav_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (subnav_slot) {
				if (subnav_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						subnav_slot,
						subnav_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(subnav_slot_template, /*$$scope*/ ctx[11], dirty, get_subnav_slot_changes),
						get_subnav_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(subnav_slot, local);
			current = true;
		},
		o(local) {
			transition_out(subnav_slot, local);
			current = false;
		},
		d(detaching) {
			if (subnav_slot) subnav_slot.d(detaching);
		}
	};
}

// (29:0) <svelte:element this={outsideList ? 'div' : 'li'} class="leo-navigation-item">
function create_dynamic_element(ctx) {
	let svelte_element1;
	let svelte_element0;
	let t0;
	let svelte_element0_href_value;
	let svelte_element0_disabled_value;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*icon*/ ctx[2] && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let svelte_element0_levels = [
		{
			href: svelte_element0_href_value = /*href*/ ctx[1] || undefined
		},
		{
			disabled: svelte_element0_disabled_value = /*isLoading*/ ctx[3] || /*isDisabled*/ ctx[4] || undefined
		},
		/*$$restProps*/ ctx[9]
	];

	let svelte_element_data = {};

	for (let i = 0; i < svelte_element0_levels.length; i += 1) {
		svelte_element_data = assign(svelte_element_data, svelte_element0_levels[i]);
	}

	let if_block1 = /*$$slots*/ ctx[10].subnav && create_if_block(ctx);

	return {
		c() {
			svelte_element1 = element(/*outsideList*/ ctx[5] ? 'div' : 'li');
			svelte_element0 = element(/*tag*/ ctx[7]);
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			set_dynamic_element_data(/*tag*/ ctx[7])(svelte_element0, svelte_element_data);
			toggle_class(svelte_element0, "isCurrent", /*isCurrent*/ ctx[0]);
			toggle_class(svelte_element0, "svelte-jh1c8b", true);

			set_dynamic_element_data(/*outsideList*/ ctx[5] ? 'div' : 'li')(svelte_element1, {
				class: "leo-navigation-item svelte-jh1c8b"
			});
		},
		m(target, anchor) {
			insert(target, svelte_element1, anchor);
			append(svelte_element1, svelte_element0);
			if (if_block0) if_block0.m(svelte_element0, null);
			append(svelte_element0, t0);

			if (default_slot) {
				default_slot.m(svelte_element0, null);
			}

			append(svelte_element1, t1);
			if (if_block1) if_block1.m(svelte_element1, null);
			current = true;

			if (!mounted) {
				dispose = listen(svelte_element0, "click", function () {
					if (is_function(/*onClick*/ ctx[6])) /*onClick*/ ctx[6].apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*icon*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*icon*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(svelte_element0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			set_dynamic_element_data(/*tag*/ ctx[7])(svelte_element0, svelte_element_data = get_spread_update(svelte_element0_levels, [
				(!current || dirty & /*href*/ 2 && svelte_element0_href_value !== (svelte_element0_href_value = /*href*/ ctx[1] || undefined)) && { href: svelte_element0_href_value },
				(!current || dirty & /*isLoading, isDisabled*/ 24 && svelte_element0_disabled_value !== (svelte_element0_disabled_value = /*isLoading*/ ctx[3] || /*isDisabled*/ ctx[4] || undefined)) && { disabled: svelte_element0_disabled_value },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(svelte_element0, "isCurrent", /*isCurrent*/ ctx[0]);
			toggle_class(svelte_element0, "svelte-jh1c8b", true);

			if (/*$$slots*/ ctx[10].subnav) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 1024) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(svelte_element1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(svelte_element1);
			}

			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let previous_tag = /*outsideList*/ ctx[5] ? 'div' : 'li';
	let svelte_element_anchor;
	let current;
	let mounted;
	let dispose;
	let svelte_element = (/*outsideList*/ ctx[5] ? 'div' : 'li') && create_dynamic_element(ctx);

	return {
		c() {
			if (svelte_element) svelte_element.c();
			svelte_element_anchor = empty();
		},
		m(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			insert(target, svelte_element_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "popstate", /*checkIfCurrent*/ ctx[8]),
					listen(window_1, "hashchange", /*checkIfCurrent*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*outsideList*/ ctx[5] ? 'div' : 'li') {
				if (!previous_tag) {
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*outsideList*/ ctx[5] ? 'div' : 'li';
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else if (safe_not_equal(previous_tag, /*outsideList*/ ctx[5] ? 'div' : 'li')) {
					svelte_element.d(1);
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*outsideList*/ ctx[5] ? 'div' : 'li';
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else {
					svelte_element.p(ctx, dirty);
				}
			} else if (previous_tag) {
				svelte_element.d(1);
				svelte_element = null;
				previous_tag = /*outsideList*/ ctx[5] ? 'div' : 'li';
			}
		},
		i(local) {
			if (current) return;
			transition_in(svelte_element, local);
			current = true;
		},
		o(local) {
			transition_out(svelte_element, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(svelte_element_anchor);
			}

			if (svelte_element) svelte_element.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let tag;
	const omit_props_names = ["href","icon","isLoading","isDisabled","isCurrent","outsideList","onClick"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { href = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { isLoading = false } = $$props;
	let { isDisabled = false } = $$props;
	let { isCurrent = window.location.pathname === href } = $$props;
	let { outsideList = false } = $$props;
	let { onClick = undefined } = $$props;

	const checkIfCurrent = () => {
		$$invalidate(0, isCurrent = window.location.pathname === href || window.location.hash === href);
	};

	onMount(() => {

		['pushState', 'replaceState'].forEach(name => {
			const original = history[name];

			history[name] = function () {
				original.apply(history, arguments);
				checkIfCurrent();
			};
		});
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('isLoading' in $$new_props) $$invalidate(3, isLoading = $$new_props.isLoading);
		if ('isDisabled' in $$new_props) $$invalidate(4, isDisabled = $$new_props.isDisabled);
		if ('isCurrent' in $$new_props) $$invalidate(0, isCurrent = $$new_props.isCurrent);
		if ('outsideList' in $$new_props) $$invalidate(5, outsideList = $$new_props.outsideList);
		if ('onClick' in $$new_props) $$invalidate(6, onClick = $$new_props.onClick);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*href*/ 2) {
			$$invalidate(7, tag = href ? 'a' : 'button');
		}
	};

	return [
		isCurrent,
		href,
		icon,
		isLoading,
		isDisabled,
		outsideList,
		onClick,
		tag,
		checkIfCurrent,
		$$restProps,
		$$slots,
		$$scope,
		slots
	];
}

class NavigationItem extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				href: 1,
				icon: 2,
				isLoading: 3,
				isDisabled: 4,
				isCurrent: 0,
				outsideList: 5,
				onClick: 6
			},
			add_css
		);
	}
}

export { NavigationItem as default };
//# sourceMappingURL=navigationItem.js.map
