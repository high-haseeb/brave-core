import { S as SvelteComponent, i as init, s as safe_not_equal, B as empty, f as insert, k as transition_in, j as check_outros, h as transition_out, o as detach, V as destroy_each, A as component_subscribe, q as create_component, v as mount_component, y as destroy_component, p as group_outros, b as space, e as element, I as text, d as attr, g as append, J as set_data } from './a4e1d370.js';
import { e as ensure_array_like } from './0a2d7621.js';
import Dialog from './dialog.js';
import Button from './button.js';
import { w as writable } from './58debee4.js';

var _a;
let helper;
const ensureDialogHelper = () => {
    if (helper)
        return;
    const mountPoint = document.createElement('div');
    mountPoint.id = 'leo-dialog-helper';
    document.body.appendChild(mountPoint);
    helper = new DialogsContainer({
        target: mountPoint
    });
};
const dialogs = writable([]);
const dialog = (options) => {
    ensureDialogHelper();
    const promise = new Promise((accept) => {
        const info = {
            title: options.title,
            body: options.body,
            actions: options.actions,
            resolve: (result) => {
                dialogs.update((d) => d.filter((i) => i !== info));
                accept(result);
            }
        };
        dialogs.update((d) => [...d, info]);
    });
    return promise;
};
const alert = (message, options) => dialog({
    title: message,
    actions: [
        {
            text: options.okText
        }
    ]
});
const confirm = (message, options) => dialog({
    title: message,
    actions: [
        {
            result: false,
            kind: 'outline',
            text: options.cancelText
        },
        {
            result: true,
            kind: 'filled',
            text: options.okText
        }
    ]
}).then((r) => !!r);
const leo = (_a = window === null || window === void 0 ? void 0 : window.leo) !== null && _a !== void 0 ? _a : (window.leo = {});
leo.alert = alert;
leo.confirm = confirm;
leo.dialog = dialog;

/* src/components/dialog/dialogsContainer.svelte generated by Svelte v4.2.19 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (9:4) {#if dialog.body}
function create_if_block(ctx) {
	let div;
	let t_value = /*dialog*/ ctx[3].body + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$dialogs*/ 1 && t_value !== (t_value = /*dialog*/ ctx[3].body + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (7:2) <Dialog modal isOpen onClose={() => dialog.resolve()}>
function create_default_slot_1(ctx) {
	let t;
	let if_block = /*dialog*/ ctx[3].body && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (/*dialog*/ ctx[3].body) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			if (if_block) if_block.d(detaching);
		}
	};
}

// (8:4) 
function create_title_slot(ctx) {
	let div;
	let t_value = /*dialog*/ ctx[3].title + "";
	let t;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "slot", "title");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$dialogs*/ 1 && t_value !== (t_value = /*dialog*/ ctx[3].title + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (14:8) <Button           kind={action.kind}           onClick={() => dialog.resolve(action.result)}         >
function create_default_slot(ctx) {
	let t_value = /*action*/ ctx[6].text + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$dialogs*/ 1 && t_value !== (t_value = /*action*/ ctx[6].text + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (13:6) {#each dialog.actions as action}
function create_each_block_1(ctx) {
	let button;
	let current;

	function func() {
		return /*func*/ ctx[1](/*dialog*/ ctx[3], /*action*/ ctx[6]);
	}

	button = new Button({
			props: {
				kind: /*action*/ ctx[6].kind,
				onClick: func,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};
			if (dirty & /*$dialogs*/ 1) button_changes.kind = /*action*/ ctx[6].kind;
			if (dirty & /*$dialogs*/ 1) button_changes.onClick = func;

			if (dirty & /*$$scope, $dialogs*/ 513) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (12:4) 
function create_actions_slot(ctx) {
	let div;
	let t;
	let current;
	let each_value_1 = ensure_array_like(/*dialog*/ ctx[3].actions);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "slot", "actions");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*$dialogs*/ 1) {
				each_value_1 = ensure_array_like(/*dialog*/ ctx[3].actions);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (6:0) {#each $dialogs as dialog}
function create_each_block(ctx) {
	let dialog_1;
	let current;

	function func_1() {
		return /*func_1*/ ctx[2](/*dialog*/ ctx[3]);
	}

	dialog_1 = new Dialog({
			props: {
				modal: true,
				isOpen: true,
				onClose: func_1,
				$$slots: {
					actions: [create_actions_slot],
					title: [create_title_slot],
					default: [create_default_slot_1]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(dialog_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dialog_1, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const dialog_1_changes = {};
			if (dirty & /*$dialogs*/ 1) dialog_1_changes.onClose = func_1;

			if (dirty & /*$$scope, $dialogs*/ 513) {
				dialog_1_changes.$$scope = { dirty, ctx };
			}

			dialog_1.$set(dialog_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dialog_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dialog_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dialog_1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let each_1_anchor;
	let current;
	let each_value = ensure_array_like(/*$dialogs*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*$dialogs*/ 1) {
				each_value = ensure_array_like(/*$dialogs*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(each_1_anchor);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $dialogs;
	component_subscribe($$self, dialogs, $$value => $$invalidate(0, $dialogs = $$value));
	const func = (dialog, action) => dialog.resolve(action.result);
	const func_1 = dialog => dialog.resolve();
	return [$dialogs, func, func_1];
}

class DialogsContainer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { DialogsContainer as D, dialog as a, alert as b, confirm as c, dialogs as d, ensureDialogHelper as e };
//# sourceMappingURL=b6435b61.js.map
