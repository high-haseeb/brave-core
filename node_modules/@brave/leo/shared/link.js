import { S as SvelteComponent, i as init, s as safe_not_equal, a as append_styles, c as create_slot, P as assign, e as element, Q as set_attributes, t as toggle_class, f as insert, l as listen, u as update_slot_base, m as get_all_dirty_from_scope, n as get_slot_changes, k as transition_in, h as transition_out, o as detach, R as compute_rest_props, T as exclude_internal_props } from './a4e1d370.js';
import { g as get_spread_update } from './d682c58e.js';

/* src/components/link/link.svelte generated by Svelte v4.2.19 */

function add_css(target) {
	append_styles(target, "svelte-yvy5s7", "a.svelte-yvy5s7{--color:var(--leo-link-color, var(--leo-color-text-interactive));--hover-color:var(--leo-link-hover-color, var(--leo-color-primary-60));--visited-color:var(--leo-link-visited-color, var(--leo-color-pink-50));--disabled-color:var(\n    --leo-link-disabled-color,\n    var(--leo-color-text-disabled)\n  );--focus-color:var(--leo-link-focus-color, var(--color));--focus-shadow:var(--leo-link-focus-shadow, var(--leo-effect-focus-state));color:var(--color);cursor:pointer;-webkit-tap-highlight-color:transparent;text-decoration:underline}a.svelte-yvy5s7:where(:hover){color:var(--hover-color)}a.svelte-yvy5s7:where(:visited:not(:hover)){color:var(--visited-color)}a.svelte-yvy5s7:where(:focus-visible:not(.disabled)){color:var(--focus-color);outline:none;box-shadow:var(--focus-shadow);border-radius:var(--leo-radius-xs)}a.svelte-yvy5s7:where(.disabled){color:var(--disabled-color);pointer-events:none}");
}

function create_fragment(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let a_levels = [
		{ rel: "noopener" },
		/*$$restProps*/ ctx[2],
		{ href: /*href*/ ctx[0] },
		{ class: "leo-link" },
		{ "aria-disabled": /*isDisabled*/ ctx[1] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "disabled", /*isDisabled*/ ctx[1]);
			toggle_class(a, "svelte-yvy5s7", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				{ rel: "noopener" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				{ class: "leo-link" },
				(!current || dirty & /*isDisabled*/ 2) && { "aria-disabled": /*isDisabled*/ ctx[1] }
			]));

			toggle_class(a, "disabled", /*isDisabled*/ ctx[1]);
			toggle_class(a, "svelte-yvy5s7", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(a);
			}

			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","isDisabled"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href } = $$props;
	let { isDisabled = false } = $$props;

	const click_handler = e => {
		if (isDisabled) e.preventDefault();
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('isDisabled' in $$new_props) $$invalidate(1, isDisabled = $$new_props.isDisabled);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [href, isDisabled, $$restProps, $$scope, slots, click_handler];
}

class Link extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { href: 0, isDisabled: 1 }, add_css);
	}
}

export { Link as default };
//# sourceMappingURL=link.js.map
