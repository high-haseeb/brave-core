{"version":3,"file":"segmentedControl.js","sources":["../src/components/segmentedControl/segmentedControl.svelte"],"sourcesContent":["<script lang=\"ts\" context=\"module\">\n  export const segmentedControlSizes = ['default', 'small', 'tiny'] as const\n  type Size = (typeof segmentedControlSizes)[number]\n</script>\n\n<script lang=\"ts\">\n  import { onMount } from 'svelte'\n\n  export let value: string | undefined = undefined\n  export let size: Size = 'default'\n\n  export let onChange: (detail: { value: string | undefined }) => void =\n    undefined\n\n  let segmentedControl: HTMLDivElement\n\n  let pillWidth: number\n  let pillPosition: number\n\n  function getValue(e: Element) {\n    // If the option element doesn't have a value, fallback to using the text\n    // content - this allows writing simplified options:\n    // i.e. <o>1</o>\n    return e.getAttribute('value') ?? e['value'] ?? e.textContent\n  }\n\n  $: controlItems = Array.from(\n    (segmentedControl?.querySelector('slot') as HTMLSlotElement)\n      ?.assignedElements()\n      ?.filter((element) => element.tagName === 'LEO-CONTROLITEM') ??\n      segmentedControl?.querySelectorAll('.leo-control-item') ??\n      []\n  ) as HTMLElement[]\n\n  function setPill(item: HTMLElement) {\n    pillWidth = item.getBoundingClientRect().width\n    pillPosition = item.offsetLeft\n  }\n\n  const itemResizeObserver = new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      setPill(entry.target as HTMLElement)\n    }\n  })\n\n  $: {\n    for (const controlItem of controlItems) {\n      controlItem.setAttribute('role', 'option')\n\n      if (value === getValue(controlItem)) {\n        controlItem.setAttribute('aria-selected', '')\n        itemResizeObserver.observe(controlItem)\n      } else {\n        controlItem.removeAttribute('aria-selected')\n        itemResizeObserver.unobserve(controlItem)\n      }\n    }\n  }\n\n  function selectItem(e: Event) {\n    // Find the option which was clicked on, if any.\n    const item = controlItems.find((item) => e.composedPath().includes(item))\n\n    // If the event was triggered for something which isn't an option don't fire\n    // a change event.\n    if (!item) return\n\n    value = getValue(item)\n\n    onChange?.({ value })\n  }\n\n  let pill: HTMLDivElement\n\n  onMount(() => {\n    pill.addEventListener('transitionstart', () => {\n      segmentedControl.classList.add('transitioning')\n    })\n\n    pill.addEventListener('transitionend', () => {\n      segmentedControl.classList.remove('transitioning')\n    })\n  })\n</script>\n\n<div\n  bind:this={segmentedControl}\n  class=\"leo-segmented-control size-{size}\"\n  role=\"listbox\"\n  tabindex=\"-1\"\n  on:keypress={(e) => {\n    if (e.code !== 'Enter' && e.code !== 'Space') return\n    selectItem(e)\n  }}\n  on:click={selectItem}\n>\n  <div\n    class=\"pill\"\n    style:width={`${pillWidth}px`}\n    style:left={`${pillPosition}px`}\n    bind:this={pill}\n  />\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  :host {\n    display: flex;\n    position: relative;\n    width: var(--leo-segmented-control-width, fit-content);\n\n    & .leo-segmented-control {\n        width: 100%;\n    }\n  }\n\n  .leo-segmented-control {\n    --leo-icon-size: var(--leo-icon-m);\n    --bg: var(--leo-color-neutral-10);\n    --control-padding: var(--leo-control-padding, var(--leo-spacing-s));\n    --gap: var(--leo-spacing-s);\n    --control-height: 44px;\n    --radius: var(--leo-radius-xl);\n\n    --leo-control-item-padding: var(--leo-spacing-xl);\n    --leo-control-item-icon-gap: var(--leo-spacing-m);\n    --leo-control-item-font: var(--leo-font-components-button-default);\n\n    display: flex;\n    min-width: max-content;\n    width: var(--leo-segmented-control-width, fit-content);\n    align-items: center;\n    position: relative;\n\n    background: var(--leo-segmented-control-bg, var(--bg));\n    padding: var(--control-padding);\n    gap: var(--leo-segmented-control-gap, var(--gap));\n    height: var(--leo-segmented-control-height, var(--control-height));\n    border-radius: var(--leo-segmented-control-radius, var(--radius));\n\n    &.size-small {\n      --leo-icon-size: var(--leo-icon-s);\n      --control-height: 36px;\n      --radius: var(--leo-radius-xl);\n      --leo-control-item-padding: var(--leo-spacing-l);\n      --leo-control-item-font: var(--leo-font-components-button-small);\n    }\n\n    &.size-tiny {\n      --leo-icon-size: var(--leo-icon-xs);\n      --control-padding: var(--leo-control-padding, var(--leo-spacing-xs));\n      --gap: var(--leo-spacing-xs);\n      --control-height: 28px;\n      --radius: var(--leo-radius-m);\n      --leo-control-item-padding: var(--leo-spacing-m);\n      --leo-control-item-font: var(--leo-font-components-button-small);\n    }\n\n    .pill {\n      background: var(--leo-color-container-background);\n      position: absolute;\n      height: calc(100% - (var(--control-padding) * 2));\n      min-width: var(--control-height);\n      border-radius: calc(var(--radius) - var(--control-padding));\n      box-shadow: var(--leo-effect-elevation-01);\n      transition:\n        width 0.2s cubic-bezier(0.22, 1, 0.36, 1),\n        left 0.4s cubic-bezier(0.22, 1, 0.36, 1);\n    }\n\n    :where(&) > :global .leo-control-item,\n    :where(&) > :global ::slotted(leo-controlitem) {\n      --leo-control-item-icon-color: var(--leo-color-icon-default);\n      --leo-control-item-color: var(--leo-color-text-secondary);\n      --leo-control-item-background: transparent;\n      --leo-control-item-radius: calc(var(--radius) - var(--control-padding));\n    }\n\n    :where(&:not(.transitioning)) > :global .leo-control-item:hover,\n    :where(&:not(.transitioning)) > :global ::slotted(leo-controlitem:hover) {\n      --leo-control-item-background: var(--leo-color-container-highlight);\n      --leo-control-item-color: var(--leo-color-text-primary);\n    }\n\n    :where(&) > :global .leo-control-item:focus-visible,\n    :where(&) > :global ::slotted(leo-controlitem:focus-visible) {\n      --leo-control-item-shadow: var(--leo-effect-focus-state);\n    }\n\n    :where(&) > :global .leo-control-item[aria-selected],\n    :where(&) > :global ::slotted(leo-controlitem[aria-selected]) {\n      --leo-control-item-color: var(--leo-color-text-interactive);\n      --leo-icon-color: var(--leo-color-icon-interactive);\n    }\n\n    :where(&.transitioning) > :global .leo-control-item[aria-selected],\n    :where(&.transitioning) > :global ::slotted(leo-controlitem[aria-selected]),\n    :where(&) > :global .leo-control-item[aria-selected]:hover,\n    :where(&) > :global ::slotted(leo-controlitem[aria-selected]:hover) {\n      --leo-control-item-icon-color: currentColor;\n      --leo-control-item-background: var(--leo-color-container-background);\n    }\n  }\n</style>\n"],"names":[],"mappings":"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"}